<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InactiveScopeException;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * appDevDebugProjectContainer
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class appDevDebugProjectContainer extends Container
{
    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services =
        $this->scopedServices =
        $this->scopeStacks = array();

        $this->set('service_container', $this);

        $this->scopes = array('request' => 'container');
        $this->scopeChildren = array('request' => array());
        $this->methodMap = array(
            'a2lix_translation_form.default.listener.translations' => 'getA2lixTranslationForm_Default_Listener_TranslationsService',
            'a2lix_translation_form.default.service.translation' => 'getA2lixTranslationForm_Default_Service_TranslationService',
            'a2lix_translation_form.default.type.translations' => 'getA2lixTranslationForm_Default_Type_TranslationsService',
            'a2lix_translation_form.default.type.translationsfields' => 'getA2lixTranslationForm_Default_Type_TranslationsfieldsService',
            'a2lix_translation_form.default.type.translationsforms' => 'getA2lixTranslationForm_Default_Type_TranslationsformsService',
            'a2lix_translation_form.default.type.translationslocalesselector' => 'getA2lixTranslationForm_Default_Type_TranslationslocalesselectorService',
            'akeneo_batch.connectors' => 'getAkeneoBatch_ConnectorsService',
            'akeneo_batch.job_factory' => 'getAkeneoBatch_JobFactoryService',
            'akeneo_batch.job_repository' => 'getAkeneoBatch_JobRepositoryService',
            'akeneo_batch.logger.batch_log_handler' => 'getAkeneoBatch_Logger_BatchLogHandlerService',
            'akeneo_batch.logger_subscriber' => 'getAkeneoBatch_LoggerSubscriberService',
            'akeneo_batch.mail_notifier' => 'getAkeneoBatch_MailNotifierService',
            'akeneo_batch.manager.job_execution' => 'getAkeneoBatch_Manager_JobExecutionService',
            'akeneo_batch.notification_subscriber' => 'getAkeneoBatch_NotificationSubscriberService',
            'akeneo_batch.set_job_execution_log_file_subscriber' => 'getAkeneoBatch_SetJobExecutionLogFileSubscriberService',
            'akeneo_batch.step_factory' => 'getAkeneoBatch_StepFactoryService',
            'akeneo_measure.manager' => 'getAkeneoMeasure_ManagerService',
            'akeneo_measure.measure_converter' => 'getAkeneoMeasure_MeasureConverterService',
            'akeneo_storage_utils.doctrine.object_detacher' => 'getAkeneoStorageUtils_Doctrine_ObjectDetacherService',
            'akeneo_storage_utils.doctrine.smart_manager_registry' => 'getAkeneoStorageUtils_Doctrine_SmartManagerRegistryService',
            'akeneo_storage_utils.doctrine.table_name_builder' => 'getAkeneoStorageUtils_Doctrine_TableNameBuilderService',
            'akeneo_storage_utils.factory.referenced_collection' => 'getAkeneoStorageUtils_Factory_ReferencedCollectionService',
            'annotation_reader' => 'getAnnotationReaderService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.filter.cssrewrite' => 'getAssetic_Filter_CssrewriteService',
            'assetic.filter.lessphp' => 'getAssetic_Filter_LessphpService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assetic.helper.static' => 'getAssetic_Helper_StaticService',
            'besimple.soap.cache' => 'getBesimple_Soap_CacheService',
            'besimple.soap.context.soap' => 'getBesimple_Soap_Context_SoapService',
            'besimple.soap.converter.collection' => 'getBesimple_Soap_Converter_CollectionService',
            'besimple.soap.definition.loader' => 'getBesimple_Soap_Definition_LoaderService',
            'besimple.soap.exception_listener' => 'getBesimple_Soap_ExceptionListenerService',
            'besimple.soap.request_format.listener' => 'getBesimple_Soap_RequestFormat_ListenerService',
            'besimple.soap.response' => 'getBesimple_Soap_ResponseService',
            'besimple.soap.response.listener' => 'getBesimple_Soap_Response_ListenerService',
            'besimple.soap.type.repository' => 'getBesimple_Soap_Type_RepositoryService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'clank.client_event.listener' => 'getClank_ClientEvent_ListenerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.deprecation_logger_listener' => 'getDebug_DeprecationLoggerListenerService',
            'debug.emergency_logger_listener' => 'getDebug_EmergencyLoggerListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'debug.templating.engine.php' => 'getDebug_Templating_Engine_PhpService',
            'debug.templating.engine.twig' => 'getDebug_Templating_Engine_TwigService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default.wrapped_connection' => 'getDoctrine_Dbal_Default_WrappedConnectionService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger' => 'getDoctrine_Dbal_LoggerService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.dbal.logger.profiling.report_source' => 'getDoctrine_Dbal_Logger_Profiling_ReportSourceService',
            'doctrine.dbal.logger.profiling.report_target' => 'getDoctrine_Dbal_Logger_Profiling_ReportTargetService',
            'doctrine.dbal.report_source_connection' => 'getDoctrine_Dbal_ReportSourceConnectionService',
            'doctrine.dbal.report_target_connection' => 'getDoctrine_Dbal_ReportTargetConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.listeners.resolve_target_entity' => 'getDoctrine_Orm_Listeners_ResolveTargetEntityService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'escape_wsse_authentication.encoder' => 'getEscapeWsseAuthentication_EncoderService',
            'escape_wsse_authentication.encoder.wsse_secured' => 'getEscapeWsseAuthentication_Encoder_WsseSecuredService',
            'escape_wsse_authentication.entry_point' => 'getEscapeWsseAuthentication_EntryPointService',
            'escape_wsse_authentication.entry_point.wsse_secured' => 'getEscapeWsseAuthentication_EntryPoint_WsseSecuredService',
            'escape_wsse_authentication.listener' => 'getEscapeWsseAuthentication_ListenerService',
            'escape_wsse_authentication.listener.wsse_secured' => 'getEscapeWsseAuthentication_Listener_WsseSecuredService',
            'escape_wsse_authentication.nonce_cache' => 'getEscapeWsseAuthentication_NonceCacheService',
            'escape_wsse_authentication.nonce_cache.wsse_secured' => 'getEscapeWsseAuthentication_NonceCache_WsseSecuredService',
            'escape_wsse_authentication.provider' => 'getEscapeWsseAuthentication_ProviderService',
            'escape_wsse_authentication.provider.wsse_secured' => 'getEscapeWsseAuthentication_Provider_WsseSecuredService',
            'event_dispatcher' => 'getEventDispatcherService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'foody_import_product.processor.product' => 'getFoodyImportProduct_Processor_ProductService',
            'foody_import_product.reader.bdd_product' => 'getFoodyImportProduct_Reader_BddProductService',
            'foody_import_product.writer.orm_product' => 'getFoodyImportProduct_Writer_OrmProductService',
            'form.csrf_provider' => 'getForm_CsrfProviderService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.repeated_field_parameters' => 'getForm_TypeExtension_RepeatedFieldParametersService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.validation_groups' => 'getForm_TypeExtension_ValidationGroupsService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.format_listener' => 'getFosRest_FormatListenerService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.serializer' => 'getFosRest_SerializerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'genemu.form.core.type.captcha' => 'getGenemu_Form_Core_Type_CaptchaService',
            'genemu.form.core.type.plain' => 'getGenemu_Form_Core_Type_PlainService',
            'genemu.form.core.type.recaptcha' => 'getGenemu_Form_Core_Type_RecaptchaService',
            'genemu.form.core.type.tinymce' => 'getGenemu_Form_Core_Type_TinymceService',
            'genemu.form.entity.type.ajaxentity' => 'getGenemu_Form_Entity_Type_AjaxentityService',
            'genemu.form.jquery.type.autocomplete.document' => 'getGenemu_Form_Jquery_Type_Autocomplete_DocumentService',
            'genemu.form.jquery.type.autocomplete.entity' => 'getGenemu_Form_Jquery_Type_Autocomplete_EntityService',
            'genemu.form.jquery.type.autocomplete.text' => 'getGenemu_Form_Jquery_Type_Autocomplete_TextService',
            'genemu.form.jquery.type.autocompleter.choice' => 'getGenemu_Form_Jquery_Type_Autocompleter_ChoiceService',
            'genemu.form.jquery.type.autocompleter.country' => 'getGenemu_Form_Jquery_Type_Autocompleter_CountryService',
            'genemu.form.jquery.type.autocompleter.currency' => 'getGenemu_Form_Jquery_Type_Autocompleter_CurrencyService',
            'genemu.form.jquery.type.autocompleter.document' => 'getGenemu_Form_Jquery_Type_Autocompleter_DocumentService',
            'genemu.form.jquery.type.autocompleter.entity' => 'getGenemu_Form_Jquery_Type_Autocompleter_EntityService',
            'genemu.form.jquery.type.autocompleter.language' => 'getGenemu_Form_Jquery_Type_Autocompleter_LanguageService',
            'genemu.form.jquery.type.autocompleter.locale' => 'getGenemu_Form_Jquery_Type_Autocompleter_LocaleService',
            'genemu.form.jquery.type.autocompleter.model' => 'getGenemu_Form_Jquery_Type_Autocompleter_ModelService',
            'genemu.form.jquery.type.autocompleter.timezone' => 'getGenemu_Form_Jquery_Type_Autocompleter_TimezoneService',
            'genemu.form.jquery.type.chosen.choice' => 'getGenemu_Form_Jquery_Type_Chosen_ChoiceService',
            'genemu.form.jquery.type.chosen.country' => 'getGenemu_Form_Jquery_Type_Chosen_CountryService',
            'genemu.form.jquery.type.chosen.currency' => 'getGenemu_Form_Jquery_Type_Chosen_CurrencyService',
            'genemu.form.jquery.type.chosen.document' => 'getGenemu_Form_Jquery_Type_Chosen_DocumentService',
            'genemu.form.jquery.type.chosen.entity' => 'getGenemu_Form_Jquery_Type_Chosen_EntityService',
            'genemu.form.jquery.type.chosen.language' => 'getGenemu_Form_Jquery_Type_Chosen_LanguageService',
            'genemu.form.jquery.type.chosen.locale' => 'getGenemu_Form_Jquery_Type_Chosen_LocaleService',
            'genemu.form.jquery.type.chosen.model' => 'getGenemu_Form_Jquery_Type_Chosen_ModelService',
            'genemu.form.jquery.type.chosen.timezone' => 'getGenemu_Form_Jquery_Type_Chosen_TimezoneService',
            'genemu.form.jquery.type.color' => 'getGenemu_Form_Jquery_Type_ColorService',
            'genemu.form.jquery.type.date' => 'getGenemu_Form_Jquery_Type_DateService',
            'genemu.form.jquery.type.file' => 'getGenemu_Form_Jquery_Type_FileService',
            'genemu.form.jquery.type.geolocation' => 'getGenemu_Form_Jquery_Type_GeolocationService',
            'genemu.form.jquery.type.image' => 'getGenemu_Form_Jquery_Type_ImageService',
            'genemu.form.jquery.type.rating' => 'getGenemu_Form_Jquery_Type_RatingService',
            'genemu.form.jquery.type.select2.choice' => 'getGenemu_Form_Jquery_Type_Select2_ChoiceService',
            'genemu.form.jquery.type.select2.country' => 'getGenemu_Form_Jquery_Type_Select2_CountryService',
            'genemu.form.jquery.type.select2.currency' => 'getGenemu_Form_Jquery_Type_Select2_CurrencyService',
            'genemu.form.jquery.type.select2.document' => 'getGenemu_Form_Jquery_Type_Select2_DocumentService',
            'genemu.form.jquery.type.select2.entity' => 'getGenemu_Form_Jquery_Type_Select2_EntityService',
            'genemu.form.jquery.type.select2.hidden' => 'getGenemu_Form_Jquery_Type_Select2_HiddenService',
            'genemu.form.jquery.type.select2.language' => 'getGenemu_Form_Jquery_Type_Select2_LanguageService',
            'genemu.form.jquery.type.select2.locale' => 'getGenemu_Form_Jquery_Type_Select2_LocaleService',
            'genemu.form.jquery.type.select2.model' => 'getGenemu_Form_Jquery_Type_Select2_ModelService',
            'genemu.form.jquery.type.select2.timezone' => 'getGenemu_Form_Jquery_Type_Select2_TimezoneService',
            'genemu.form.jquery.type.slider' => 'getGenemu_Form_Jquery_Type_SliderService',
            'genemu.form.jquery.type.tokeninput.choice' => 'getGenemu_Form_Jquery_Type_Tokeninput_ChoiceService',
            'genemu.form.jquery.type.tokeninput.country' => 'getGenemu_Form_Jquery_Type_Tokeninput_CountryService',
            'genemu.form.jquery.type.tokeninput.currency' => 'getGenemu_Form_Jquery_Type_Tokeninput_CurrencyService',
            'genemu.form.jquery.type.tokeninput.document' => 'getGenemu_Form_Jquery_Type_Tokeninput_DocumentService',
            'genemu.form.jquery.type.tokeninput.entity' => 'getGenemu_Form_Jquery_Type_Tokeninput_EntityService',
            'genemu.form.jquery.type.tokeninput.language' => 'getGenemu_Form_Jquery_Type_Tokeninput_LanguageService',
            'genemu.form.jquery.type.tokeninput.locale' => 'getGenemu_Form_Jquery_Type_Tokeninput_LocaleService',
            'genemu.form.jquery.type.tokeninput.model' => 'getGenemu_Form_Jquery_Type_Tokeninput_ModelService',
            'genemu.form.jquery.type.tokeninput.timezone' => 'getGenemu_Form_Jquery_Type_Tokeninput_TimezoneService',
            'genemu.form.model.type.ajaxmodel' => 'getGenemu_Form_Model_Type_AjaxmodelService',
            'genemu.form.type_recaptcha.validator' => 'getGenemu_Form_TypeRecaptcha_ValidatorService',
            'genemu.gd.captcha' => 'getGenemu_Gd_CaptchaService',
            'genemu.twig.extension.form' => 'getGenemu_Twig_Extension_FormService',
            'http_kernel' => 'getHttpKernelService',
            'jdare_clank.clank_app' => 'getJdareClank_ClankAppService',
            'jdare_clank.clank_handler_rpc' => 'getJdareClank_ClankHandlerRpcService',
            'jdare_clank.clank_handler_topic' => 'getJdareClank_ClankHandlerTopicService',
            'jdare_clank.entry_point' => 'getJdareClank_EntryPointService',
            'jdare_clank.periodic_sample_service' => 'getJdareClank_PeriodicSampleServiceService',
            'jdare_clank.rpc_sample_service' => 'getJdareClank_RpcSampleServiceService',
            'jdare_clank.topic_sample_service' => 'getJdareClank_TopicSampleServiceService',
            'jdare_clank.twig.clank_extension' => 'getJdareClank_Twig_ClankExtensionService',
            'jdare_clank.web_socket_server' => 'getJdareClank_WebSocketServerService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.metadata_factory' => 'getJmsSerializer_MetadataFactoryService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'jsfv.controller' => 'getJsfv_ControllerService',
            'jsfv.generator' => 'getJsfv_GeneratorService',
            'jsfv.repeated_field_listener' => 'getJsfv_RepeatedFieldListenerService',
            'jsfv.validation_groups_listener' => 'getJsfv_ValidationGroupsListenerService',
            'kernel' => 'getKernelService',
            'kernel.cache_warmer.jsformvalidation' => 'getKernel_CacheWarmer_JsformvalidationService',
            'kernel.listener.hashnav_response' => 'getKernel_Listener_HashnavResponseService',
            'kernel.listener.nav_history_response' => 'getKernel_Listener_NavHistoryResponseService',
            'kernel.listener.title_service.request_listener' => 'getKernel_Listener_TitleService_RequestListenerService',
            'knp_gaufrette.filesystem_map' => 'getKnpGaufrette_FilesystemMapService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.helper' => 'getKnpMenu_HelperService',
            'knp_menu.listener.voters' => 'getKnpMenu_Listener_VotersService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'knp_paginator' => 'getKnpPaginatorService',
            'knp_paginator.helper.processor' => 'getKnpPaginator_Helper_ProcessorService',
            'knp_paginator.subscriber.filtration' => 'getKnpPaginator_Subscriber_FiltrationService',
            'knp_paginator.subscriber.paginate' => 'getKnpPaginator_Subscriber_PaginateService',
            'knp_paginator.subscriber.sliding_pagination' => 'getKnpPaginator_Subscriber_SlidingPaginationService',
            'knp_paginator.subscriber.sortable' => 'getKnpPaginator_Subscriber_SortableService',
            'knp_paginator.templating.helper.pagination' => 'getKnpPaginator_Templating_Helper_PaginationService',
            'knp_paginator.twig.extension.pagination' => 'getKnpPaginator_Twig_Extension_PaginationService',
            'knp_voter_request' => 'getKnpVoterRequestService',
            'lexik_maintenance.driver.factory' => 'getLexikMaintenance_Driver_FactoryService',
            'lexik_maintenance.listener' => 'getLexikMaintenance_ListenerService',
            'liip_imagine' => 'getLiipImagineService',
            'liip_imagine.cache.clearer' => 'getLiipImagine_Cache_ClearerService',
            'liip_imagine.cache.manager' => 'getLiipImagine_Cache_ManagerService',
            'liip_imagine.cache.resolver.no_cache' => 'getLiipImagine_Cache_Resolver_NoCacheService',
            'liip_imagine.cache.resolver.web_path' => 'getLiipImagine_Cache_Resolver_WebPathService',
            'liip_imagine.controller' => 'getLiipImagine_ControllerService',
            'liip_imagine.data.loader.filesystem' => 'getLiipImagine_Data_Loader_FilesystemService',
            'liip_imagine.data.manager' => 'getLiipImagine_Data_ManagerService',
            'liip_imagine.filter.configuration' => 'getLiipImagine_Filter_ConfigurationService',
            'liip_imagine.filter.loader.background' => 'getLiipImagine_Filter_Loader_BackgroundService',
            'liip_imagine.filter.loader.crop' => 'getLiipImagine_Filter_Loader_CropService',
            'liip_imagine.filter.loader.paste' => 'getLiipImagine_Filter_Loader_PasteService',
            'liip_imagine.filter.loader.relative_resize' => 'getLiipImagine_Filter_Loader_RelativeResizeService',
            'liip_imagine.filter.loader.resize' => 'getLiipImagine_Filter_Loader_ResizeService',
            'liip_imagine.filter.loader.strip' => 'getLiipImagine_Filter_Loader_StripService',
            'liip_imagine.filter.loader.thumbnail' => 'getLiipImagine_Filter_Loader_ThumbnailService',
            'liip_imagine.filter.loader.upscale' => 'getLiipImagine_Filter_Loader_UpscaleService',
            'liip_imagine.filter.loader.watermark' => 'getLiipImagine_Filter_Loader_WatermarkService',
            'liip_imagine.filter.manager' => 'getLiipImagine_Filter_ManagerService',
            'liip_imagine.form.type.image' => 'getLiipImagine_Form_Type_ImageService',
            'liip_imagine.routing.loader' => 'getLiipImagine_Routing_LoaderService',
            'liip_imagine.templating.helper' => 'getLiipImagine_Templating_HelperService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.debug' => 'getMonolog_Handler_DebugService',
            'monolog.handler.firephp' => 'getMonolog_Handler_FirephpService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.logger.batch' => 'getMonolog_Logger_BatchService',
            'monolog.logger.deprecation' => 'getMonolog_Logger_DeprecationService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.emergency' => 'getMonolog_Logger_EmergencyService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'nelmio_api_doc.doc_comment_extractor' => 'getNelmioApiDoc_DocCommentExtractorService',
            'nelmio_api_doc.event_listener.request' => 'getNelmioApiDoc_EventListener_RequestService',
            'nelmio_api_doc.extractor.api_doc_extractor' => 'getNelmioApiDoc_Extractor_ApiDocExtractorService',
            'nelmio_api_doc.form.extension.description_form_type_extension' => 'getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService',
            'nelmio_api_doc.formatter.abstract_formatter' => 'getNelmioApiDoc_Formatter_AbstractFormatterService',
            'nelmio_api_doc.formatter.html_formatter' => 'getNelmioApiDoc_Formatter_HtmlFormatterService',
            'nelmio_api_doc.formatter.markdown_formatter' => 'getNelmioApiDoc_Formatter_MarkdownFormatterService',
            'nelmio_api_doc.formatter.simple_formatter' => 'getNelmioApiDoc_Formatter_SimpleFormatterService',
            'nelmio_api_doc.parser.form_type_parser' => 'getNelmioApiDoc_Parser_FormTypeParserService',
            'nelmio_api_doc.parser.jms_metadata_parser' => 'getNelmioApiDoc_Parser_JmsMetadataParserService',
            'nelmio_api_doc.parser.validation_parser' => 'getNelmioApiDoc_Parser_ValidationParserService',
            'nelmio_api_doc.twig.extension.extra_markdown' => 'getNelmioApiDoc_Twig_Extension_ExtraMarkdownService',
            'oro_assetic.asset_manager' => 'getOroAssetic_AssetManagerService',
            'oro_assetic.twig.extension' => 'getOroAssetic_Twig_ExtensionService',
            'oro_config.form.config_subscriber' => 'getOroConfig_Form_ConfigSubscriberService',
            'oro_config.form.handler.config' => 'getOroConfig_Form_Handler_ConfigService',
            'oro_config.global' => 'getOroConfig_GlobalService',
            'oro_config.provider.system_configuration.form_provider' => 'getOroConfig_Provider_SystemConfiguration_FormProviderService',
            'oro_config.twig.config_extension' => 'getOroConfig_Twig_ConfigExtensionService',
            'oro_config.type.config_checkbox' => 'getOroConfig_Type_ConfigCheckboxService',
            'oro_config.type.form' => 'getOroConfig_Type_FormService',
            'oro_config.type.form_field' => 'getOroConfig_Type_FormFieldService',
            'oro_config.user' => 'getOroConfig_UserService',
            'oro_dataaudit.dataaudit_grid_service' => 'getOroDataaudit_DataauditGridServiceService',
            'oro_dataaudit.event_listener.dataaudit_history_grid_listener' => 'getOroDataaudit_EventListener_DataauditHistoryGridListenerService',
            'oro_dataaudit.listener.entity_subscriber' => 'getOroDataaudit_Listener_EntitySubscriberService',
            'oro_dataaudit.listener.kernel_listener' => 'getOroDataaudit_Listener_KernelListenerService',
            'oro_dataaudit.loggable.loggable_manager' => 'getOroDataaudit_Loggable_LoggableManagerService',
            'oro_datagrid.configuration.provider' => 'getOroDatagrid_Configuration_ProviderService',
            'oro_datagrid.configuration.provider.chain' => 'getOroDatagrid_Configuration_Provider_ChainService',
            'oro_datagrid.datagrid.builder' => 'getOroDatagrid_Datagrid_BuilderService',
            'oro_datagrid.datagrid.manager' => 'getOroDatagrid_Datagrid_ManagerService',
            'oro_datagrid.datagrid.request_params' => 'getOroDatagrid_Datagrid_RequestParamsService',
            'oro_datagrid.datasource.orm' => 'getOroDatagrid_Datasource_OrmService',
            'oro_datagrid.extension.action' => 'getOroDatagrid_Extension_ActionService',
            'oro_datagrid.extension.action.type.ajax' => 'getOroDatagrid_Extension_Action_Type_AjaxService',
            'oro_datagrid.extension.action.type.delete' => 'getOroDatagrid_Extension_Action_Type_DeleteService',
            'oro_datagrid.extension.action.type.navigate' => 'getOroDatagrid_Extension_Action_Type_NavigateService',
            'oro_datagrid.extension.formatter' => 'getOroDatagrid_Extension_FormatterService',
            'oro_datagrid.extension.formatter.field_property' => 'getOroDatagrid_Extension_Formatter_FieldPropertyService',
            'oro_datagrid.extension.formatter.property.callback_property' => 'getOroDatagrid_Extension_Formatter_Property_CallbackPropertyService',
            'oro_datagrid.extension.formatter.property.translateable_property' => 'getOroDatagrid_Extension_Formatter_Property_TranslateablePropertyService',
            'oro_datagrid.extension.formatter.property.twig_property' => 'getOroDatagrid_Extension_Formatter_Property_TwigPropertyService',
            'oro_datagrid.extension.formatter.property.url_property' => 'getOroDatagrid_Extension_Formatter_Property_UrlPropertyService',
            'oro_datagrid.extension.mass_action' => 'getOroDatagrid_Extension_MassActionService',
            'oro_datagrid.extension.mass_action.handler.delete' => 'getOroDatagrid_Extension_MassAction_Handler_DeleteService',
            'oro_datagrid.extension.mass_action.type.ajax' => 'getOroDatagrid_Extension_MassAction_Type_AjaxService',
            'oro_datagrid.extension.mass_action.type.delete' => 'getOroDatagrid_Extension_MassAction_Type_DeleteService',
            'oro_datagrid.extension.mass_action.type.redirect' => 'getOroDatagrid_Extension_MassAction_Type_RedirectService',
            'oro_datagrid.extension.mass_action.type.widget' => 'getOroDatagrid_Extension_MassAction_Type_WidgetService',
            'oro_datagrid.extension.mass_action.type.window' => 'getOroDatagrid_Extension_MassAction_Type_WindowService',
            'oro_datagrid.extension.orm_pager' => 'getOroDatagrid_Extension_OrmPagerService',
            'oro_datagrid.extension.orm_sorter' => 'getOroDatagrid_Extension_OrmSorterService',
            'oro_datagrid.extension.pager.orm.pager' => 'getOroDatagrid_Extension_Pager_Orm_PagerService',
            'oro_datagrid.extension.toolbar' => 'getOroDatagrid_Extension_ToolbarService',
            'oro_datagrid.extension.views' => 'getOroDatagrid_Extension_ViewsService',
            'oro_datagrid.mass_action.dispatcher' => 'getOroDatagrid_MassAction_DispatcherService',
            'oro_datagrid.mass_action.parameters_parser' => 'getOroDatagrid_MassAction_ParametersParserService',
            'oro_datagrid.provider.resolver' => 'getOroDatagrid_Provider_ResolverService',
            'oro_datagrid.twig.metadata' => 'getOroDatagrid_Twig_MetadataService',
            'oro_distribution.routing_loader' => 'getOroDistribution_RoutingLoaderService',
            'oro_email.cache' => 'getOroEmail_CacheService',
            'oro_email.datagrid_query_factory' => 'getOroEmail_DatagridQueryFactoryService',
            'oro_email.direct_mailer' => 'getOroEmail_DirectMailerService',
            'oro_email.email.address.manager' => 'getOroEmail_Email_Address_ManagerService',
            'oro_email.email.cache.manager' => 'getOroEmail_Email_Cache_ManagerService',
            'oro_email.email.entity.builder' => 'getOroEmail_Email_Entity_BuilderService',
            'oro_email.email.owner.provider' => 'getOroEmail_Email_Owner_ProviderService',
            'oro_email.email.owner.provider.storage' => 'getOroEmail_Email_Owner_Provider_StorageService',
            'oro_email.email_renderer' => 'getOroEmail_EmailRendererService',
            'oro_email.emailtemplate.datagrid_helper' => 'getOroEmail_Emailtemplate_DatagridHelperService',
            'oro_email.emailtemplate.datagrid_view_list' => 'getOroEmail_Emailtemplate_DatagridViewListService',
            'oro_email.form.email' => 'getOroEmail_Form_EmailService',
            'oro_email.form.emailtemplate' => 'getOroEmail_Form_EmailtemplateService',
            'oro_email.form.emailtemplate.api' => 'getOroEmail_Form_Emailtemplate_ApiService',
            'oro_email.form.handler.email' => 'getOroEmail_Form_Handler_EmailService',
            'oro_email.form.handler.emailtemplate' => 'getOroEmail_Form_Handler_EmailtemplateService',
            'oro_email.form.handler.emailtemplate.api' => 'getOroEmail_Form_Handler_Emailtemplate_ApiService',
            'oro_email.form.subscriber.emailtemplate' => 'getOroEmail_Form_Subscriber_EmailtemplateService',
            'oro_email.form.type.email' => 'getOroEmail_Form_Type_EmailService',
            'oro_email.form.type.email_address' => 'getOroEmail_Form_Type_EmailAddressService',
            'oro_email.form.type.emailtemplate' => 'getOroEmail_Form_Type_EmailtemplateService',
            'oro_email.form.type.emailtemplate.api' => 'getOroEmail_Form_Type_Emailtemplate_ApiService',
            'oro_email.form.type.emailtemplate_select' => 'getOroEmail_Form_Type_EmailtemplateSelectService',
            'oro_email.form.type.emailtemplate_translation' => 'getOroEmail_Form_Type_EmailtemplateTranslationService',
            'oro_email.listener.config_subscriber' => 'getOroEmail_Listener_ConfigSubscriberService',
            'oro_email.manager.email.api' => 'getOroEmail_Manager_Email_ApiService',
            'oro_email.manager.emailtemplate.api' => 'getOroEmail_Manager_Emailtemplate_ApiService',
            'oro_email.provider.variable_provider' => 'getOroEmail_Provider_VariableProviderService',
            'oro_email.twig.email_sandbox' => 'getOroEmail_Twig_EmailSandboxService',
            'oro_email.twig.email_security_policy' => 'getOroEmail_Twig_EmailSecurityPolicyService',
            'oro_email.twig.string_loader' => 'getOroEmail_Twig_StringLoaderService',
            'oro_email.validator.variables_validator' => 'getOroEmail_Validator_VariablesValidatorService',
            'oro_entity.datagrid.extension' => 'getOroEntity_Datagrid_ExtensionService',
            'oro_entity.entity_field_provider' => 'getOroEntity_EntityFieldProviderService',
            'oro_entity.entity_provider' => 'getOroEntity_EntityProviderService',
            'oro_entity.event_listener.custom_entity_grid_subscriber' => 'getOroEntity_EventListener_CustomEntityGridSubscriberService',
            'oro_entity.event_listener.relation_entity_grid_subscriber' => 'getOroEntity_EventListener_RelationEntityGridSubscriberService',
            'oro_entity.form.handler.entity_select' => 'getOroEntity_Form_Handler_EntitySelectService',
            'oro_entity.form.type.custom_entity' => 'getOroEntity_Form_Type_CustomEntityService',
            'oro_entity.form.type.entity_choice' => 'getOroEntity_Form_Type_EntityChoiceService',
            'oro_entity.form.type.entity_field_choice' => 'getOroEntity_Form_Type_EntityFieldChoiceService',
            'oro_entity.form.type.entity_select' => 'getOroEntity_Form_Type_EntitySelectService',
            'oro_entity.form.type.option_select' => 'getOroEntity_Form_Type_OptionSelectService',
            'oro_entity.listener.navigation_listener' => 'getOroEntity_Listener_NavigationListenerService',
            'oro_entity.orm.entity_class_accessor' => 'getOroEntity_Orm_EntityClassAccessorService',
            'oro_entity.orm.entity_class_resolver' => 'getOroEntity_Orm_EntityClassResolverService',
            'oro_entity.orm.sql_filter_collection' => 'getOroEntity_Orm_SqlFilterCollectionService',
            'oro_entity.owner.entity_config_subscriber' => 'getOroEntity_Owner_EntityConfigSubscriberService',
            'oro_entity_config.cache.cache' => 'getOroEntityConfig_Cache_CacheService',
            'oro_entity_config.cache.file_cache' => 'getOroEntityConfig_Cache_FileCacheService',
            'oro_entity_config.config_manager' => 'getOroEntityConfig_ConfigManagerService',
            'oro_entity_config.event_listener.audit_log_grid_listener' => 'getOroEntityConfig_EventListener_AuditLogGridListenerService',
            'oro_entity_config.event_listener.entityconfig_grid_listener' => 'getOroEntityConfig_EventListener_EntityconfigGridListenerService',
            'oro_entity_config.event_listener.entityfields_grid_listener' => 'getOroEntityConfig_EventListener_EntityfieldsGridListenerService',
            'oro_entity_config.event_listener.option_set_listener' => 'getOroEntityConfig_EventListener_OptionSetListenerService',
            'oro_entity_config.extension.config' => 'getOroEntityConfig_Extension_ConfigService',
            'oro_entity_config.link.config_manager' => 'getOroEntityConfig_Link_ConfigManagerService',
            'oro_entity_config.link.entity_manager' => 'getOroEntityConfig_Link_EntityManagerService',
            'oro_entity_config.link.provider_bag' => 'getOroEntityConfig_Link_ProviderBagService',
            'oro_entity_config.link.security_context' => 'getOroEntityConfig_Link_SecurityContextService',
            'oro_entity_config.model.file_cache' => 'getOroEntityConfig_Model_FileCacheService',
            'oro_entity_config.provider.dataaudit' => 'getOroEntityConfig_Provider_DataauditService',
            'oro_entity_config.provider.datagrid' => 'getOroEntityConfig_Provider_DatagridService',
            'oro_entity_config.provider.email' => 'getOroEntityConfig_Provider_EmailService',
            'oro_entity_config.provider.entity' => 'getOroEntityConfig_Provider_EntityService',
            'oro_entity_config.provider.extend' => 'getOroEntityConfig_Provider_ExtendService',
            'oro_entity_config.provider.form' => 'getOroEntityConfig_Provider_FormService',
            'oro_entity_config.provider.ownership' => 'getOroEntityConfig_Provider_OwnershipService',
            'oro_entity_config.provider.security' => 'getOroEntityConfig_Provider_SecurityService',
            'oro_entity_config.provider.view' => 'getOroEntityConfig_Provider_ViewService',
            'oro_entity_config.provider_bag' => 'getOroEntityConfig_ProviderBagService',
            'oro_entity_config.type.config' => 'getOroEntityConfig_Type_ConfigService',
            'oro_entity_extend.extend.extend_manager' => 'getOroEntityExtend_Extend_ExtendManagerService',
            'oro_entity_extend.extension.extend_entity' => 'getOroEntityExtend_Extension_ExtendEntityService',
            'oro_entity_extend.listener.config_subscriber' => 'getOroEntityExtend_Listener_ConfigSubscriberService',
            'oro_entity_extend.listener.entity_subscriber' => 'getOroEntityExtend_Listener_EntitySubscriberService',
            'oro_entity_extend.tools.dumper' => 'getOroEntityExtend_Tools_DumperService',
            'oro_entity_extend.twig.view_extension' => 'getOroEntityExtend_Twig_ViewExtensionService',
            'oro_entity_extend.type.field' => 'getOroEntityExtend_Type_FieldService',
            'oro_entity_extend.type.option_set' => 'getOroEntityExtend_Type_OptionSetService',
            'oro_entity_extend.type.option_set_collection' => 'getOroEntityExtend_Type_OptionSetCollectionService',
            'oro_entity_extend.type.relation' => 'getOroEntityExtend_Type_RelationService',
            'oro_filter.boolean_filter' => 'getOroFilter_BooleanFilterService',
            'oro_filter.choice_filter' => 'getOroFilter_ChoiceFilterService',
            'oro_filter.date_range_filter' => 'getOroFilter_DateRangeFilterService',
            'oro_filter.datetime_range_filter' => 'getOroFilter_DatetimeRangeFilterService',
            'oro_filter.entity_filter' => 'getOroFilter_EntityFilterService',
            'oro_filter.extension.orm_filter' => 'getOroFilter_Extension_OrmFilterService',
            'oro_filter.filter_utility' => 'getOroFilter_FilterUtilityService',
            'oro_filter.form.type.date_range' => 'getOroFilter_Form_Type_DateRangeService',
            'oro_filter.form.type.datetime_range' => 'getOroFilter_Form_Type_DatetimeRangeService',
            'oro_filter.form.type.filter' => 'getOroFilter_Form_Type_FilterService',
            'oro_filter.form.type.filter.boolean' => 'getOroFilter_Form_Type_Filter_BooleanService',
            'oro_filter.form.type.filter.choice' => 'getOroFilter_Form_Type_Filter_ChoiceService',
            'oro_filter.form.type.filter.date_range' => 'getOroFilter_Form_Type_Filter_DateRangeService',
            'oro_filter.form.type.filter.datetime_range' => 'getOroFilter_Form_Type_Filter_DatetimeRangeService',
            'oro_filter.form.type.filter.entity' => 'getOroFilter_Form_Type_Filter_EntityService',
            'oro_filter.form.type.filter.number' => 'getOroFilter_Form_Type_Filter_NumberService',
            'oro_filter.form.type.filter.selectrow' => 'getOroFilter_Form_Type_Filter_SelectrowService',
            'oro_filter.form.type.filter.text' => 'getOroFilter_Form_Type_Filter_TextService',
            'oro_filter.number_filter' => 'getOroFilter_NumberFilterService',
            'oro_filter.percent_filter' => 'getOroFilter_PercentFilterService',
            'oro_filter.select_row_filter' => 'getOroFilter_SelectRowFilterService',
            'oro_filter.string_filter' => 'getOroFilter_StringFilterService',
            'oro_filter.twig.extension.render_header' => 'getOroFilter_Twig_Extension_RenderHeaderService',
            'oro_filter.twig.extension.render_layout' => 'getOroFilter_Twig_Extension_RenderLayoutService',
            'oro_form.autocomplete.search_registry' => 'getOroForm_Autocomplete_SearchRegistryService',
            'oro_form.autocomplete.security' => 'getOroForm_Autocomplete_SecurityService',
            'oro_form.extension.client_validation' => 'getOroForm_Extension_ClientValidationService',
            'oro_form.extension.constraint_as_option' => 'getOroForm_Extension_ConstraintAsOptionService',
            'oro_form.extension.data_block' => 'getOroForm_Extension_DataBlockService',
            'oro_form.extension.js_validation' => 'getOroForm_Extension_JsValidationService',
            'oro_form.extension.js_validation.constraints_provider' => 'getOroForm_Extension_JsValidation_ConstraintsProviderService',
            'oro_form.extension.js_validation.repeated' => 'getOroForm_Extension_JsValidation_RepeatedService',
            'oro_form.importexport.primary_item_collection_normalizer' => 'getOroForm_Importexport_PrimaryItemCollectionNormalizerService',
            'oro_form.twig.form_extension' => 'getOroForm_Twig_FormExtensionService',
            'oro_form.twig.js_validation_extension' => 'getOroForm_Twig_JsValidationExtensionService',
            'oro_form.type.collection' => 'getOroForm_Type_CollectionService',
            'oro_form.type.date' => 'getOroForm_Type_DateService',
            'oro_form.type.datetime' => 'getOroForm_Type_DatetimeService',
            'oro_form.type.entity_identifier' => 'getOroForm_Type_EntityIdentifierService',
            'oro_form.type.icon' => 'getOroForm_Type_IconService',
            'oro_form.type.jqueryselect2_hidden' => 'getOroForm_Type_Jqueryselect2HiddenService',
            'oro_form.type.money' => 'getOroForm_Type_MoneyService',
            'oro_form.type.multiple_entity' => 'getOroForm_Type_MultipleEntityService',
            'oro_form.validator.constraint_factory' => 'getOroForm_Validator_ConstraintFactoryService',
            'oro_help.form.tooltip_extension' => 'getOroHelp_Form_TooltipExtensionService',
            'oro_help.listener.help_link' => 'getOroHelp_Listener_HelpLinkService',
            'oro_help.model.help_link_provider' => 'getOroHelp_Model_HelpLinkProviderService',
            'oro_help.twig.extension' => 'getOroHelp_Twig_ExtensionService',
            'oro_imap.connector.factory' => 'getOroImap_Connector_FactoryService',
            'oro_imap.email_synchronizer' => 'getOroImap_EmailSynchronizerService',
            'oro_imap.form.type.configuration' => 'getOroImap_Form_Type_ConfigurationService',
            'oro_installer.form.type.configuration' => 'getOroInstaller_Form_Type_ConfigurationService',
            'oro_installer.form.type.configuration.database' => 'getOroInstaller_Form_Type_Configuration_DatabaseService',
            'oro_installer.form.type.configuration.mailer' => 'getOroInstaller_Form_Type_Configuration_MailerService',
            'oro_installer.form.type.configuration.system' => 'getOroInstaller_Form_Type_Configuration_SystemService',
            'oro_installer.form.type.configuration.websocket' => 'getOroInstaller_Form_Type_Configuration_WebsocketService',
            'oro_installer.form.type.setup' => 'getOroInstaller_Form_Type_SetupService',
            'oro_installer.scenario' => 'getOroInstaller_ScenarioService',
            'oro_installer.yaml_persister' => 'getOroInstaller_YamlPersisterService',
            'oro_locale.cache' => 'getOroLocale_CacheService',
            'oro_locale.calendar' => 'getOroLocale_CalendarService',
            'oro_locale.calendar_factory' => 'getOroLocale_CalendarFactoryService',
            'oro_locale.form.type.country' => 'getOroLocale_Form_Type_CountryService',
            'oro_locale.form.type.currency' => 'getOroLocale_Form_Type_CurrencyService',
            'oro_locale.form.type.locale' => 'getOroLocale_Form_Type_LocaleService',
            'oro_locale.form.type.name_format' => 'getOroLocale_Form_Type_NameFormatService',
            'oro_locale.form.type.timezone' => 'getOroLocale_Form_Type_TimezoneService',
            'oro_locale.format_converter.date_time.intl' => 'getOroLocale_FormatConverter_DateTime_IntlService',
            'oro_locale.format_converter.date_time.moment' => 'getOroLocale_FormatConverter_DateTime_MomentService',
            'oro_locale.format_converter.date_time.registry' => 'getOroLocale_FormatConverter_DateTime_RegistryService',
            'oro_locale.formatter.address' => 'getOroLocale_Formatter_AddressService',
            'oro_locale.formatter.date_time' => 'getOroLocale_Formatter_DateTimeService',
            'oro_locale.formatter.name' => 'getOroLocale_Formatter_NameService',
            'oro_locale.formatter.number' => 'getOroLocale_Formatter_NumberService',
            'oro_locale.locale_listener' => 'getOroLocale_LocaleListenerService',
            'oro_locale.settings' => 'getOroLocale_SettingsService',
            'oro_locale.twig.address' => 'getOroLocale_Twig_AddressService',
            'oro_locale.twig.calendar' => 'getOroLocale_Twig_CalendarService',
            'oro_locale.twig.date_format' => 'getOroLocale_Twig_DateFormatService',
            'oro_locale.twig.date_time' => 'getOroLocale_Twig_DateTimeService',
            'oro_locale.twig.locale' => 'getOroLocale_Twig_LocaleService',
            'oro_locale.twig.name' => 'getOroLocale_Twig_NameService',
            'oro_locale.twig.number' => 'getOroLocale_Twig_NumberService',
            'oro_menu.builder_chain' => 'getOroMenu_BuilderChainService',
            'oro_menu.cache' => 'getOroMenu_CacheService',
            'oro_menu.configuration_builder' => 'getOroMenu_ConfigurationBuilderService',
            'oro_menu.factory' => 'getOroMenu_FactoryService',
            'oro_menu.twig.extension' => 'getOroMenu_Twig_ExtensionService',
            'oro_menu_acl_extension' => 'getOroMenuAclExtensionService',
            'oro_navigation.breadcrumb_manager' => 'getOroNavigation_BreadcrumbManagerService',
            'oro_navigation.favorites_menu.builder' => 'getOroNavigation_FavoritesMenu_BuilderService',
            'oro_navigation.form.handler.pagestate' => 'getOroNavigation_Form_Handler_PagestateService',
            'oro_navigation.form.pagestate' => 'getOroNavigation_Form_PagestateService',
            'oro_navigation.form.type.pagestate' => 'getOroNavigation_Form_Type_PagestateService',
            'oro_navigation.history_menu.builder' => 'getOroNavigation_HistoryMenu_BuilderService',
            'oro_navigation.item.builder.favorite' => 'getOroNavigation_Item_Builder_FavoriteService',
            'oro_navigation.item.builder.history' => 'getOroNavigation_Item_Builder_HistoryService',
            'oro_navigation.item.builder.mostviewed' => 'getOroNavigation_Item_Builder_MostviewedService',
            'oro_navigation.item.builder.pinbar' => 'getOroNavigation_Item_Builder_PinbarService',
            'oro_navigation.item.factory' => 'getOroNavigation_Item_FactoryService',
            'oro_navigation.item.pinbar.post_persist_listener' => 'getOroNavigation_Item_Pinbar_PostPersistListenerService',
            'oro_navigation.mostviewed_menu.builder' => 'getOroNavigation_MostviewedMenu_BuilderService',
            'oro_navigation.pinbar_menu.builder' => 'getOroNavigation_PinbarMenu_BuilderService',
            'oro_navigation.title_annotations_reader' => 'getOroNavigation_TitleAnnotationsReaderService',
            'oro_navigation.title_config_reader' => 'getOroNavigation_TitleConfigReaderService',
            'oro_navigation.title_service' => 'getOroNavigation_TitleServiceService',
            'oro_navigation.title_service.twig.extension' => 'getOroNavigation_TitleService_Twig_ExtensionService',
            'oro_navigation.translation.extractor' => 'getOroNavigation_Translation_ExtractorService',
            'oro_navigation.twig.hash_nav_extension' => 'getOroNavigation_Twig_HashNavExtensionService',
            'oro_organization.business_unit.listener' => 'getOroOrganization_BusinessUnit_ListenerService',
            'oro_organization.business_unit.manager.api' => 'getOroOrganization_BusinessUnit_Manager_ApiService',
            'oro_organization.business_unit_manager' => 'getOroOrganization_BusinessUnitManagerService',
            'oro_organization.entity_ownership.listener' => 'getOroOrganization_EntityOwnership_ListenerService',
            'oro_organization.event_listener.bu_update_grid_listener' => 'getOroOrganization_EventListener_BuUpdateGridListenerService',
            'oro_organization.event_listener.bu_view_grid_listener' => 'getOroOrganization_EventListener_BuViewGridListenerService',
            'oro_organization.form.business_unit' => 'getOroOrganization_Form_BusinessUnitService',
            'oro_organization.form.business_unit.api' => 'getOroOrganization_Form_BusinessUnit_ApiService',
            'oro_organization.form.extension.owner' => 'getOroOrganization_Form_Extension_OwnerService',
            'oro_organization.form.handler.api' => 'getOroOrganization_Form_Handler_ApiService',
            'oro_organization.form.handler.business_unit' => 'getOroOrganization_Form_Handler_BusinessUnitService',
            'oro_organization.form.listener' => 'getOroOrganization_Form_ListenerService',
            'oro_organization.form.transformer.business_unit_select' => 'getOroOrganization_Form_Transformer_BusinessUnitSelectService',
            'oro_organization.form.type.business_unit' => 'getOroOrganization_Form_Type_BusinessUnitService',
            'oro_organization.form.type.business_unit.api' => 'getOroOrganization_Form_Type_BusinessUnit_ApiService',
            'oro_organization.form.type.business_unit_select' => 'getOroOrganization_Form_Type_BusinessUnitSelectService',
            'oro_organization.form.type.business_unit_tree_select_type' => 'getOroOrganization_Form_Type_BusinessUnitTreeSelectTypeService',
            'oro_organization.form.type.ownership_type' => 'getOroOrganization_Form_Type_OwnershipTypeService',
            'oro_organization.method.get_ownership_type' => 'getOroOrganization_Method_GetOwnershipTypeService',
            'oro_organization.provider.business_units_grid' => 'getOroOrganization_Provider_BusinessUnitsGridService',
            'oro_organization.twig.business_units' => 'getOroOrganization_Twig_BusinessUnitsService',
            'oro_organization.twig.get_owner' => 'getOroOrganization_Twig_GetOwnerService',
            'oro_platform.maintenance' => 'getOroPlatform_MaintenanceService',
            'oro_requirejs.cache' => 'getOroRequirejs_CacheService',
            'oro_requirejs.twig.requirejs_extension' => 'getOroRequirejs_Twig_RequirejsExtensionService',
            'oro_requirejs_config_provider' => 'getOroRequirejsConfigProviderService',
            'oro_security.acl.ace_provider' => 'getOroSecurity_Acl_AceProviderService',
            'oro_security.acl.annotation_provider' => 'getOroSecurity_Acl_AnnotationProviderService',
            'oro_security.acl.extension_selector' => 'getOroSecurity_Acl_ExtensionSelectorService',
            'oro_security.acl.manager' => 'getOroSecurity_Acl_ManagerService',
            'oro_security.acl.object_id_accessor' => 'getOroSecurity_Acl_ObjectIdAccessorService',
            'oro_security.acl.object_identity_factory' => 'getOroSecurity_Acl_ObjectIdentityFactoryService',
            'oro_security.acl.permission_granting_strategy' => 'getOroSecurity_Acl_PermissionGrantingStrategyService',
            'oro_security.acl.sid_manager' => 'getOroSecurity_Acl_SidManagerService',
            'oro_security.acl.voter_link' => 'getOroSecurity_Acl_VoterLinkService',
            'oro_security.acl_helper' => 'getOroSecurity_AclHelperService',
            'oro_security.action_metadata_provider' => 'getOroSecurity_ActionMetadataProviderService',
            'oro_security.encoder.mcrypt' => 'getOroSecurity_Encoder_McryptService',
            'oro_security.entity_security_config_subscriber' => 'getOroSecurity_EntitySecurityConfigSubscriberService',
            'oro_security.entity_security_metadata_provider' => 'getOroSecurity_EntitySecurityMetadataProviderService',
            'oro_security.form.type.object_label_type' => 'getOroSecurity_Form_Type_ObjectLabelTypeService',
            'oro_security.form.type.oro_acl_access_level_selector' => 'getOroSecurity_Form_Type_OroAclAccessLevelSelectorService',
            'oro_security.link.ownership_tree_provider' => 'getOroSecurity_Link_OwnershipTreeProviderService',
            'oro_security.link.sid_manager' => 'getOroSecurity_Link_SidManagerService',
            'oro_security.listener.config_subscriber' => 'getOroSecurity_Listener_ConfigSubscriberService',
            'oro_security.listener.controller' => 'getOroSecurity_Listener_ControllerService',
            'oro_security.owner.entity_owner_accessor' => 'getOroSecurity_Owner_EntityOwnerAccessorService',
            'oro_security.owner.ownership_config_subscriber' => 'getOroSecurity_Owner_OwnershipConfigSubscriberService',
            'oro_security.owner.ownership_metadata_provider' => 'getOroSecurity_Owner_OwnershipMetadataProviderService',
            'oro_security.ownership_tree_provider' => 'getOroSecurity_OwnershipTreeProviderService',
            'oro_security.ownership_tree_subscriber' => 'getOroSecurity_OwnershipTreeSubscriberService',
            'oro_security.security_facade' => 'getOroSecurity_SecurityFacadeService',
            'oro_security.twig.security_extension' => 'getOroSecurity_Twig_SecurityExtensionService',
            'oro_translation.controller' => 'getOroTranslation_ControllerService',
            'oro_translation.extractor.php_code_extractor' => 'getOroTranslation_Extractor_PhpCodeExtractorService',
            'oro_translation.form.type.jqueryselect2_translatable_entity' => 'getOroTranslation_Form_Type_Jqueryselect2TranslatableEntityService',
            'oro_translation.form.type.translatable_entity' => 'getOroTranslation_Form_Type_TranslatableEntityService',
            'oro_ui.format_converter.date_time.jquery_ui' => 'getOroUi_FormatConverter_DateTime_JqueryUiService',
            'oro_ui.router' => 'getOroUi_RouterService',
            'oro_ui.twig.ceil_extension' => 'getOroUi_Twig_CeilExtensionService',
            'oro_ui.twig.date_extension' => 'getOroUi_Twig_DateExtensionService',
            'oro_ui.twig.form_extension' => 'getOroUi_Twig_FormExtensionService',
            'oro_ui.twig.md5_extension' => 'getOroUi_Twig_Md5ExtensionService',
            'oro_ui.twig.skype_button_extension' => 'getOroUi_Twig_SkypeButtonExtensionService',
            'oro_ui.twig.ui_extension' => 'getOroUi_Twig_UiExtensionService',
            'oro_ui.twig.widget_extension' => 'getOroUi_Twig_WidgetExtensionService',
            'oro_ui.view.listener' => 'getOroUi_View_ListenerService',
            'oro_user.autocomplete.user.search_handler' => 'getOroUser_Autocomplete_User_SearchHandlerService',
            'oro_user.cache' => 'getOroUser_CacheService',
            'oro_user.change_password.subscriber' => 'getOroUser_ChangePassword_SubscriberService',
            'oro_user.email.owner.provider' => 'getOroUser_Email_Owner_ProviderService',
            'oro_user.entity_with_image.subscriber' => 'getOroUser_EntityWithImage_SubscriberService',
            'oro_user.event_listener.group_users_grid_listener' => 'getOroUser_EventListener_GroupUsersGridListenerService',
            'oro_user.event_listener.role_users_grid_listener' => 'getOroUser_EventListener_RoleUsersGridListenerService',
            'oro_user.event_listener.user_email_grid_listener' => 'getOroUser_EventListener_UserEmailGridListenerService',
            'oro_user.form.group' => 'getOroUser_Form_GroupService',
            'oro_user.form.group.api' => 'getOroUser_Form_Group_ApiService',
            'oro_user.form.handler.acl_role' => 'getOroUser_Form_Handler_AclRoleService',
            'oro_user.form.handler.group' => 'getOroUser_Form_Handler_GroupService',
            'oro_user.form.handler.group.api' => 'getOroUser_Form_Handler_Group_ApiService',
            'oro_user.form.handler.reset' => 'getOroUser_Form_Handler_ResetService',
            'oro_user.form.handler.role.api' => 'getOroUser_Form_Handler_Role_ApiService',
            'oro_user.form.handler.status' => 'getOroUser_Form_Handler_StatusService',
            'oro_user.form.handler.user' => 'getOroUser_Form_Handler_UserService',
            'oro_user.form.handler.user.api' => 'getOroUser_Form_Handler_User_ApiService',
            'oro_user.form.reset' => 'getOroUser_Form_ResetService',
            'oro_user.form.role' => 'getOroUser_Form_RoleService',
            'oro_user.form.role.api' => 'getOroUser_Form_Role_ApiService',
            'oro_user.form.status' => 'getOroUser_Form_StatusService',
            'oro_user.form.type.change_password' => 'getOroUser_Form_Type_ChangePasswordService',
            'oro_user.form.type.email' => 'getOroUser_Form_Type_EmailService',
            'oro_user.form.type.gender' => 'getOroUser_Form_Type_GenderService',
            'oro_user.form.type.group' => 'getOroUser_Form_Type_GroupService',
            'oro_user.form.type.group.api' => 'getOroUser_Form_Type_Group_ApiService',
            'oro_user.form.type.reset' => 'getOroUser_Form_Type_ResetService',
            'oro_user.form.type.role.api' => 'getOroUser_Form_Type_Role_ApiService',
            'oro_user.form.type.status' => 'getOroUser_Form_Type_StatusService',
            'oro_user.form.type.user' => 'getOroUser_Form_Type_UserService',
            'oro_user.form.type.user.api' => 'getOroUser_Form_Type_User_ApiService',
            'oro_user.form.type.user_multiselect' => 'getOroUser_Form_Type_UserMultiselectService',
            'oro_user.form.type.user_select' => 'getOroUser_Form_Type_UserSelectService',
            'oro_user.form.user' => 'getOroUser_Form_UserService',
            'oro_user.form.user.api' => 'getOroUser_Form_User_ApiService',
            'oro_user.gender_provider' => 'getOroUser_GenderProviderService',
            'oro_user.group_manager' => 'getOroUser_GroupManagerService',
            'oro_user.group_manager.api' => 'getOroUser_GroupManager_ApiService',
            'oro_user.importexport.user_normalizer' => 'getOroUser_Importexport_UserNormalizerService',
            'oro_user.manager' => 'getOroUser_ManagerService',
            'oro_user.manager.api' => 'getOroUser_Manager_ApiService',
            'oro_user.role.listener' => 'getOroUser_Role_ListenerService',
            'oro_user.role_manager' => 'getOroUser_RoleManagerService',
            'oro_user.role_manager.api' => 'getOroUser_RoleManager_ApiService',
            'oro_user.security.login' => 'getOroUser_Security_LoginService',
            'oro_user.security.provider' => 'getOroUser_Security_ProviderService',
            'oro_user.status_manager' => 'getOroUser_StatusManagerService',
            'oro_user.twig.user_extension' => 'getOroUser_Twig_UserExtensionService',
            'oro_user.user_menu' => 'getOroUser_UserMenuService',
            'oro_windows.twig.extension' => 'getOroWindows_Twig_ExtensionService',
            'pim_archivist_filesystem' => 'getPimArchivistFilesystemService',
            'pim_base_connector.archiver.archivable_file_writer_archiver' => 'getPimBaseConnector_Archiver_ArchivableFileWriterArchiverService',
            'pim_base_connector.archiver.file_reader_archiver' => 'getPimBaseConnector_Archiver_FileReaderArchiverService',
            'pim_base_connector.archiver.file_writer_archiver' => 'getPimBaseConnector_Archiver_FileWriterArchiverService',
            'pim_base_connector.archiver.invalid_item_csv_archiver' => 'getPimBaseConnector_Archiver_InvalidItemCsvArchiverService',
            'pim_base_connector.archiver.invalid_item_csv_writer' => 'getPimBaseConnector_Archiver_InvalidItemCsvWriterService',
            'pim_base_connector.event_listener.archivist' => 'getPimBaseConnector_EventListener_ArchivistService',
            'pim_base_connector.event_listener.invalid_items_collector' => 'getPimBaseConnector_EventListener_InvalidItemsCollectorService',
            'pim_base_connector.factory.zip_filesystem' => 'getPimBaseConnector_Factory_ZipFilesystemService',
            'pim_base_connector.processor.association' => 'getPimBaseConnector_Processor_AssociationService',
            'pim_base_connector.processor.association_type' => 'getPimBaseConnector_Processor_AssociationTypeService',
            'pim_base_connector.processor.attribute' => 'getPimBaseConnector_Processor_AttributeService',
            'pim_base_connector.processor.attribute_group' => 'getPimBaseConnector_Processor_AttributeGroupService',
            'pim_base_connector.processor.attribute_option' => 'getPimBaseConnector_Processor_AttributeOptionService',
            'pim_base_connector.processor.category' => 'getPimBaseConnector_Processor_CategoryService',
            'pim_base_connector.processor.channel' => 'getPimBaseConnector_Processor_ChannelService',
            'pim_base_connector.processor.csv_serializer.heterogeneous' => 'getPimBaseConnector_Processor_CsvSerializer_HeterogeneousService',
            'pim_base_connector.processor.csv_serializer.homogeneous' => 'getPimBaseConnector_Processor_CsvSerializer_HomogeneousService',
            'pim_base_connector.processor.csv_serializer.product' => 'getPimBaseConnector_Processor_CsvSerializer_ProductService',
            'pim_base_connector.processor.denormalization.csv_group' => 'getPimBaseConnector_Processor_Denormalization_CsvGroupService',
            'pim_base_connector.processor.denormalization.csv_variant_group' => 'getPimBaseConnector_Processor_Denormalization_CsvVariantGroupService',
            'pim_base_connector.processor.dummy' => 'getPimBaseConnector_Processor_DummyService',
            'pim_base_connector.processor.family' => 'getPimBaseConnector_Processor_FamilyService',
            'pim_base_connector.processor.group' => 'getPimBaseConnector_Processor_GroupService',
            'pim_base_connector.processor.group_type' => 'getPimBaseConnector_Processor_GroupTypeService',
            'pim_base_connector.processor.job_instance' => 'getPimBaseConnector_Processor_JobInstanceService',
            'pim_base_connector.processor.normalization.csv_group' => 'getPimBaseConnector_Processor_Normalization_CsvGroupService',
            'pim_base_connector.processor.normalization.csv_variant_group' => 'getPimBaseConnector_Processor_Normalization_CsvVariantGroupService',
            'pim_base_connector.processor.product' => 'getPimBaseConnector_Processor_ProductService',
            'pim_base_connector.processor.product_to_flat_array' => 'getPimBaseConnector_Processor_ProductToFlatArrayService',
            'pim_base_connector.reader.cached_association' => 'getPimBaseConnector_Reader_CachedAssociationService',
            'pim_base_connector.reader.doctrine.bulk_product' => 'getPimBaseConnector_Reader_Doctrine_BulkProductService',
            'pim_base_connector.reader.doctrine.product' => 'getPimBaseConnector_Reader_Doctrine_ProductService',
            'pim_base_connector.reader.dummy' => 'getPimBaseConnector_Reader_DummyService',
            'pim_base_connector.reader.file.csv' => 'getPimBaseConnector_Reader_File_CsvService',
            'pim_base_connector.reader.file.csv_association_type' => 'getPimBaseConnector_Reader_File_CsvAssociationTypeService',
            'pim_base_connector.reader.file.csv_attribute' => 'getPimBaseConnector_Reader_File_CsvAttributeService',
            'pim_base_connector.reader.file.csv_attribute_option' => 'getPimBaseConnector_Reader_File_CsvAttributeOptionService',
            'pim_base_connector.reader.file.csv_category' => 'getPimBaseConnector_Reader_File_CsvCategoryService',
            'pim_base_connector.reader.file.csv_group' => 'getPimBaseConnector_Reader_File_CsvGroupService',
            'pim_base_connector.reader.file.csv_product' => 'getPimBaseConnector_Reader_File_CsvProductService',
            'pim_base_connector.reader.file.yaml' => 'getPimBaseConnector_Reader_File_YamlService',
            'pim_base_connector.reader.file.yaml_associations' => 'getPimBaseConnector_Reader_File_YamlAssociationsService',
            'pim_base_connector.reader.file.yaml_multiple' => 'getPimBaseConnector_Reader_File_YamlMultipleService',
            'pim_base_connector.reader.file.yaml_product' => 'getPimBaseConnector_Reader_File_YamlProductService',
            'pim_base_connector.reader.orm.association_type' => 'getPimBaseConnector_Reader_Orm_AssociationTypeService',
            'pim_base_connector.reader.orm.attribute' => 'getPimBaseConnector_Reader_Orm_AttributeService',
            'pim_base_connector.reader.orm.attribute_option' => 'getPimBaseConnector_Reader_Orm_AttributeOptionService',
            'pim_base_connector.reader.orm.category' => 'getPimBaseConnector_Reader_Orm_CategoryService',
            'pim_base_connector.reader.repository.group' => 'getPimBaseConnector_Reader_Repository_GroupService',
            'pim_base_connector.reader.repository.variant_group' => 'getPimBaseConnector_Reader_Repository_VariantGroupService',
            'pim_base_connector.validator.constraints.channel_validator' => 'getPimBaseConnector_Validator_Constraints_ChannelValidatorService',
            'pim_base_connector.validator.import' => 'getPimBaseConnector_Validator_ImportService',
            'pim_base_connector.validator.product_import' => 'getPimBaseConnector_Validator_ProductImportService',
            'pim_base_connector.validator.skip_import' => 'getPimBaseConnector_Validator_SkipImportService',
            'pim_base_connector.validator.step.charset_validator' => 'getPimBaseConnector_Validator_Step_CharsetValidatorService',
            'pim_base_connector.writer.doctrine' => 'getPimBaseConnector_Writer_DoctrineService',
            'pim_base_connector.writer.doctrine.product' => 'getPimBaseConnector_Writer_Doctrine_ProductService',
            'pim_base_connector.writer.doctrine.product_association' => 'getPimBaseConnector_Writer_Doctrine_ProductAssociationService',
            'pim_base_connector.writer.doctrine.variant_group' => 'getPimBaseConnector_Writer_Doctrine_VariantGroupService',
            'pim_base_connector.writer.dummy' => 'getPimBaseConnector_Writer_DummyService',
            'pim_base_connector.writer.file' => 'getPimBaseConnector_Writer_FileService',
            'pim_base_connector.writer.file.csv' => 'getPimBaseConnector_Writer_File_CsvService',
            'pim_base_connector.writer.file.csv_product' => 'getPimBaseConnector_Writer_File_CsvProductService',
            'pim_base_connector.writer.file.csv_variant_group' => 'getPimBaseConnector_Writer_File_CsvVariantGroupService',
            'pim_base_connector.writer.product_file' => 'getPimBaseConnector_Writer_ProductFileService',
            'pim_catalog.applier.product_template' => 'getPimCatalog_Applier_ProductTemplateService',
            'pim_catalog.attributetype.boolean' => 'getPimCatalog_Attributetype_BooleanService',
            'pim_catalog.attributetype.date' => 'getPimCatalog_Attributetype_DateService',
            'pim_catalog.attributetype.file' => 'getPimCatalog_Attributetype_FileService',
            'pim_catalog.attributetype.identifier' => 'getPimCatalog_Attributetype_IdentifierService',
            'pim_catalog.attributetype.image' => 'getPimCatalog_Attributetype_ImageService',
            'pim_catalog.attributetype.metric' => 'getPimCatalog_Attributetype_MetricService',
            'pim_catalog.attributetype.multiselect' => 'getPimCatalog_Attributetype_MultiselectService',
            'pim_catalog.attributetype.number' => 'getPimCatalog_Attributetype_NumberService',
            'pim_catalog.attributetype.pricecollection' => 'getPimCatalog_Attributetype_PricecollectionService',
            'pim_catalog.attributetype.simpleselect' => 'getPimCatalog_Attributetype_SimpleselectService',
            'pim_catalog.attributetype.text' => 'getPimCatalog_Attributetype_TextService',
            'pim_catalog.attributetype.textarea' => 'getPimCatalog_Attributetype_TextareaService',
            'pim_catalog.builder.product' => 'getPimCatalog_Builder_ProductService',
            'pim_catalog.builder.product_template' => 'getPimCatalog_Builder_ProductTemplateService',
            'pim_catalog.context.catalog' => 'getPimCatalog_Context_CatalogService',
            'pim_catalog.doctrine.completeness_generator' => 'getPimCatalog_Doctrine_CompletenessGeneratorService',
            'pim_catalog.doctrine.product_query_builder' => 'getPimCatalog_Doctrine_ProductQueryBuilderService',
            'pim_catalog.doctrine.query.filter.boolean' => 'getPimCatalog_Doctrine_Query_Filter_BooleanService',
            'pim_catalog.doctrine.query.filter.category' => 'getPimCatalog_Doctrine_Query_Filter_CategoryService',
            'pim_catalog.doctrine.query.filter.completeness' => 'getPimCatalog_Doctrine_Query_Filter_CompletenessService',
            'pim_catalog.doctrine.query.filter.date' => 'getPimCatalog_Doctrine_Query_Filter_DateService',
            'pim_catalog.doctrine.query.filter.family' => 'getPimCatalog_Doctrine_Query_Filter_FamilyService',
            'pim_catalog.doctrine.query.filter.groups' => 'getPimCatalog_Doctrine_Query_Filter_GroupsService',
            'pim_catalog.doctrine.query.filter.identifier' => 'getPimCatalog_Doctrine_Query_Filter_IdentifierService',
            'pim_catalog.doctrine.query.filter.media' => 'getPimCatalog_Doctrine_Query_Filter_MediaService',
            'pim_catalog.doctrine.query.filter.metric' => 'getPimCatalog_Doctrine_Query_Filter_MetricService',
            'pim_catalog.doctrine.query.filter.number' => 'getPimCatalog_Doctrine_Query_Filter_NumberService',
            'pim_catalog.doctrine.query.filter.object_id_resolver' => 'getPimCatalog_Doctrine_Query_Filter_ObjectIdResolverService',
            'pim_catalog.doctrine.query.filter.option' => 'getPimCatalog_Doctrine_Query_Filter_OptionService',
            'pim_catalog.doctrine.query.filter.options' => 'getPimCatalog_Doctrine_Query_Filter_OptionsService',
            'pim_catalog.doctrine.query.filter.price' => 'getPimCatalog_Doctrine_Query_Filter_PriceService',
            'pim_catalog.doctrine.query.filter.product_id' => 'getPimCatalog_Doctrine_Query_Filter_ProductIdService',
            'pim_catalog.doctrine.query.filter.string' => 'getPimCatalog_Doctrine_Query_Filter_StringService',
            'pim_catalog.doctrine.query.sorter.base' => 'getPimCatalog_Doctrine_Query_Sorter_BaseService',
            'pim_catalog.doctrine.query.sorter.completeness' => 'getPimCatalog_Doctrine_Query_Sorter_CompletenessService',
            'pim_catalog.doctrine.query.sorter.entity' => 'getPimCatalog_Doctrine_Query_Sorter_EntityService',
            'pim_catalog.doctrine.query.sorter.family' => 'getPimCatalog_Doctrine_Query_Sorter_FamilyService',
            'pim_catalog.doctrine.query.sorter.in_group' => 'getPimCatalog_Doctrine_Query_Sorter_InGroupService',
            'pim_catalog.doctrine.query.sorter.is_associated' => 'getPimCatalog_Doctrine_Query_Sorter_IsAssociatedService',
            'pim_catalog.event_subscriber.category.check_channels' => 'getPimCatalog_EventSubscriber_Category_CheckChannelsService',
            'pim_catalog.event_subscriber.create_attribute_requirement' => 'getPimCatalog_EventSubscriber_CreateAttributeRequirementService',
            'pim_catalog.event_subscriber.initialize_values' => 'getPimCatalog_EventSubscriber_InitializeValuesService',
            'pim_catalog.event_subscriber.localizable' => 'getPimCatalog_EventSubscriber_LocalizableService',
            'pim_catalog.event_subscriber.metric_base_values' => 'getPimCatalog_EventSubscriber_MetricBaseValuesService',
            'pim_catalog.event_subscriber.orm.inject_product_reference' => 'getPimCatalog_EventSubscriber_Orm_InjectProductReferenceService',
            'pim_catalog.event_subscriber.outdate_indexed_values' => 'getPimCatalog_EventSubscriber_OutdateIndexedValuesService',
            'pim_catalog.event_subscriber.resolve_target_repository' => 'getPimCatalog_EventSubscriber_ResolveTargetRepositoryService',
            'pim_catalog.event_subscriber.scopable' => 'getPimCatalog_EventSubscriber_ScopableService',
            'pim_catalog.event_subscriber.timestampable' => 'getPimCatalog_EventSubscriber_TimestampableService',
            'pim_catalog.factory.attribute_requirement' => 'getPimCatalog_Factory_AttributeRequirementService',
            'pim_catalog.factory.family' => 'getPimCatalog_Factory_FamilyService',
            'pim_catalog.factory.group' => 'getPimCatalog_Factory_GroupService',
            'pim_catalog.factory.media' => 'getPimCatalog_Factory_MediaService',
            'pim_catalog.factory.metric' => 'getPimCatalog_Factory_MetricService',
            'pim_catalog.factory.product_cursor' => 'getPimCatalog_Factory_ProductCursorService',
            'pim_catalog.helper.locale' => 'getPimCatalog_Helper_LocaleService',
            'pim_catalog.manager.association' => 'getPimCatalog_Manager_AssociationService',
            'pim_catalog.manager.association_type' => 'getPimCatalog_Manager_AssociationTypeService',
            'pim_catalog.manager.attribute' => 'getPimCatalog_Manager_AttributeService',
            'pim_catalog.manager.attribute_group' => 'getPimCatalog_Manager_AttributeGroupService',
            'pim_catalog.manager.attribute_option' => 'getPimCatalog_Manager_AttributeOptionService',
            'pim_catalog.manager.category' => 'getPimCatalog_Manager_CategoryService',
            'pim_catalog.manager.channel' => 'getPimCatalog_Manager_ChannelService',
            'pim_catalog.manager.completeness' => 'getPimCatalog_Manager_CompletenessService',
            'pim_catalog.manager.currency' => 'getPimCatalog_Manager_CurrencyService',
            'pim_catalog.manager.family' => 'getPimCatalog_Manager_FamilyService',
            'pim_catalog.manager.group' => 'getPimCatalog_Manager_GroupService',
            'pim_catalog.manager.locale' => 'getPimCatalog_Manager_LocaleService',
            'pim_catalog.manager.media' => 'getPimCatalog_Manager_MediaService',
            'pim_catalog.manager.product' => 'getPimCatalog_Manager_ProductService',
            'pim_catalog.manager.product_category' => 'getPimCatalog_Manager_ProductCategoryService',
            'pim_catalog.manager.product_mass_action' => 'getPimCatalog_Manager_ProductMassActionService',
            'pim_catalog.manager.product_template_media' => 'getPimCatalog_Manager_ProductTemplateMediaService',
            'pim_catalog.query.filter.attribute_dumper' => 'getPimCatalog_Query_Filter_AttributeDumperService',
            'pim_catalog.query.filter.field_dumper' => 'getPimCatalog_Query_Filter_FieldDumperService',
            'pim_catalog.query.filter.registry' => 'getPimCatalog_Query_Filter_RegistryService',
            'pim_catalog.query.product_query_builder_factory' => 'getPimCatalog_Query_ProductQueryBuilderFactoryService',
            'pim_catalog.query.sorter.registry' => 'getPimCatalog_Query_Sorter_RegistryService',
            'pim_catalog.registry.attribute_type' => 'getPimCatalog_Registry_AttributeTypeService',
            'pim_catalog.remover.association_type' => 'getPimCatalog_Remover_AssociationTypeService',
            'pim_catalog.remover.attribute' => 'getPimCatalog_Remover_AttributeService',
            'pim_catalog.remover.attribute_group' => 'getPimCatalog_Remover_AttributeGroupService',
            'pim_catalog.remover.attribute_option' => 'getPimCatalog_Remover_AttributeOptionService',
            'pim_catalog.remover.base_options_resolver' => 'getPimCatalog_Remover_BaseOptionsResolverService',
            'pim_catalog.remover.category' => 'getPimCatalog_Remover_CategoryService',
            'pim_catalog.remover.channel' => 'getPimCatalog_Remover_ChannelService',
            'pim_catalog.remover.family' => 'getPimCatalog_Remover_FamilyService',
            'pim_catalog.remover.group' => 'getPimCatalog_Remover_GroupService',
            'pim_catalog.remover.group_type' => 'getPimCatalog_Remover_GroupTypeService',
            'pim_catalog.remover.product' => 'getPimCatalog_Remover_ProductService',
            'pim_catalog.repository.association' => 'getPimCatalog_Repository_AssociationService',
            'pim_catalog.repository.association_type' => 'getPimCatalog_Repository_AssociationTypeService',
            'pim_catalog.repository.attribute' => 'getPimCatalog_Repository_AttributeService',
            'pim_catalog.repository.attribute_group' => 'getPimCatalog_Repository_AttributeGroupService',
            'pim_catalog.repository.attribute_option' => 'getPimCatalog_Repository_AttributeOptionService',
            'pim_catalog.repository.attribute_requirement' => 'getPimCatalog_Repository_AttributeRequirementService',
            'pim_catalog.repository.category' => 'getPimCatalog_Repository_CategoryService',
            'pim_catalog.repository.channel' => 'getPimCatalog_Repository_ChannelService',
            'pim_catalog.repository.completeness' => 'getPimCatalog_Repository_CompletenessService',
            'pim_catalog.repository.currency' => 'getPimCatalog_Repository_CurrencyService',
            'pim_catalog.repository.family' => 'getPimCatalog_Repository_FamilyService',
            'pim_catalog.repository.group' => 'getPimCatalog_Repository_GroupService',
            'pim_catalog.repository.group_type' => 'getPimCatalog_Repository_GroupTypeService',
            'pim_catalog.repository.locale' => 'getPimCatalog_Repository_LocaleService',
            'pim_catalog.repository.product' => 'getPimCatalog_Repository_ProductService',
            'pim_catalog.repository.product_category' => 'getPimCatalog_Repository_ProductCategoryService',
            'pim_catalog.repository.product_mass_action' => 'getPimCatalog_Repository_ProductMassActionService',
            'pim_catalog.repository.product_template' => 'getPimCatalog_Repository_ProductTemplateService',
            'pim_catalog.repository.product_value' => 'getPimCatalog_Repository_ProductValueService',
            'pim_catalog.resolver.variant_group_attributes' => 'getPimCatalog_Resolver_VariantGroupAttributesService',
            'pim_catalog.saver.association_type' => 'getPimCatalog_Saver_AssociationTypeService',
            'pim_catalog.saver.attribute' => 'getPimCatalog_Saver_AttributeService',
            'pim_catalog.saver.attribute_group' => 'getPimCatalog_Saver_AttributeGroupService',
            'pim_catalog.saver.attribute_option' => 'getPimCatalog_Saver_AttributeOptionService',
            'pim_catalog.saver.base_options_resolver' => 'getPimCatalog_Saver_BaseOptionsResolverService',
            'pim_catalog.saver.category' => 'getPimCatalog_Saver_CategoryService',
            'pim_catalog.saver.channel' => 'getPimCatalog_Saver_ChannelService',
            'pim_catalog.saver.completeness_options_resolver' => 'getPimCatalog_Saver_CompletenessOptionsResolverService',
            'pim_catalog.saver.currency' => 'getPimCatalog_Saver_CurrencyService',
            'pim_catalog.saver.family' => 'getPimCatalog_Saver_FamilyService',
            'pim_catalog.saver.group' => 'getPimCatalog_Saver_GroupService',
            'pim_catalog.saver.group_options_resolver' => 'getPimCatalog_Saver_GroupOptionsResolverService',
            'pim_catalog.saver.group_type' => 'getPimCatalog_Saver_GroupTypeService',
            'pim_catalog.saver.product' => 'getPimCatalog_Saver_ProductService',
            'pim_catalog.saver.product_options_resolver' => 'getPimCatalog_Saver_ProductOptionsResolverService',
            'pim_catalog.updater.copier.registry' => 'getPimCatalog_Updater_Copier_RegistryService',
            'pim_catalog.updater.product' => 'getPimCatalog_Updater_ProductService',
            'pim_catalog.updater.product_template' => 'getPimCatalog_Updater_ProductTemplateService',
            'pim_catalog.updater.setter.registry' => 'getPimCatalog_Updater_Setter_RegistryService',
            'pim_catalog.validator.constraint.has_variant_axes' => 'getPimCatalog_Validator_Constraint_HasVariantAxesService',
            'pim_catalog.validator.constraint.immutable' => 'getPimCatalog_Validator_Constraint_ImmutableService',
            'pim_catalog.validator.constraint.single_identifier' => 'getPimCatalog_Validator_Constraint_SingleIdentifierService',
            'pim_catalog.validator.constraint.unique_value' => 'getPimCatalog_Validator_Constraint_UniqueValueService',
            'pim_catalog.validator.constraint.unique_variant_axis' => 'getPimCatalog_Validator_Constraint_UniqueVariantAxisService',
            'pim_catalog.validator.constraint.unique_variant_group' => 'getPimCatalog_Validator_Constraint_UniqueVariantGroupService',
            'pim_catalog.validator.constraint.valid_metric' => 'getPimCatalog_Validator_Constraint_ValidMetricService',
            'pim_catalog.validator.constraint.variant_group_axis' => 'getPimCatalog_Validator_Constraint_VariantGroupAxisService',
            'pim_catalog.validator.constraint.variant_group_values' => 'getPimCatalog_Validator_Constraint_VariantGroupValuesService',
            'pim_catalog.validator.constraint_guesser.chained_attribute' => 'getPimCatalog_Validator_ConstraintGuesser_ChainedAttributeService',
            'pim_catalog.validator.helper.attribute' => 'getPimCatalog_Validator_Helper_AttributeService',
            'pim_comment.builder.comment' => 'getPimComment_Builder_CommentService',
            'pim_comment.controller.comment' => 'getPimComment_Controller_CommentService',
            'pim_comment.form.attribute_group' => 'getPimComment_Form_AttributeGroupService',
            'pim_comment.form.type.comment' => 'getPimComment_Form_Type_CommentService',
            'pim_comment.manager.comment' => 'getPimComment_Manager_CommentService',
            'pim_comment.repository.comment' => 'getPimComment_Repository_CommentService',
            'pim_comment.view_element.product.tab.comment' => 'getPimComment_ViewElement_Product_Tab_CommentService',
            'pim_dashboard.controller.widget' => 'getPimDashboard_Controller_WidgetService',
            'pim_dashboard.widget.completeness' => 'getPimDashboard_Widget_CompletenessService',
            'pim_dashboard.widget.last_operations' => 'getPimDashboard_Widget_LastOperationsService',
            'pim_dashboard.widget.links' => 'getPimDashboard_Widget_LinksService',
            'pim_dashboard.widget.registry' => 'getPimDashboard_Widget_RegistryService',
            'pim_datagrid.controller.datagrid' => 'getPimDatagrid_Controller_DatagridService',
            'pim_datagrid.controller.datagrid_view' => 'getPimDatagrid_Controller_DatagridViewService',
            'pim_datagrid.controller.export' => 'getPimDatagrid_Controller_ExportService',
            'pim_datagrid.controller.mass_action' => 'getPimDatagrid_Controller_MassActionService',
            'pim_datagrid.controller.product_export' => 'getPimDatagrid_Controller_ProductExportService',
            'pim_datagrid.datagrid.product.columns_configurator' => 'getPimDatagrid_Datagrid_Product_ColumnsConfiguratorService',
            'pim_datagrid.datagrid.product.configuration_registry' => 'getPimDatagrid_Datagrid_Product_ConfigurationRegistryService',
            'pim_datagrid.datagrid.product.context_configurator' => 'getPimDatagrid_Datagrid_Product_ContextConfiguratorService',
            'pim_datagrid.datagrid.product.filters_configurator' => 'getPimDatagrid_Datagrid_Product_FiltersConfiguratorService',
            'pim_datagrid.datagrid.product.group_columns_configurator' => 'getPimDatagrid_Datagrid_Product_GroupColumnsConfiguratorService',
            'pim_datagrid.datagrid.product.sorters_configurator' => 'getPimDatagrid_Datagrid_Product_SortersConfiguratorService',
            'pim_datagrid.datagrid.request_parameters_extractor' => 'getPimDatagrid_Datagrid_RequestParametersExtractorService',
            'pim_datagrid.datasource.adapter_resolver' => 'getPimDatagrid_Datasource_AdapterResolverService',
            'pim_datagrid.datasource.associated_product' => 'getPimDatagrid_Datasource_AssociatedProductService',
            'pim_datagrid.datasource.default' => 'getPimDatagrid_Datasource_DefaultService',
            'pim_datagrid.datasource.product' => 'getPimDatagrid_Datasource_ProductService',
            'pim_datagrid.datasource.result_record.hydrator.associated_product' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_AssociatedProductService',
            'pim_datagrid.datasource.result_record.hydrator.default' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_DefaultService',
            'pim_datagrid.datasource.result_record.hydrator.object' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_ObjectService',
            'pim_datagrid.datasource.result_record.hydrator.object_id' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_ObjectIdService',
            'pim_datagrid.datasource.result_record.hydrator.orm.object' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_Orm_ObjectService',
            'pim_datagrid.datasource.result_record.hydrator.product' => 'getPimDatagrid_Datasource_ResultRecord_Hydrator_ProductService',
            'pim_datagrid.datasource.smart' => 'getPimDatagrid_Datasource_SmartService',
            'pim_datagrid.datasource.support_resolver' => 'getPimDatagrid_Datasource_SupportResolverService',
            'pim_datagrid.event_listener.configure_sorters_listener' => 'getPimDatagrid_EventListener_ConfigureSortersListenerService',
            'pim_datagrid.extension.action.type.tab_redirect' => 'getPimDatagrid_Extension_Action_Type_TabRedirectService',
            'pim_datagrid.extension.filter' => 'getPimDatagrid_Extension_FilterService',
            'pim_datagrid.extension.formatter.property.job.name_property' => 'getPimDatagrid_Extension_Formatter_Property_Job_NamePropertyService',
            'pim_datagrid.extension.formatter.property.product.groups_property' => 'getPimDatagrid_Extension_Formatter_Property_Product_GroupsPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.attribute_option_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_AttributeOptionPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.attribute_options_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_AttributeOptionsPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.boolean_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_BooleanPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.date_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_DatePropertyService',
            'pim_datagrid.extension.formatter.property.product_value.field_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_FieldPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.file_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_FilePropertyService',
            'pim_datagrid.extension.formatter.property.product_value.image_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_ImagePropertyService',
            'pim_datagrid.extension.formatter.property.product_value.metric_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_MetricPropertyService',
            'pim_datagrid.extension.formatter.property.product_value.price_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_PricePropertyService',
            'pim_datagrid.extension.formatter.property.product_value.twig_property' => 'getPimDatagrid_Extension_Formatter_Property_ProductValue_TwigPropertyService',
            'pim_datagrid.extension.mass_action.dispatcher' => 'getPimDatagrid_Extension_MassAction_DispatcherService',
            'pim_datagrid.extension.mass_action.handler.delete' => 'getPimDatagrid_Extension_MassAction_Handler_DeleteService',
            'pim_datagrid.extension.mass_action.handler.edit' => 'getPimDatagrid_Extension_MassAction_Handler_EditService',
            'pim_datagrid.extension.mass_action.handler.export' => 'getPimDatagrid_Extension_MassAction_Handler_ExportService',
            'pim_datagrid.extension.mass_action.handler.product_delete' => 'getPimDatagrid_Extension_MassAction_Handler_ProductDeleteService',
            'pim_datagrid.extension.mass_action.handler.product_edit' => 'getPimDatagrid_Extension_MassAction_Handler_ProductEditService',
            'pim_datagrid.extension.mass_action.handler.product_export' => 'getPimDatagrid_Extension_MassAction_Handler_ProductExportService',
            'pim_datagrid.extension.mass_action.handler.registry' => 'getPimDatagrid_Extension_MassAction_Handler_RegistryService',
            'pim_datagrid.extension.mass_action.handler.sequential_edit' => 'getPimDatagrid_Extension_MassAction_Handler_SequentialEditService',
            'pim_datagrid.extension.mass_action.type.delete' => 'getPimDatagrid_Extension_MassAction_Type_DeleteService',
            'pim_datagrid.extension.mass_action.type.edit' => 'getPimDatagrid_Extension_MassAction_Type_EditService',
            'pim_datagrid.extension.mass_action.type.export' => 'getPimDatagrid_Extension_MassAction_Type_ExportService',
            'pim_datagrid.extension.mass_action.util.product_fields_builder' => 'getPimDatagrid_Extension_MassAction_Util_ProductFieldsBuilderService',
            'pim_datagrid.extension.pager' => 'getPimDatagrid_Extension_PagerService',
            'pim_datagrid.extension.pager.orm.pager' => 'getPimDatagrid_Extension_Pager_Orm_PagerService',
            'pim_datagrid.extension.pager.pager_resolver' => 'getPimDatagrid_Extension_Pager_PagerResolverService',
            'pim_datagrid.extension.selector.orm.product.completeness_selector' => 'getPimDatagrid_Extension_Selector_Orm_Product_CompletenessSelectorService',
            'pim_datagrid.extension.selector.orm.product.family_selector' => 'getPimDatagrid_Extension_Selector_Orm_Product_FamilySelectorService',
            'pim_datagrid.extension.selector.orm.product.groups_selector' => 'getPimDatagrid_Extension_Selector_Orm_Product_GroupsSelectorService',
            'pim_datagrid.extension.selector.orm.product.in_group_selector' => 'getPimDatagrid_Extension_Selector_Orm_Product_InGroupSelectorService',
            'pim_datagrid.extension.selector.orm.product.label_selector' => 'getPimDatagrid_Extension_Selector_Orm_Product_LabelSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.base_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_BaseSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.media_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_MediaSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.metric_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_MetricSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.option_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_OptionSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.options_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_OptionsSelectorService',
            'pim_datagrid.extension.selector.orm.product_value.prices_selector' => 'getPimDatagrid_Extension_Selector_Orm_ProductValue_PricesSelectorService',
            'pim_datagrid.extension.selector.orm_selector' => 'getPimDatagrid_Extension_Selector_OrmSelectorService',
            'pim_datagrid.extension.sorter' => 'getPimDatagrid_Extension_SorterService',
            'pim_datagrid.extension.sorter.orm.field_sorter' => 'getPimDatagrid_Extension_Sorter_Orm_FieldSorterService',
            'pim_datagrid.extension.sorter.product.completeness_sorter' => 'getPimDatagrid_Extension_Sorter_Product_CompletenessSorterService',
            'pim_datagrid.extension.sorter.product.family_sorter' => 'getPimDatagrid_Extension_Sorter_Product_FamilySorterService',
            'pim_datagrid.extension.sorter.product.field_sorter' => 'getPimDatagrid_Extension_Sorter_Product_FieldSorterService',
            'pim_datagrid.extension.sorter.product.in_group_sorter' => 'getPimDatagrid_Extension_Sorter_Product_InGroupSorterService',
            'pim_datagrid.extension.sorter.product.is_associated_sorter' => 'getPimDatagrid_Extension_Sorter_Product_IsAssociatedSorterService',
            'pim_datagrid.extension.sorter.product.value_sorter' => 'getPimDatagrid_Extension_Sorter_Product_ValueSorterService',
            'pim_datagrid.form.type.datagrid_view' => 'getPimDatagrid_Form_Type_DatagridViewService',
            'pim_datagrid.manager.datagrid_view' => 'getPimDatagrid_Manager_DatagridViewService',
            'pim_datagrid.repository.datagrid_view' => 'getPimDatagrid_Repository_DatagridViewService',
            'pim_enrich.controller.association' => 'getPimEnrich_Controller_AssociationService',
            'pim_enrich.controller.association_type' => 'getPimEnrich_Controller_AssociationTypeService',
            'pim_enrich.controller.attribute' => 'getPimEnrich_Controller_AttributeService',
            'pim_enrich.controller.attribute_group' => 'getPimEnrich_Controller_AttributeGroupService',
            'pim_enrich.controller.attribute_option' => 'getPimEnrich_Controller_AttributeOptionService',
            'pim_enrich.controller.category_tree' => 'getPimEnrich_Controller_CategoryTreeService',
            'pim_enrich.controller.channel' => 'getPimEnrich_Controller_ChannelService',
            'pim_enrich.controller.completeness' => 'getPimEnrich_Controller_CompletenessService',
            'pim_enrich.controller.currency' => 'getPimEnrich_Controller_CurrencyService',
            'pim_enrich.controller.family' => 'getPimEnrich_Controller_FamilyService',
            'pim_enrich.controller.group' => 'getPimEnrich_Controller_GroupService',
            'pim_enrich.controller.group_type' => 'getPimEnrich_Controller_GroupTypeService',
            'pim_enrich.controller.locale' => 'getPimEnrich_Controller_LocaleService',
            'pim_enrich.controller.mass_edit_action' => 'getPimEnrich_Controller_MassEditActionService',
            'pim_enrich.controller.media' => 'getPimEnrich_Controller_MediaService',
            'pim_enrich.controller.product' => 'getPimEnrich_Controller_ProductService',
            'pim_enrich.controller.product_attribute' => 'getPimEnrich_Controller_ProductAttributeService',
            'pim_enrich.controller.product_comment' => 'getPimEnrich_Controller_ProductCommentService',
            'pim_enrich.controller.sequential_edit' => 'getPimEnrich_Controller_SequentialEditService',
            'pim_enrich.controller.variant_group' => 'getPimEnrich_Controller_VariantGroupService',
            'pim_enrich.controller.variant_group_attribute' => 'getPimEnrich_Controller_VariantGroupAttributeService',
            'pim_enrich.event_listener.add_locale_code_to_grid' => 'getPimEnrich_EventListener_AddLocaleCodeToGridService',
            'pim_enrich.event_listener.association_group_grid_after_listener' => 'getPimEnrich_EventListener_AssociationGroupGridAfterListenerService',
            'pim_enrich.event_listener.association_product_grid_after_listener' => 'getPimEnrich_EventListener_AssociationProductGridAfterListenerService',
            'pim_enrich.event_listener.association_product_grid_before_listener' => 'getPimEnrich_EventListener_AssociationProductGridBeforeListenerService',
            'pim_enrich.event_listener.group_grid_listener' => 'getPimEnrich_EventListener_GroupGridListenerService',
            'pim_enrich.event_listener.history_grid_listener' => 'getPimEnrich_EventListener_HistoryGridListenerService',
            'pim_enrich.event_listener.product_grid_after_listener' => 'getPimEnrich_EventListener_ProductGridAfterListenerService',
            'pim_enrich.event_listener.product_grid_before_listener' => 'getPimEnrich_EventListener_ProductGridBeforeListenerService',
            'pim_enrich.event_listener.product_group_grid_after_listener' => 'getPimEnrich_EventListener_ProductGroupGridAfterListenerService',
            'pim_enrich.event_listener.product_group_grid_before_listener' => 'getPimEnrich_EventListener_ProductGroupGridBeforeListenerService',
            'pim_enrich.event_listener.product_variant_group_grid_after_listener' => 'getPimEnrich_EventListener_ProductVariantGroupGridAfterListenerService',
            'pim_enrich.event_listener.product_variant_group_grid_before_listener' => 'getPimEnrich_EventListener_ProductVariantGroupGridBeforeListenerService',
            'pim_enrich.event_listener.request' => 'getPimEnrich_EventListener_RequestService',
            'pim_enrich.event_listener.variant_group_grid_listener' => 'getPimEnrich_EventListener_VariantGroupGridListenerService',
            'pim_enrich.event_subscriber.translate_flash_messages' => 'getPimEnrich_EventSubscriber_TranslateFlashMessagesService',
            'pim_enrich.factory.sequential_edit' => 'getPimEnrich_Factory_SequentialEditService',
            'pim_enrich.form.association_type' => 'getPimEnrich_Form_AssociationTypeService',
            'pim_enrich.form.attribute' => 'getPimEnrich_Form_AttributeService',
            'pim_enrich.form.attribute_group' => 'getPimEnrich_Form_AttributeGroupService',
            'pim_enrich.form.channel' => 'getPimEnrich_Form_ChannelService',
            'pim_enrich.form.currency' => 'getPimEnrich_Form_CurrencyService',
            'pim_enrich.form.factory.product_value' => 'getPimEnrich_Form_Factory_ProductValueService',
            'pim_enrich.form.family' => 'getPimEnrich_Form_FamilyService',
            'pim_enrich.form.group' => 'getPimEnrich_Form_GroupService',
            'pim_enrich.form.group_type' => 'getPimEnrich_Form_GroupTypeService',
            'pim_enrich.form.handler.association_type' => 'getPimEnrich_Form_Handler_AssociationTypeService',
            'pim_enrich.form.handler.attribute' => 'getPimEnrich_Form_Handler_AttributeService',
            'pim_enrich.form.handler.attribute_group' => 'getPimEnrich_Form_Handler_AttributeGroupService',
            'pim_enrich.form.handler.channel' => 'getPimEnrich_Form_Handler_ChannelService',
            'pim_enrich.form.handler.family' => 'getPimEnrich_Form_Handler_FamilyService',
            'pim_enrich.form.handler.group' => 'getPimEnrich_Form_Handler_GroupService',
            'pim_enrich.form.handler.group_type' => 'getPimEnrich_Form_Handler_GroupTypeService',
            'pim_enrich.form.handler.variant_group' => 'getPimEnrich_Form_Handler_VariantGroupService',
            'pim_enrich.form.subscriber.add_value_field_subscriber' => 'getPimEnrich_Form_Subscriber_AddValueFieldSubscriberService',
            'pim_enrich.form.subscriber.add_variant_group_template' => 'getPimEnrich_Form_Subscriber_AddVariantGroupTemplateService',
            'pim_enrich.form.subscriber.attribute' => 'getPimEnrich_Form_Subscriber_AttributeService',
            'pim_enrich.form.subscriber.attribute_requirements' => 'getPimEnrich_Form_Subscriber_AttributeRequirementsService',
            'pim_enrich.form.subscriber.family_attribute_label_subscriber' => 'getPimEnrich_Form_Subscriber_FamilyAttributeLabelSubscriberService',
            'pim_enrich.form.subscriber.family_disable_fields_subscriber' => 'getPimEnrich_Form_Subscriber_FamilyDisableFieldsSubscriberService',
            'pim_enrich.form.subscriber.set_attribute_group_sort_order' => 'getPimEnrich_Form_Subscriber_SetAttributeGroupSortOrderService',
            'pim_enrich.form.subscriber.transform_product_template_values' => 'getPimEnrich_Form_Subscriber_TransformProductTemplateValuesService',
            'pim_enrich.form.type.add_to_groups' => 'getPimEnrich_Form_Type_AddToGroupsService',
            'pim_enrich.form.type.add_to_variant_group' => 'getPimEnrich_Form_Type_AddToVariantGroupService',
            'pim_enrich.form.type.association' => 'getPimEnrich_Form_Type_AssociationService',
            'pim_enrich.form.type.association_type' => 'getPimEnrich_Form_Type_AssociationTypeService',
            'pim_enrich.form.type.attribute' => 'getPimEnrich_Form_Type_AttributeService',
            'pim_enrich.form.type.attribute_group' => 'getPimEnrich_Form_Type_AttributeGroupService',
            'pim_enrich.form.type.attribute_option' => 'getPimEnrich_Form_Type_AttributeOptionService',
            'pim_enrich.form.type.attribute_option_create' => 'getPimEnrich_Form_Type_AttributeOptionCreateService',
            'pim_enrich.form.type.attribute_option_value' => 'getPimEnrich_Form_Type_AttributeOptionValueService',
            'pim_enrich.form.type.attribute_requirement' => 'getPimEnrich_Form_Type_AttributeRequirementService',
            'pim_enrich.form.type.available_attributes' => 'getPimEnrich_Form_Type_AvailableAttributesService',
            'pim_enrich.form.type.available_locales' => 'getPimEnrich_Form_Type_AvailableLocalesService',
            'pim_enrich.form.type.category' => 'getPimEnrich_Form_Type_CategoryService',
            'pim_enrich.form.type.change_family' => 'getPimEnrich_Form_Type_ChangeFamilyService',
            'pim_enrich.form.type.change_status' => 'getPimEnrich_Form_Type_ChangeStatusService',
            'pim_enrich.form.type.channel' => 'getPimEnrich_Form_Type_ChannelService',
            'pim_enrich.form.type.classify' => 'getPimEnrich_Form_Type_ClassifyService',
            'pim_enrich.form.type.conversion_units' => 'getPimEnrich_Form_Type_ConversionUnitsService',
            'pim_enrich.form.type.currency' => 'getPimEnrich_Form_Type_CurrencyService',
            'pim_enrich.form.type.edit_common_attributes' => 'getPimEnrich_Form_Type_EditCommonAttributesService',
            'pim_enrich.form.type.family' => 'getPimEnrich_Form_Type_FamilyService',
            'pim_enrich.form.type.group' => 'getPimEnrich_Form_Type_GroupService',
            'pim_enrich.form.type.group_type' => 'getPimEnrich_Form_Type_GroupTypeService',
            'pim_enrich.form.type.image' => 'getPimEnrich_Form_Type_ImageService',
            'pim_enrich.form.type.light_entity' => 'getPimEnrich_Form_Type_LightEntityService',
            'pim_enrich.form.type.localized_collection' => 'getPimEnrich_Form_Type_LocalizedCollectionService',
            'pim_enrich.form.type.media' => 'getPimEnrich_Form_Type_MediaService',
            'pim_enrich.form.type.metric' => 'getPimEnrich_Form_Type_MetricService',
            'pim_enrich.form.type.object_identifier' => 'getPimEnrich_Form_Type_ObjectIdentifierService',
            'pim_enrich.form.type.options' => 'getPimEnrich_Form_Type_OptionsService',
            'pim_enrich.form.type.price' => 'getPimEnrich_Form_Type_PriceService',
            'pim_enrich.form.type.price_collection' => 'getPimEnrich_Form_Type_PriceCollectionService',
            'pim_enrich.form.type.product' => 'getPimEnrich_Form_Type_ProductService',
            'pim_enrich.form.type.product.view' => 'getPimEnrich_Form_Type_Product_ViewService',
            'pim_enrich.form.type.product_create' => 'getPimEnrich_Form_Type_ProductCreateService',
            'pim_enrich.form.type.product_edit' => 'getPimEnrich_Form_Type_ProductEditService',
            'pim_enrich.form.type.product_template' => 'getPimEnrich_Form_Type_ProductTemplateService',
            'pim_enrich.form.type.product_value' => 'getPimEnrich_Form_Type_ProductValueService',
            'pim_enrich.form.type.scopable' => 'getPimEnrich_Form_Type_ScopableService',
            'pim_enrich.form.type.set_attribute_requirements' => 'getPimEnrich_Form_Type_SetAttributeRequirementsService',
            'pim_enrich.form.type.variant_group' => 'getPimEnrich_Form_Type_VariantGroupService',
            'pim_enrich.form.type.wysiwyg' => 'getPimEnrich_Form_Type_WysiwygService',
            'pim_enrich.form.variant_group' => 'getPimEnrich_Form_VariantGroupService',
            'pim_enrich.form.view.view_updater.registry' => 'getPimEnrich_Form_View_ViewUpdater_RegistryService',
            'pim_enrich.form.view.view_updater.variant' => 'getPimEnrich_Form_View_ViewUpdater_VariantService',
            'pim_enrich.imagine.local_dir_resolver' => 'getPimEnrich_Imagine_LocalDirResolverService',
            'pim_enrich.manager.sequential_edit' => 'getPimEnrich_Manager_SequentialEditService',
            'pim_enrich.mass_edit_action.add_to_groups' => 'getPimEnrich_MassEditAction_AddToGroupsService',
            'pim_enrich.mass_edit_action.add_to_variant_group' => 'getPimEnrich_MassEditAction_AddToVariantGroupService',
            'pim_enrich.mass_edit_action.operator.registry' => 'getPimEnrich_MassEditAction_Operator_RegistryService',
            'pim_enrich.normalizer.attribute_option' => 'getPimEnrich_Normalizer_AttributeOptionService',
            'pim_enrich.normalizer.attribute_option_value' => 'getPimEnrich_Normalizer_AttributeOptionValueService',
            'pim_enrich.normalizer.attribute_option_value_collection' => 'getPimEnrich_Normalizer_AttributeOptionValueCollectionService',
            'pim_enrich.provider.colors' => 'getPimEnrich_Provider_ColorsService',
            'pim_enrich.repository.sequential_edit' => 'getPimEnrich_Repository_SequentialEditService',
            'pim_enrich.twig.attribute_extension' => 'getPimEnrich_Twig_AttributeExtensionService',
            'pim_enrich.twig.category_extension' => 'getPimEnrich_Twig_CategoryExtensionService',
            'pim_enrich.twig.channel_extension' => 'getPimEnrich_Twig_ChannelExtensionService',
            'pim_enrich.twig.locale_extension' => 'getPimEnrich_Twig_LocaleExtensionService',
            'pim_enrich.twig.object_class_extension' => 'getPimEnrich_Twig_ObjectClassExtensionService',
            'pim_enrich.twig.version_extension' => 'getPimEnrich_Twig_VersionExtensionService',
            'pim_enrich.twig.view_element_extension' => 'getPimEnrich_Twig_ViewElementExtensionService',
            'pim_enrich.view_element.association_type.tab.history' => 'getPimEnrich_ViewElement_AssociationType_Tab_HistoryService',
            'pim_enrich.view_element.association_type.tab.property' => 'getPimEnrich_ViewElement_AssociationType_Tab_PropertyService',
            'pim_enrich.view_element.attribute.tab.history' => 'getPimEnrich_ViewElement_Attribute_Tab_HistoryService',
            'pim_enrich.view_element.attribute.tab.parameter' => 'getPimEnrich_ViewElement_Attribute_Tab_ParameterService',
            'pim_enrich.view_element.attribute.tab.value' => 'getPimEnrich_ViewElement_Attribute_Tab_ValueService',
            'pim_enrich.view_element.attribute_group.tab.attribute' => 'getPimEnrich_ViewElement_AttributeGroup_Tab_AttributeService',
            'pim_enrich.view_element.attribute_group.tab.history' => 'getPimEnrich_ViewElement_AttributeGroup_Tab_HistoryService',
            'pim_enrich.view_element.attribute_group.tab.property' => 'getPimEnrich_ViewElement_AttributeGroup_Tab_PropertyService',
            'pim_enrich.view_element.base' => 'getPimEnrich_ViewElement_BaseService',
            'pim_enrich.view_element.category.tab.history' => 'getPimEnrich_ViewElement_Category_Tab_HistoryService',
            'pim_enrich.view_element.category.tab.property' => 'getPimEnrich_ViewElement_Category_Tab_PropertyService',
            'pim_enrich.view_element.channel.tab.history' => 'getPimEnrich_ViewElement_Channel_Tab_HistoryService',
            'pim_enrich.view_element.channel.tab.property' => 'getPimEnrich_ViewElement_Channel_Tab_PropertyService',
            'pim_enrich.view_element.family.tab.attribute' => 'getPimEnrich_ViewElement_Family_Tab_AttributeService',
            'pim_enrich.view_element.family.tab.history' => 'getPimEnrich_ViewElement_Family_Tab_HistoryService',
            'pim_enrich.view_element.family.tab.property' => 'getPimEnrich_ViewElement_Family_Tab_PropertyService',
            'pim_enrich.view_element.group.tab.history' => 'getPimEnrich_ViewElement_Group_Tab_HistoryService',
            'pim_enrich.view_element.group.tab.product' => 'getPimEnrich_ViewElement_Group_Tab_ProductService',
            'pim_enrich.view_element.group.tab.property' => 'getPimEnrich_ViewElement_Group_Tab_PropertyService',
            'pim_enrich.view_element.group_type.tab.property' => 'getPimEnrich_ViewElement_GroupType_Tab_PropertyService',
            'pim_enrich.view_element.mass_edit.warning' => 'getPimEnrich_ViewElement_MassEdit_WarningService',
            'pim_enrich.view_element.product.tab.association' => 'getPimEnrich_ViewElement_Product_Tab_AssociationService',
            'pim_enrich.view_element.product.tab.attribute' => 'getPimEnrich_ViewElement_Product_Tab_AttributeService',
            'pim_enrich.view_element.product.tab.category' => 'getPimEnrich_ViewElement_Product_Tab_CategoryService',
            'pim_enrich.view_element.product.tab.completeness' => 'getPimEnrich_ViewElement_Product_Tab_CompletenessService',
            'pim_enrich.view_element.product.tab.history' => 'getPimEnrich_ViewElement_Product_Tab_HistoryService',
            'pim_enrich.view_element.registry' => 'getPimEnrich_ViewElement_RegistryService',
            'pim_enrich.view_element.variant_group.tab.attribute' => 'getPimEnrich_ViewElement_VariantGroup_Tab_AttributeService',
            'pim_enrich.view_element.variant_group.tab.history' => 'getPimEnrich_ViewElement_VariantGroup_Tab_HistoryService',
            'pim_enrich.view_element.variant_group.tab.product' => 'getPimEnrich_ViewElement_VariantGroup_Tab_ProductService',
            'pim_enrich.view_element.variant_group.tab.property' => 'getPimEnrich_ViewElement_VariantGroup_Tab_PropertyService',
            'pim_enrich.view_element.visibility_checker.acl' => 'getPimEnrich_ViewElement_VisibilityChecker_AclService',
            'pim_enrich.view_element.visibility_checker.edit_form' => 'getPimEnrich_ViewElement_VisibilityChecker_EditFormService',
            'pim_enrich.view_element.visibility_checker.non_empty_property' => 'getPimEnrich_ViewElement_VisibilityChecker_NonEmptyPropertyService',
            'pim_enrich.view_element.visibility_checker.voter' => 'getPimEnrich_ViewElement_VisibilityChecker_VoterService',
            'pim_filesystem' => 'getPimFilesystemService',
            'pim_filter.ajax_choice_filter' => 'getPimFilter_AjaxChoiceFilterService',
            'pim_filter.form.type.boolean' => 'getPimFilter_Form_Type_BooleanService',
            'pim_filter.form.type.category' => 'getPimFilter_Form_Type_CategoryService',
            'pim_filter.form.type.filter.ajax_choice' => 'getPimFilter_Form_Type_Filter_AjaxChoiceService',
            'pim_filter.form.type.filter.category' => 'getPimFilter_Form_Type_Filter_CategoryService',
            'pim_filter.form.type.filter.metric' => 'getPimFilter_Form_Type_Filter_MetricService',
            'pim_filter.form.type.filter.price' => 'getPimFilter_Form_Type_Filter_PriceService',
            'pim_filter.form.type.filter.scope' => 'getPimFilter_Form_Type_Filter_ScopeService',
            'pim_filter.product_category_filter' => 'getPimFilter_ProductCategoryFilterService',
            'pim_filter.product_completeness_filter' => 'getPimFilter_ProductCompletenessFilterService',
            'pim_filter.product_date_filter' => 'getPimFilter_ProductDateFilterService',
            'pim_filter.product_enabled_filter' => 'getPimFilter_ProductEnabledFilterService',
            'pim_filter.product_family_filter' => 'getPimFilter_ProductFamilyFilterService',
            'pim_filter.product_groups_filter' => 'getPimFilter_ProductGroupsFilterService',
            'pim_filter.product_in_group_filter' => 'getPimFilter_ProductInGroupFilterService',
            'pim_filter.product_is_associated_filter' => 'getPimFilter_ProductIsAssociatedFilterService',
            'pim_filter.product_scope_filter' => 'getPimFilter_ProductScopeFilterService',
            'pim_filter.product_utility' => 'getPimFilter_ProductUtilityService',
            'pim_filter.product_value_boolean' => 'getPimFilter_ProductValueBooleanService',
            'pim_filter.product_value_choice' => 'getPimFilter_ProductValueChoiceService',
            'pim_filter.product_value_date' => 'getPimFilter_ProductValueDateService',
            'pim_filter.product_value_datetime' => 'getPimFilter_ProductValueDatetimeService',
            'pim_filter.product_value_metric' => 'getPimFilter_ProductValueMetricService',
            'pim_filter.product_value_number' => 'getPimFilter_ProductValueNumberService',
            'pim_filter.product_value_price' => 'getPimFilter_ProductValuePriceService',
            'pim_filter.product_value_string' => 'getPimFilter_ProductValueStringService',
            'pim_import_export.controller.export_execution' => 'getPimImportExport_Controller_ExportExecutionService',
            'pim_import_export.controller.export_profile' => 'getPimImportExport_Controller_ExportProfileService',
            'pim_import_export.controller.import_execution' => 'getPimImportExport_Controller_ImportExecutionService',
            'pim_import_export.controller.import_profile' => 'getPimImportExport_Controller_ImportProfileService',
            'pim_import_export.datagrid.provider.job' => 'getPimImportExport_Datagrid_Provider_JobService',
            'pim_import_export.event_listener.inject_job_type' => 'getPimImportExport_EventListener_InjectJobTypeService',
            'pim_import_export.factory.job_instance' => 'getPimImportExport_Factory_JobInstanceService',
            'pim_import_export.form.jobinstance' => 'getPimImportExport_Form_JobinstanceService',
            'pim_import_export.form.type.job_configuration' => 'getPimImportExport_Form_Type_JobConfigurationService',
            'pim_import_export.form.type.job_instance' => 'getPimImportExport_Form_Type_JobInstanceService',
            'pim_import_export.form.type.step_configuration' => 'getPimImportExport_Form_Type_StepConfigurationService',
            'pim_import_export.form.type.step_element_configuration' => 'getPimImportExport_Form_Type_StepElementConfigurationService',
            'pim_import_export.manager.job' => 'getPimImportExport_Manager_JobService',
            'pim_import_export.manager.job_execution' => 'getPimImportExport_Manager_JobExecutionService',
            'pim_import_export.normalizer.job_execution' => 'getPimImportExport_Normalizer_JobExecutionService',
            'pim_import_export.normalizer.step_execution' => 'getPimImportExport_Normalizer_StepExecutionService',
            'pim_import_export.repository.job_execution' => 'getPimImportExport_Repository_JobExecutionService',
            'pim_import_export.repository.job_instance' => 'getPimImportExport_Repository_JobInstanceService',
            'pim_import_export.twig.normalize_configuration_extension' => 'getPimImportExport_Twig_NormalizeConfigurationExtensionService',
            'pim_import_export.validator.job_instance' => 'getPimImportExport_Validator_JobInstanceService',
            'pim_installer.fixture_loader.configuration_registry' => 'getPimInstaller_FixtureLoader_ConfigurationRegistryService',
            'pim_installer.fixture_loader.job_loader' => 'getPimInstaller_FixtureLoader_JobLoaderService',
            'pim_installer.fixture_loader.loader_factory' => 'getPimInstaller_FixtureLoader_LoaderFactoryService',
            'pim_installer.fixture_loader.multiple_loader' => 'getPimInstaller_FixtureLoader_MultipleLoaderService',
            'pim_installer.reader.file.yaml' => 'getPimInstaller_Reader_File_YamlService',
            'pim_internal_api_serializer' => 'getPimInternalApiSerializerService',
            'pim_notification.controller.notification' => 'getPimNotification_Controller_NotificationService',
            'pim_notification.event_subscriber.job_execution_notifier' => 'getPimNotification_EventSubscriber_JobExecutionNotifierService',
            'pim_notification.factory.notification' => 'getPimNotification_Factory_NotificationService',
            'pim_notification.factory.user_notification' => 'getPimNotification_Factory_UserNotificationService',
            'pim_notification.manager.notification' => 'getPimNotification_Manager_NotificationService',
            'pim_notification.repository.user_notification' => 'getPimNotification_Repository_UserNotificationService',
            'pim_notification.twig.notification_extension' => 'getPimNotification_Twig_NotificationExtensionService',
            'pim_pdf_generator.builder.dompdf' => 'getPimPdfGenerator_Builder_DompdfService',
            'pim_pdf_generator.controller.product' => 'getPimPdfGenerator_Controller_ProductService',
            'pim_pdf_generator.renderer.product_pdf' => 'getPimPdfGenerator_Renderer_ProductPdfService',
            'pim_pdf_generator.renderer.registry' => 'getPimPdfGenerator_Renderer_RegistryService',
            'pim_serializer' => 'getPimSerializerService',
            'pim_serializer.denormalizer.attribute_option' => 'getPimSerializer_Denormalizer_AttributeOptionService',
            'pim_serializer.denormalizer.attribute_options' => 'getPimSerializer_Denormalizer_AttributeOptionsService',
            'pim_serializer.denormalizer.base_value' => 'getPimSerializer_Denormalizer_BaseValueService',
            'pim_serializer.denormalizer.boolean' => 'getPimSerializer_Denormalizer_BooleanService',
            'pim_serializer.denormalizer.datetime' => 'getPimSerializer_Denormalizer_DatetimeService',
            'pim_serializer.denormalizer.flat.association' => 'getPimSerializer_Denormalizer_Flat_AssociationService',
            'pim_serializer.denormalizer.flat.attribute_option' => 'getPimSerializer_Denormalizer_Flat_AttributeOptionService',
            'pim_serializer.denormalizer.flat.attribute_options' => 'getPimSerializer_Denormalizer_Flat_AttributeOptionsService',
            'pim_serializer.denormalizer.flat.base_value' => 'getPimSerializer_Denormalizer_Flat_BaseValueService',
            'pim_serializer.denormalizer.flat.category' => 'getPimSerializer_Denormalizer_Flat_CategoryService',
            'pim_serializer.denormalizer.flat.datetime' => 'getPimSerializer_Denormalizer_Flat_DatetimeService',
            'pim_serializer.denormalizer.flat.family' => 'getPimSerializer_Denormalizer_Flat_FamilyService',
            'pim_serializer.denormalizer.flat.group' => 'getPimSerializer_Denormalizer_Flat_GroupService',
            'pim_serializer.denormalizer.flat.media' => 'getPimSerializer_Denormalizer_Flat_MediaService',
            'pim_serializer.denormalizer.flat.metric' => 'getPimSerializer_Denormalizer_Flat_MetricService',
            'pim_serializer.denormalizer.flat.prices' => 'getPimSerializer_Denormalizer_Flat_PricesService',
            'pim_serializer.denormalizer.flat.product' => 'getPimSerializer_Denormalizer_Flat_ProductService',
            'pim_serializer.denormalizer.flat.product_value' => 'getPimSerializer_Denormalizer_Flat_ProductValueService',
            'pim_serializer.denormalizer.flat.product_values' => 'getPimSerializer_Denormalizer_Flat_ProductValuesService',
            'pim_serializer.denormalizer.media' => 'getPimSerializer_Denormalizer_MediaService',
            'pim_serializer.denormalizer.metric' => 'getPimSerializer_Denormalizer_MetricService',
            'pim_serializer.denormalizer.prices' => 'getPimSerializer_Denormalizer_PricesService',
            'pim_serializer.denormalizer.product_value' => 'getPimSerializer_Denormalizer_ProductValueService',
            'pim_serializer.denormalizer.product_values' => 'getPimSerializer_Denormalizer_ProductValuesService',
            'pim_serializer.filter.flat_product_value' => 'getPimSerializer_Filter_FlatProductValueService',
            'pim_serializer.filter.product_value' => 'getPimSerializer_Filter_ProductValueService',
            'pim_serializer.normalizer.association_type' => 'getPimSerializer_Normalizer_AssociationTypeService',
            'pim_serializer.normalizer.attribute' => 'getPimSerializer_Normalizer_AttributeService',
            'pim_serializer.normalizer.attribute_group' => 'getPimSerializer_Normalizer_AttributeGroupService',
            'pim_serializer.normalizer.attribute_option' => 'getPimSerializer_Normalizer_AttributeOptionService',
            'pim_serializer.normalizer.category' => 'getPimSerializer_Normalizer_CategoryService',
            'pim_serializer.normalizer.channel' => 'getPimSerializer_Normalizer_ChannelService',
            'pim_serializer.normalizer.datetime' => 'getPimSerializer_Normalizer_DatetimeService',
            'pim_serializer.normalizer.family' => 'getPimSerializer_Normalizer_FamilyService',
            'pim_serializer.normalizer.flat.association_type' => 'getPimSerializer_Normalizer_Flat_AssociationTypeService',
            'pim_serializer.normalizer.flat.attribute' => 'getPimSerializer_Normalizer_Flat_AttributeService',
            'pim_serializer.normalizer.flat.attribute_group' => 'getPimSerializer_Normalizer_Flat_AttributeGroupService',
            'pim_serializer.normalizer.flat.category' => 'getPimSerializer_Normalizer_Flat_CategoryService',
            'pim_serializer.normalizer.flat.channel' => 'getPimSerializer_Normalizer_Flat_ChannelService',
            'pim_serializer.normalizer.flat.collection' => 'getPimSerializer_Normalizer_Flat_CollectionService',
            'pim_serializer.normalizer.flat.datetime' => 'getPimSerializer_Normalizer_Flat_DatetimeService',
            'pim_serializer.normalizer.flat.family' => 'getPimSerializer_Normalizer_Flat_FamilyService',
            'pim_serializer.normalizer.flat.group' => 'getPimSerializer_Normalizer_Flat_GroupService',
            'pim_serializer.normalizer.flat.job_instance' => 'getPimSerializer_Normalizer_Flat_JobInstanceService',
            'pim_serializer.normalizer.flat.label_translation' => 'getPimSerializer_Normalizer_Flat_LabelTranslationService',
            'pim_serializer.normalizer.flat.media' => 'getPimSerializer_Normalizer_Flat_MediaService',
            'pim_serializer.normalizer.flat.metric' => 'getPimSerializer_Normalizer_Flat_MetricService',
            'pim_serializer.normalizer.flat.option' => 'getPimSerializer_Normalizer_Flat_OptionService',
            'pim_serializer.normalizer.flat.price' => 'getPimSerializer_Normalizer_Flat_PriceService',
            'pim_serializer.normalizer.group' => 'getPimSerializer_Normalizer_GroupService',
            'pim_serializer.normalizer.job_instance' => 'getPimSerializer_Normalizer_JobInstanceService',
            'pim_serializer.normalizer.label_translation' => 'getPimSerializer_Normalizer_LabelTranslationService',
            'pim_serializer.normalizer.media' => 'getPimSerializer_Normalizer_MediaService',
            'pim_serializer.normalizer.metric' => 'getPimSerializer_Normalizer_MetricService',
            'pim_serializer.normalizer.product' => 'getPimSerializer_Normalizer_ProductService',
            'pim_serializer.normalizer.product_price' => 'getPimSerializer_Normalizer_ProductPriceService',
            'pim_serializer.normalizer.product_value' => 'getPimSerializer_Normalizer_ProductValueService',
            'pim_serializer.normalizer.product_values' => 'getPimSerializer_Normalizer_ProductValuesService',
            'pim_transform.builder.field_name' => 'getPimTransform_Builder_FieldNameService',
            'pim_transform.cache.attribute_cache' => 'getPimTransform_Cache_AttributeCacheService',
            'pim_transform.cache.cache_clearer' => 'getPimTransform_Cache_CacheClearerService',
            'pim_transform.cache.doctrine_cache' => 'getPimTransform_Cache_DoctrineCacheService',
            'pim_transform.cache.product_cache_clearer' => 'getPimTransform_Cache_ProductCacheClearerService',
            'pim_transform.converter.metric' => 'getPimTransform_Converter_MetricService',
            'pim_transform.transformer.association' => 'getPimTransform_Transformer_AssociationService',
            'pim_transform.transformer.attribute' => 'getPimTransform_Transformer_AttributeService',
            'pim_transform.transformer.attribute_option' => 'getPimTransform_Transformer_AttributeOptionService',
            'pim_transform.transformer.column_info_transformer' => 'getPimTransform_Transformer_ColumnInfoTransformerService',
            'pim_transform.transformer.entity' => 'getPimTransform_Transformer_EntityService',
            'pim_transform.transformer.family' => 'getPimTransform_Transformer_FamilyService',
            'pim_transform.transformer.guesser' => 'getPimTransform_Transformer_GuesserService',
            'pim_transform.transformer.job_instance' => 'getPimTransform_Transformer_JobInstanceService',
            'pim_transform.transformer.product' => 'getPimTransform_Transformer_ProductService',
            'pim_transform.transformer.property.nested_translation' => 'getPimTransform_Transformer_Property_NestedTranslationService',
            'pim_transform.transformer.property.translation' => 'getPimTransform_Transformer_Property_TranslationService',
            'pim_transform.transformer.registry' => 'getPimTransform_Transformer_RegistryService',
            'pim_translation.form.type.translatable_field' => 'getPimTranslation_Form_Type_TranslatableFieldService',
            'pim_translation.listener.add_locale' => 'getPimTranslation_Listener_AddLocaleService',
            'pim_ui.controller.ajax_option' => 'getPimUi_Controller_AjaxOptionService',
            'pim_ui.form.extension.help' => 'getPimUi_Form_Extension_HelpService',
            'pim_ui.form.extension.select2' => 'getPimUi_Form_Extension_Select2Service',
            'pim_ui.form.transformer.ajax_entity.factory' => 'getPimUi_Form_Transformer_AjaxEntity_FactoryService',
            'pim_ui.form.type.ajax_entity' => 'getPimUi_Form_Type_AjaxEntityService',
            'pim_ui.form.type.number' => 'getPimUi_Form_Type_NumberService',
            'pim_ui.form.type.switch' => 'getPimUi_Form_Type_SwitchService',
            'pim_user.context.user' => 'getPimUser_Context_UserService',
            'pim_user.event_listener.group_users_grid_listener' => 'getPimUser_EventListener_GroupUsersGridListenerService',
            'pim_user.event_listener.role_users_grid_listener' => 'getPimUser_EventListener_RoleUsersGridListenerService',
            'pim_user.event_subscriber.group' => 'getPimUser_EventSubscriber_GroupService',
            'pim_user.event_subscriber.user_preferences' => 'getPimUser_EventSubscriber_UserPreferencesService',
            'pim_user.form.subscriber.user_preferences' => 'getPimUser_Form_Subscriber_UserPreferencesService',
            'pim_user.form.type.acl_access_level_selector' => 'getPimUser_Form_Type_AclAccessLevelSelectorService',
            'pim_user.form.type.acl_collection' => 'getPimUser_Form_Type_AclCollectionService',
            'pim_user.repository.group' => 'getPimUser_Repository_GroupService',
            'pim_user.repository.role' => 'getPimUser_Repository_RoleService',
            'pim_user.twig.acl_groups_extension' => 'getPimUser_Twig_AclGroupsExtensionService',
            'pim_user.view_element.user.tab.additional' => 'getPimUser_ViewElement_User_Tab_AdditionalService',
            'pim_user.view_element.user.tab.business_unit' => 'getPimUser_ViewElement_User_Tab_BusinessUnitService',
            'pim_user.view_element.user.tab.general' => 'getPimUser_ViewElement_User_Tab_GeneralService',
            'pim_user.view_element.user.tab.group_and_role' => 'getPimUser_ViewElement_User_Tab_GroupAndRoleService',
            'pim_user.view_element.user.tab.password' => 'getPimUser_ViewElement_User_Tab_PasswordService',
            'pim_user.view_element.visibility_checker.groups_and_roles' => 'getPimUser_ViewElement_VisibilityChecker_GroupsAndRolesService',
            'pim_validator' => 'getPimValidatorService',
            'pim_versioning.builder.version' => 'getPimVersioning_Builder_VersionService',
            'pim_versioning.context.version' => 'getPimVersioning_Context_VersionService',
            'pim_versioning.doctrine.orm.pending_mass_persister' => 'getPimVersioning_Doctrine_Orm_PendingMassPersisterService',
            'pim_versioning.event_subscriber.addcontext' => 'getPimVersioning_EventSubscriber_AddcontextService',
            'pim_versioning.event_subscriber.adduser' => 'getPimVersioning_EventSubscriber_AdduserService',
            'pim_versioning.event_subscriber.addversion' => 'getPimVersioning_EventSubscriber_AddversionService',
            'pim_versioning.event_subscriber.timestampable' => 'getPimVersioning_EventSubscriber_TimestampableService',
            'pim_versioning.manager.version' => 'getPimVersioning_Manager_VersionService',
            'pim_versioning.repository.version' => 'getPimVersioning_Repository_VersionService',
            'pim_versioning.serializer' => 'getPimVersioning_SerializerService',
            'pim_versioning.serializer.normalizer.flat.association_type' => 'getPimVersioning_Serializer_Normalizer_Flat_AssociationTypeService',
            'pim_versioning.serializer.normalizer.flat.attribute' => 'getPimVersioning_Serializer_Normalizer_Flat_AttributeService',
            'pim_versioning.serializer.normalizer.flat.attribute_group' => 'getPimVersioning_Serializer_Normalizer_Flat_AttributeGroupService',
            'pim_versioning.serializer.normalizer.flat.category' => 'getPimVersioning_Serializer_Normalizer_Flat_CategoryService',
            'pim_versioning.serializer.normalizer.flat.channel' => 'getPimVersioning_Serializer_Normalizer_Flat_ChannelService',
            'pim_versioning.serializer.normalizer.flat.collection' => 'getPimVersioning_Serializer_Normalizer_Flat_CollectionService',
            'pim_versioning.serializer.normalizer.flat.datetime' => 'getPimVersioning_Serializer_Normalizer_Flat_DatetimeService',
            'pim_versioning.serializer.normalizer.flat.family' => 'getPimVersioning_Serializer_Normalizer_Flat_FamilyService',
            'pim_versioning.serializer.normalizer.flat.group' => 'getPimVersioning_Serializer_Normalizer_Flat_GroupService',
            'pim_versioning.serializer.normalizer.flat.job_instance' => 'getPimVersioning_Serializer_Normalizer_Flat_JobInstanceService',
            'pim_versioning.serializer.normalizer.flat.label_translation' => 'getPimVersioning_Serializer_Normalizer_Flat_LabelTranslationService',
            'pim_versioning.serializer.normalizer.flat.media' => 'getPimVersioning_Serializer_Normalizer_Flat_MediaService',
            'pim_versioning.serializer.normalizer.flat.metric' => 'getPimVersioning_Serializer_Normalizer_Flat_MetricService',
            'pim_versioning.serializer.normalizer.flat.option' => 'getPimVersioning_Serializer_Normalizer_Flat_OptionService',
            'pim_versioning.serializer.normalizer.flat.price' => 'getPimVersioning_Serializer_Normalizer_Flat_PriceService',
            'pim_versioning.serializer.normalizer.label_translation' => 'getPimVersioning_Serializer_Normalizer_LabelTranslationService',
            'pim_versioning.update_guesser.attribute_group' => 'getPimVersioning_UpdateGuesser_AttributeGroupService',
            'pim_versioning.update_guesser.attribute_option' => 'getPimVersioning_UpdateGuesser_AttributeOptionService',
            'pim_versioning.update_guesser.chained' => 'getPimVersioning_UpdateGuesser_ChainedService',
            'pim_versioning.update_guesser.contains_products' => 'getPimVersioning_UpdateGuesser_ContainsProductsService',
            'pim_versioning.update_guesser.product_value' => 'getPimVersioning_UpdateGuesser_ProductValueService',
            'pim_versioning.update_guesser.translations' => 'getPimVersioning_UpdateGuesser_TranslationsService',
            'pim_versioning.update_guesser.versionable' => 'getPimVersioning_UpdateGuesser_VersionableService',
            'pim_webservice.handler.rest.product' => 'getPimWebservice_Handler_Rest_ProductService',
            'pim_webservice.serializer' => 'getPimWebservice_SerializerService',
            'pim_webservice.serializer.normalizer.attribute_option' => 'getPimWebservice_Serializer_Normalizer_AttributeOptionService',
            'pim_webservice.serializer.normalizer.datetime' => 'getPimWebservice_Serializer_Normalizer_DatetimeService',
            'pim_webservice.serializer.normalizer.media' => 'getPimWebservice_Serializer_Normalizer_MediaService',
            'pim_webservice.serializer.normalizer.metric' => 'getPimWebservice_Serializer_Normalizer_MetricService',
            'pim_webservice.serializer.normalizer.product' => 'getPimWebservice_Serializer_Normalizer_ProductService',
            'pim_webservice.serializer.normalizer.product_price' => 'getPimWebservice_Serializer_Normalizer_ProductPriceService',
            'pim_webservice.serializer.normalizer.product_value' => 'getPimWebservice_Serializer_Normalizer_ProductValueService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request' => 'getRequestService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.acl.cache' => 'getSecurity_Acl_CacheService',
            'security.acl.dbal.schema' => 'getSecurity_Acl_Dbal_SchemaService',
            'security.acl.dbal.schema_listener' => 'getSecurity_Acl_Dbal_SchemaListenerService',
            'security.acl.provider' => 'getSecurity_Acl_ProviderService',
            'security.acl.voter.basic_permissions' => 'getSecurity_Acl_Voter_BasicPermissionsService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context' => 'getSecurity_ContextService',
            'security.context_listener.0' => 'getSecurity_ContextListener_0Service',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.install' => 'getSecurity_Firewall_Map_Context_InstallService',
            'security.firewall.map.context.liip_imagine' => 'getSecurity_Firewall_Map_Context_LiipImagineService',
            'security.firewall.map.context.login' => 'getSecurity_Firewall_Map_Context_LoginService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.firewall.map.context.reset_password' => 'getSecurity_Firewall_Map_Context_ResetPasswordService',
            'security.firewall.map.context.wsse_secured' => 'getSecurity_Firewall_Map_Context_WsseSecuredService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.secure_random' => 'getSecurity_SecureRandomService',
            'security.user.provider.concrete.chain_provider' => 'getSecurity_User_Provider_Concrete_ChainProviderService',
            'security.user.provider.concrete.in_memory' => 'getSecurity_User_Provider_Concrete_InMemoryService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.webconfigurator' => 'getSensioDistribution_WebconfiguratorService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.handler.pdo' => 'getSession_Handler_PdoService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'stof_doctrine_extensions.event_listener.locale' => 'getStofDoctrineExtensions_EventListener_LocaleService',
            'stof_doctrine_extensions.uploadable.manager' => 'getStofDoctrineExtensions_Uploadable_ManagerService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'sylius.controller.process' => 'getSylius_Controller_ProcessService',
            'sylius.process.builder' => 'getSylius_Process_BuilderService',
            'sylius.process.context' => 'getSylius_Process_ContextService',
            'sylius.process.coordinator' => 'getSylius_Process_CoordinatorService',
            'sylius.process_storage.session' => 'getSylius_ProcessStorage_SessionService',
            'sylius.process_storage.session.bag' => 'getSylius_ProcessStorage_Session_BagService',
            'templating' => 'getTemplatingService',
            'templating.asset.package_factory' => 'getTemplating_Asset_PackageFactoryService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.globals' => 'getTemplating_GlobalsService',
            'templating.helper.actions' => 'getTemplating_Helper_ActionsService',
            'templating.helper.assets' => 'getTemplating_Helper_AssetsService',
            'templating.helper.code' => 'getTemplating_Helper_CodeService',
            'templating.helper.form' => 'getTemplating_Helper_FormService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.request' => 'getTemplating_Helper_RequestService',
            'templating.helper.router' => 'getTemplating_Helper_RouterService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.helper.session' => 'getTemplating_Helper_SessionService',
            'templating.helper.slots' => 'getTemplating_Helper_SlotsService',
            'templating.helper.translator' => 'getTemplating_Helper_TranslatorService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator.default' => 'getTranslator_DefaultService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.intl' => 'getTwig_Extension_IntlService',
            'twig.extension.jsformvalidation' => 'getTwig_Extension_JsformvalidationService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validator' => 'getValidatorService',
            'validator.mapping.class_metadata_factory' => 'getValidator_Mapping_ClassMetadataFactoryService',
            'validator.validator_factory' => 'getValidator_ValidatorFactoryService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
        );
        $this->aliases = array(
            'a2lix_translation_form.manager_registry' => 'doctrine',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'router',
            'fos_rest.templating' => 'templating',
            'jms_serializer' => 'fos_rest.serializer',
            'jsfv' => 'jsfv.generator',
            'mailer' => 'swiftmailer.mailer.default',
            'pim_base_connector.reader.file.csv_variant_group' => 'pim_base_connector.reader.file.csv_product',
            'pim_base_connector.writer.doctrine.association' => 'pim_base_connector.writer.doctrine.product_association',
            'pim_base_connector.writer.doctrine.association_type' => 'pim_base_connector.writer.doctrine',
            'pim_base_connector.writer.doctrine.attribute' => 'pim_base_connector.writer.doctrine',
            'pim_base_connector.writer.doctrine.attribute_option' => 'pim_base_connector.writer.doctrine',
            'pim_base_connector.writer.doctrine.category' => 'pim_base_connector.writer.doctrine',
            'pim_base_connector.writer.doctrine.group' => 'pim_base_connector.writer.doctrine',
            'pim_catalog.doctrine.smart_manager_registry' => 'akeneo_storage_utils.doctrine.smart_manager_registry',
            'pim_catalog.doctrine.table_name_builder' => 'akeneo_storage_utils.doctrine.table_name_builder',
            'pim_catalog.factory.referenced_collection' => 'akeneo_storage_utils.factory.referenced_collection',
            'pim_catalog.object_manager.association' => 'doctrine.orm.default_entity_manager',
            'pim_catalog.object_manager.product' => 'doctrine.orm.default_entity_manager',
            'security.acl.dbal.connection' => 'doctrine.dbal.default_connection',
            'sensio.distribution.webconfigurator' => 'sensio_distribution.webconfigurator',
            'serializer' => 'fos_rest.serializer',
            'session.storage' => 'session.storage.native',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
            'sylius.process_storage' => 'sylius.process_storage.session',
            'translator' => 'translator.default',
        );
    }

    /**
     * Gets the 'a2lix_translation_form.default.listener.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener A A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener instance.
     */
    protected function getA2lixTranslationForm_Default_Listener_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.listener.translations'] = new \A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener($this->get('a2lix_translation_form.default.service.translation'));
    }

    /**
     * Gets the 'a2lix_translation_form.default.service.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm A A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm instance.
     */
    protected function getA2lixTranslationForm_Default_Service_TranslationService()
    {
        return $this->services['a2lix_translation_form.default.service.translation'] = new \A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm($this->get('form.registry'), $this->get('doctrine'));
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsType A A2lix\TranslationFormBundle\Form\Type\TranslationsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.type.translations'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsType($this->get('a2lix_translation_form.default.listener.translations'), array(0 => 'en', 1 => 'fr'), true);
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationsfields' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType A A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsfieldsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsfields'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType();
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationsforms' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType A A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsformsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsforms'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType(array(0 => 'en', 1 => 'fr'), true);
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationslocalesselector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType A A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationslocalesselectorService()
    {
        return $this->services['a2lix_translation_form.default.type.translationslocalesselector'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType(array(0 => 'en', 1 => 'fr'));
    }

    /**
     * Gets the 'akeneo_batch.connectors' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Connector\ConnectorRegistry A Akeneo\Bundle\BatchBundle\Connector\ConnectorRegistry instance.
     */
    protected function getAkeneoBatch_ConnectorsService()
    {
        $a = $this->get('pim_base_connector.validator.step.charset_validator');
        $b = $this->get('pim_base_connector.reader.file.csv_category');
        $c = $this->get('pim_base_connector.processor.category');
        $d = $this->get('pim_base_connector.writer.doctrine');
        $e = $this->get('pim_base_connector.reader.file.yaml');
        $f = $this->get('pim_base_connector.processor.association_type');
        $g = $this->get('pim_base_connector.processor.attribute');
        $h = $this->get('pim_base_connector.processor.attribute_option');
        $i = $this->get('pim_base_connector.processor.product');
        $j = $this->get('pim_base_connector.writer.doctrine.product');
        $k = $this->get('pim_base_connector.reader.file.csv_product');
        $l = $this->get('pim_base_connector.processor.association');
        $m = $this->get('pim_base_connector.writer.doctrine.product_association');
        $n = $this->get('pim_base_connector.processor.csv_serializer.homogeneous');
        $o = $this->get('pim_base_connector.writer.file');

        $this->services['akeneo_batch.connectors'] = $instance = new \Akeneo\Bundle\BatchBundle\Connector\ConnectorRegistry($this->get('akeneo_batch.job_factory'), $this->get('akeneo_batch.step_factory'));

        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_category_csv', 'pim_installer.jobs.fixtures_category_csv.title', 'pim_base_connector.jobs.fixtures_category_csv.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_category_csv', 'pim_installer.jobs.fixtures_category_csv.title', 'pim_installer.jobs.fixtures_category_csv.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $b, 'processor' => $c, 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_category_yml', 'pim_installer.jobs.fixtures_category_yml.title', 'pim_base_connector.jobs.fixtures_category_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_category_yml', 'pim_installer.jobs.fixtures_category_yml.title', 'pim_installer.jobs.fixtures_category_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $c, 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_group_yml', 'pim_installer.jobs.fixtures_attribute_group_yml.title', 'pim_base_connector.jobs.fixtures_attribute_group_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_group_yml', 'pim_installer.jobs.fixtures_attribute_group_yml.title', 'pim_installer.jobs.fixtures_attribute_group_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.attribute_group'), 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_channel_yml', 'pim_installer.jobs.fixtures_channel_yml.title', 'pim_base_connector.jobs.fixtures_channel_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_channel_yml', 'pim_installer.jobs.fixtures_channel_yml.title', 'pim_installer.jobs.fixtures_channel_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.channel'), 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_group_type_yml', 'pim_installer.jobs.fixtures_group_type_yml.title', 'pim_base_connector.jobs.fixtures_group_type_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_group_type_yml', 'pim_installer.jobs.fixtures_group_type_yml.title', 'pim_installer.jobs.fixtures_group_type_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.group_type'), 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_association_type_yml', 'pim_installer.jobs.fixtures_association_type_yml.title', 'pim_base_connector.jobs.fixtures_association_type_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_association_type_yml', 'pim_installer.jobs.fixtures_association_type_yml.title', 'pim_installer.jobs.fixtures_association_type_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $f, 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_yml', 'pim_installer.jobs.fixtures_attribute_yml.title', 'pim_base_connector.jobs.fixtures_attribute_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_yml', 'pim_installer.jobs.fixtures_attribute_yml.title', 'pim_installer.jobs.fixtures_attribute_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $g, 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_options_yml', 'pim_installer.jobs.fixtures_attribute_options_yml.title', 'pim_base_connector.jobs.fixtures_attribute_options_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_attribute_options_yml', 'pim_installer.jobs.fixtures_attribute_options_yml.title', 'pim_installer.jobs.fixtures_attribute_options_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $h, 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_family_yml', 'pim_installer.jobs.fixtures_family_yml.title', 'pim_base_connector.jobs.fixtures_family_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_family_yml', 'pim_installer.jobs.fixtures_family_yml.title', 'pim_installer.jobs.fixtures_family_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.family'), 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_group_yml', 'pim_installer.jobs.fixtures_group_yml.title', 'pim_base_connector.jobs.fixtures_group_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_group_yml', 'pim_installer.jobs.fixtures_group_yml.title', 'pim_installer.jobs.fixtures_group_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.group'), 'writer' => $d), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_product_yml', 'pim_installer.jobs.fixtures_product_yml.title', 'pim_base_connector.jobs.fixtures_product_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_product_yml', 'pim_installer.jobs.fixtures_product_yml.title', 'pim_installer.jobs.fixtures_product_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.yaml_product'), 'processor' => $i, 'writer' => $j), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_product_csv', 'pim_installer.jobs.fixtures_product_csv.title', 'pim_base_connector.jobs.fixtures_product_csv.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_product_csv', 'pim_installer.jobs.fixtures_product_csv.title', 'pim_installer.jobs.fixtures_product_csv.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $k, 'processor' => $i, 'writer' => $j), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_association_yml', 'pim_installer.jobs.fixtures_association_yml.title', 'pim_base_connector.jobs.fixtures_association_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_association_yml', 'pim_installer.jobs.fixtures_association_yml.title', 'pim_installer.jobs.fixtures_association_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.yaml_associations'), 'processor' => $l, 'writer' => $m), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_job_yml', 'pim_installer.jobs.fixtures_job_yml.title', 'pim_base_connector.jobs.fixtures_job_yml.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Data fixtures', 'fixtures', 'fixtures_job_yml', 'pim_installer.jobs.fixtures_job_yml.title', 'pim_installer.jobs.fixtures_job_yml.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $e, 'processor' => $this->get('pim_base_connector.processor.job_instance'), 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_product_export', 'pim_base_connector.jobs.csv_product_export.title', 'pim_base_connector.jobs.csv_product_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.doctrine.product'), 'processor' => $this->get('pim_base_connector.processor.product_to_flat_array'), 'writer' => $this->get('pim_base_connector.writer.file.csv_product')), array('batch_size' => 10));
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_category_export', 'pim_base_connector.jobs.csv_category_export.title', 'pim_base_connector.jobs.csv_category_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.orm.category'), 'processor' => $n, 'writer' => $o), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_attribute_export', 'pim_base_connector.jobs.csv_attribute_export.title', 'pim_base_connector.jobs.csv_attribute_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.orm.attribute'), 'processor' => $n, 'writer' => $o), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_attribute_option_export', 'pim_base_connector.jobs.csv_attribute_option_export.title', 'pim_base_connector.jobs.csv_attribute_option_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.orm.attribute_option'), 'processor' => $n, 'writer' => $o), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_association_type_export', 'pim_base_connector.jobs.csv_association_type_export.title', 'pim_base_connector.jobs.csv_association_type_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.orm.association_type'), 'processor' => $n, 'writer' => $o), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_group_export', 'pim_base_connector.jobs.csv_group_export.title', 'pim_base_connector.jobs.csv_group_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.repository.group'), 'processor' => $this->get('pim_base_connector.processor.normalization.csv_group'), 'writer' => $o), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'export', 'csv_variant_group_export', 'pim_base_connector.jobs.csv_variant_group_export.title', 'pim_base_connector.jobs.csv_variant_group_export.export.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.repository.variant_group'), 'processor' => $this->get('pim_base_connector.processor.normalization.csv_variant_group'), 'writer' => $this->get('pim_base_connector.writer.file.csv_variant_group')), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_product_import', 'pim_base_connector.jobs.csv_product_import.title', 'pim_base_connector.jobs.csv_product_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_product_import', 'pim_base_connector.jobs.csv_product_import.title', 'pim_base_connector.jobs.csv_product_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $k, 'processor' => $i, 'writer' => $j), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_product_import', 'pim_base_connector.jobs.csv_product_import.title', 'pim_base_connector.jobs.csv_product_import.import_associations.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.cached_association'), 'processor' => $l, 'writer' => $m), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_category_import', 'pim_base_connector.jobs.csv_category_import.title', 'pim_base_connector.jobs.csv_category_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_category_import', 'pim_base_connector.jobs.csv_category_import.title', 'pim_base_connector.jobs.csv_category_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $b, 'processor' => $c, 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_attribute_import', 'pim_base_connector.jobs.csv_attribute_import.title', 'pim_base_connector.jobs.csv_attribute_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_attribute_import', 'pim_base_connector.jobs.csv_attribute_import.title', 'pim_base_connector.jobs.csv_attribute_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.csv_attribute'), 'processor' => $g, 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_attribute_option_import', 'pim_base_connector.jobs.csv_attribute_option_import.title', 'pim_base_connector.jobs.csv_attribute_option_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_attribute_option_import', 'pim_base_connector.jobs.csv_attribute_option_import.title', 'pim_base_connector.jobs.csv_attribute_option_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.csv_attribute_option'), 'processor' => $h, 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_association_type_import', 'pim_base_connector.jobs.csv_association_type_import.title', 'pim_base_connector.jobs.csv_association_type_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_association_type_import', 'pim_base_connector.jobs.csv_association_type_import.title', 'pim_base_connector.jobs.csv_association_type_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.csv_association_type'), 'processor' => $f, 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_group_import', 'pim_base_connector.jobs.csv_group_import.title', 'pim_base_connector.jobs.csv_group_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_group_import', 'pim_base_connector.jobs.csv_group_import.title', 'pim_base_connector.jobs.csv_group_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('pim_base_connector.reader.file.csv_group'), 'processor' => $this->get('pim_base_connector.processor.denormalization.csv_group'), 'writer' => $d), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_variant_group_import', 'pim_base_connector.jobs.csv_variant_group_import.title', 'pim_base_connector.jobs.csv_variant_group_import.validation.title', 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep', array('charsetValidator' => $a), array());
        $instance->addStepToJob('Akeneo CSV Connector', 'import', 'csv_variant_group_import', 'pim_base_connector.jobs.csv_variant_group_import.title', 'pim_base_connector.jobs.csv_variant_group_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $k, 'processor' => $this->get('pim_base_connector.processor.denormalization.csv_variant_group'), 'writer' => $this->get('pim_base_connector.writer.doctrine.variant_group')), array('batchSize' => 1));
        $instance->addStepToJob('Product CSV Connector', 'import', 'specific_product_import', 'Job Import Product', 'foody_import_product.jobs.specific_product_import.import.title', 'Akeneo\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('foody_import_product.reader.bdd_product'), 'processor' => $this->get('foody_import_product.processor.product'), 'writer' => $this->get('foody_import_product.writer.orm_product')), array());

        return $instance;
    }

    /**
     * Gets the 'akeneo_batch.job_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Job\JobFactory A Akeneo\Bundle\BatchBundle\Job\JobFactory instance.
     */
    protected function getAkeneoBatch_JobFactoryService()
    {
        return $this->services['akeneo_batch.job_factory'] = new \Akeneo\Bundle\BatchBundle\Job\JobFactory($this->get('event_dispatcher'), $this->get('akeneo_batch.job_repository'));
    }

    /**
     * Gets the 'akeneo_batch.job_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Job\DoctrineJobRepository A Akeneo\Bundle\BatchBundle\Job\DoctrineJobRepository instance.
     */
    protected function getAkeneoBatch_JobRepositoryService()
    {
        return $this->services['akeneo_batch.job_repository'] = new \Akeneo\Bundle\BatchBundle\Job\DoctrineJobRepository($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'akeneo_batch.logger.batch_log_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler A Akeneo\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler instance.
     */
    protected function getAkeneoBatch_Logger_BatchLogHandlerService()
    {
        return $this->services['akeneo_batch.logger.batch_log_handler'] = new \Akeneo\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler((dirname(dirname(__DIR__)).'/logs/batch'));
    }

    /**
     * Gets the 'akeneo_batch.logger_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\EventListener\LoggerSubscriber A Akeneo\Bundle\BatchBundle\EventListener\LoggerSubscriber instance.
     */
    protected function getAkeneoBatch_LoggerSubscriberService()
    {
        return $this->services['akeneo_batch.logger_subscriber'] = new \Akeneo\Bundle\BatchBundle\EventListener\LoggerSubscriber($this->get('monolog.logger.batch'), $this->get('translator.default'));
    }

    /**
     * Gets the 'akeneo_batch.mail_notifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Notification\MailNotifier A Akeneo\Bundle\BatchBundle\Notification\MailNotifier instance.
     */
    protected function getAkeneoBatch_MailNotifierService()
    {
        return $this->services['akeneo_batch.mail_notifier'] = new \Akeneo\Bundle\BatchBundle\Notification\MailNotifier($this->get('akeneo_batch.logger.batch_log_handler'), $this->get('security.context'), $this->get('twig'), $this->get('swiftmailer.mailer.default'), 'mailer@akeneo.com');
    }

    /**
     * Gets the 'akeneo_batch.manager.job_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Manager\JobExecutionManager A Akeneo\Bundle\BatchBundle\Manager\JobExecutionManager instance.
     */
    protected function getAkeneoBatch_Manager_JobExecutionService()
    {
        return $this->services['akeneo_batch.manager.job_execution'] = new \Akeneo\Bundle\BatchBundle\Manager\JobExecutionManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'akeneo_batch.notification_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\EventListener\NotificationSubscriber A Akeneo\Bundle\BatchBundle\EventListener\NotificationSubscriber instance.
     */
    protected function getAkeneoBatch_NotificationSubscriberService()
    {
        $this->services['akeneo_batch.notification_subscriber'] = $instance = new \Akeneo\Bundle\BatchBundle\EventListener\NotificationSubscriber();

        $instance->registerNotifier($this->get('akeneo_batch.mail_notifier'));

        return $instance;
    }

    /**
     * Gets the 'akeneo_batch.set_job_execution_log_file_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber A Akeneo\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber instance.
     */
    protected function getAkeneoBatch_SetJobExecutionLogFileSubscriberService()
    {
        return $this->services['akeneo_batch.set_job_execution_log_file_subscriber'] = new \Akeneo\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber($this->get('akeneo_batch.logger.batch_log_handler'));
    }

    /**
     * Gets the 'akeneo_batch.step_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\BatchBundle\Step\StepFactory A Akeneo\Bundle\BatchBundle\Step\StepFactory instance.
     */
    protected function getAkeneoBatch_StepFactoryService()
    {
        return $this->services['akeneo_batch.step_factory'] = new \Akeneo\Bundle\BatchBundle\Step\StepFactory($this->get('event_dispatcher'), $this->get('akeneo_batch.job_repository'));
    }

    /**
     * Gets the 'akeneo_measure.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\MeasureBundle\Manager\MeasureManager A Akeneo\Bundle\MeasureBundle\Manager\MeasureManager instance.
     */
    protected function getAkeneoMeasure_ManagerService()
    {
        $this->services['akeneo_measure.manager'] = $instance = new \Akeneo\Bundle\MeasureBundle\Manager\MeasureManager();

        $instance->setMeasureConfig(array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mm²'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4515999999999997E-10)), 'symbol' => 'sq mil'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064515999999999998)), 'symbol' => 'in²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.092903040000000006)), 'symbol' => 'ft²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612735999999999)), 'symbol' => 'yd²'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.8899999999999)), 'symbol' => 'arpent'), 'ACRE' => array('convert' => array(0 => array('mul' => 4046.8564219999998)), 'symbol' => 'A'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726000000002)), 'symbol' => 'fur²'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.1103360001)), 'symbol' => 'mi²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Decibel' => array('standard' => 'DECIBEL', 'units' => array('DECIBEL' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'd'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'))), 'Length' => array('standard' => 'METER', 'units' => array('MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dm'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'MIL' => array('convert' => array(0 => array('mul' => 2.5400000000000001E-5)), 'symbol' => 'mil'), 'INCH' => array('convert' => array(0 => array('mul' => 0.025399999999999999)), 'symbol' => 'in'), 'FEET' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ft'), 'YARD' => array('convert' => array(0 => array('mul' => 0.91439999999999999)), 'symbol' => 'yd'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.116800000000001)), 'symbol' => 'ch'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.16800000000001)), 'symbol' => 'fur'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.3440000000001)), 'symbol' => 'mi'))), 'Power' => array('standard' => 'WATT', 'units' => array('WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'))), 'Voltage' => array('standard' => 'VOLT', 'units' => array('MILLIVOLT' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mV'), 'CENTIVOLT' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cV'), 'DECIVOLT' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dV'), 'VOLT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'V'), 'DEKAVOLT' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daV'), 'HECTOVOLT' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hV'), 'KILOVOLT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kV'))), 'Intensity' => array('standard' => 'AMPERE', 'units' => array('MILLIAMPERE' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mA'), 'CENTIAMPERE' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cA'), 'DECIAMPERE' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dA'), 'AMPERE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'A'), 'DEKAMPERE' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daA'), 'HECTOAMPERE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hA'), 'KILOAMPERE' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kA'))), 'Resistance' => array('standard' => 'OHM', 'units' => array('MILLIOHM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mΩ'), 'CENTIOHM' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cΩ'), 'DECIOHM' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dΩ'), 'OHM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ω'), 'DEKAOHM' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daΩ'), 'HECTOHM' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hΩ'), 'KILOHM' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kΩ'), 'MEGOHM' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MΩ'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.30480000000000002), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.3440000000001), 1 => array('div' => 3600)), 'symbol' => 'midivh'))), 'ElectricCharge' => array('standard' => 'AMPEREHOUR', 'units' => array('MILLIAMPEREHOUR' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mAh'), 'AMPEREHOUR' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ah'), 'MILLICOULOMB' => array('convert' => array(0 => array('mul' => 3600000)), 'symbol' => 'mC'), 'CENTIOULOMB' => array('convert' => array(0 => array('mul' => 360000)), 'symbol' => 'cC'), 'DECICOULOMB' => array('convert' => array(0 => array('mul' => 36000)), 'symbol' => 'dC'), 'COULOMB' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'C'), 'DEKACOULOMB' => array('convert' => array(0 => array('mul' => 360)), 'symbol' => 'daC'), 'HECTOCOULOMB' => array('convert' => array(0 => array('mul' => 36)), 'symbol' => 'hC'), 'KILOCOULOMB' => array('convert' => array(0 => array('mul' => 3.6000000000000001)), 'symbol' => 'kC'))), 'Duration' => array('standard' => 'SECOND', 'units' => array('MILLISECOND' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'ms'), 'SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 's'), 'MINUTE' => array('convert' => array(0 => array('mul' => 60)), 'symbol' => 'm'), 'HOUR' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'h'), 'DAY' => array('convert' => array(0 => array('mul' => 86400)), 'symbol' => 'd'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.14999999999998)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.14999999999998)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.14999999999998)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-9)), 'symbol' => 'mm³'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'cm³'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'ml'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-5)), 'symbol' => 'cl'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dm³'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'), 'BARREL' => array('convert' => array(0 => array('mul' => 0.16365924000000001)), 'symbol' => 'bbl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.5411915900000004), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118000000001), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.76455486100000003)), 'symbol' => 'yd³'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('MILLIGRAM' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mg'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.4798909999999995E-5)), 'symbol' => 'gr'), 'DENIER' => array('convert' => array(0 => array('mul' => 0.0012750000000000001)), 'symbol' => 'denier'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.030589999999999999)), 'symbol' => 'once'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.48949999999999999)), 'symbol' => 'livre'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237000000002), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237000000002)), 'symbol' => 'lb')))));

        return $instance;
    }

    /**
     * Gets the 'akeneo_measure.measure_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\MeasureBundle\Convert\MeasureConverter A Akeneo\Bundle\MeasureBundle\Convert\MeasureConverter instance.
     */
    protected function getAkeneoMeasure_MeasureConverterService()
    {
        return $this->services['akeneo_measure.measure_converter'] = new \Akeneo\Bundle\MeasureBundle\Convert\MeasureConverter(array('measures_config' => array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mm²'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4515999999999997E-10)), 'symbol' => 'sq mil'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064515999999999998)), 'symbol' => 'in²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.092903040000000006)), 'symbol' => 'ft²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612735999999999)), 'symbol' => 'yd²'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.8899999999999)), 'symbol' => 'arpent'), 'ACRE' => array('convert' => array(0 => array('mul' => 4046.8564219999998)), 'symbol' => 'A'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726000000002)), 'symbol' => 'fur²'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.1103360001)), 'symbol' => 'mi²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Decibel' => array('standard' => 'DECIBEL', 'units' => array('DECIBEL' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'd'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'))), 'Length' => array('standard' => 'METER', 'units' => array('MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dm'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'MIL' => array('convert' => array(0 => array('mul' => 2.5400000000000001E-5)), 'symbol' => 'mil'), 'INCH' => array('convert' => array(0 => array('mul' => 0.025399999999999999)), 'symbol' => 'in'), 'FEET' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ft'), 'YARD' => array('convert' => array(0 => array('mul' => 0.91439999999999999)), 'symbol' => 'yd'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.116800000000001)), 'symbol' => 'ch'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.16800000000001)), 'symbol' => 'fur'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.3440000000001)), 'symbol' => 'mi'))), 'Power' => array('standard' => 'WATT', 'units' => array('WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'))), 'Voltage' => array('standard' => 'VOLT', 'units' => array('MILLIVOLT' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mV'), 'CENTIVOLT' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cV'), 'DECIVOLT' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dV'), 'VOLT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'V'), 'DEKAVOLT' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daV'), 'HECTOVOLT' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hV'), 'KILOVOLT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kV'))), 'Intensity' => array('standard' => 'AMPERE', 'units' => array('MILLIAMPERE' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mA'), 'CENTIAMPERE' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cA'), 'DECIAMPERE' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dA'), 'AMPERE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'A'), 'DEKAMPERE' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daA'), 'HECTOAMPERE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hA'), 'KILOAMPERE' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kA'))), 'Resistance' => array('standard' => 'OHM', 'units' => array('MILLIOHM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mΩ'), 'CENTIOHM' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cΩ'), 'DECIOHM' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dΩ'), 'OHM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ω'), 'DEKAOHM' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daΩ'), 'HECTOHM' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hΩ'), 'KILOHM' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kΩ'), 'MEGOHM' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MΩ'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.30480000000000002), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.3440000000001), 1 => array('div' => 3600)), 'symbol' => 'midivh'))), 'ElectricCharge' => array('standard' => 'AMPEREHOUR', 'units' => array('MILLIAMPEREHOUR' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mAh'), 'AMPEREHOUR' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ah'), 'MILLICOULOMB' => array('convert' => array(0 => array('mul' => 3600000)), 'symbol' => 'mC'), 'CENTIOULOMB' => array('convert' => array(0 => array('mul' => 360000)), 'symbol' => 'cC'), 'DECICOULOMB' => array('convert' => array(0 => array('mul' => 36000)), 'symbol' => 'dC'), 'COULOMB' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'C'), 'DEKACOULOMB' => array('convert' => array(0 => array('mul' => 360)), 'symbol' => 'daC'), 'HECTOCOULOMB' => array('convert' => array(0 => array('mul' => 36)), 'symbol' => 'hC'), 'KILOCOULOMB' => array('convert' => array(0 => array('mul' => 3.6000000000000001)), 'symbol' => 'kC'))), 'Duration' => array('standard' => 'SECOND', 'units' => array('MILLISECOND' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'ms'), 'SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 's'), 'MINUTE' => array('convert' => array(0 => array('mul' => 60)), 'symbol' => 'm'), 'HOUR' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'h'), 'DAY' => array('convert' => array(0 => array('mul' => 86400)), 'symbol' => 'd'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.14999999999998)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.14999999999998)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.14999999999998)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-9)), 'symbol' => 'mm³'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'cm³'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'ml'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-5)), 'symbol' => 'cl'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dm³'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'), 'BARREL' => array('convert' => array(0 => array('mul' => 0.16365924000000001)), 'symbol' => 'bbl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.5411915900000004), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118000000001), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.76455486100000003)), 'symbol' => 'yd³'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('MILLIGRAM' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mg'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.4798909999999995E-5)), 'symbol' => 'gr'), 'DENIER' => array('convert' => array(0 => array('mul' => 0.0012750000000000001)), 'symbol' => 'denier'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.030589999999999999)), 'symbol' => 'once'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.48949999999999999)), 'symbol' => 'livre'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237000000002), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237000000002)), 'symbol' => 'lb'))))));
    }

    /**
     * Gets the 'akeneo_storage_utils.doctrine.object_detacher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Detacher\ObjectDetacher A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Detacher\ObjectDetacher instance.
     */
    protected function getAkeneoStorageUtils_Doctrine_ObjectDetacherService()
    {
        return $this->services['akeneo_storage_utils.doctrine.object_detacher'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Detacher\ObjectDetacher($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'akeneo_storage_utils.doctrine.smart_manager_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\SmartManagerRegistry A Akeneo\Bundle\StorageUtilsBundle\Doctrine\SmartManagerRegistry instance.
     */
    protected function getAkeneoStorageUtils_Doctrine_SmartManagerRegistryService()
    {
        $this->services['akeneo_storage_utils.doctrine.smart_manager_registry'] = $instance = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\SmartManagerRegistry();

        $instance->addRegistry($this->get('doctrine'));

        return $instance;
    }

    /**
     * Gets the 'akeneo_storage_utils.doctrine.table_name_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\TableNameBuilder A Akeneo\Bundle\StorageUtilsBundle\Doctrine\TableNameBuilder instance.
     */
    protected function getAkeneoStorageUtils_Doctrine_TableNameBuilderService()
    {
        return $this->services['akeneo_storage_utils.doctrine.table_name_builder'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\TableNameBuilder($this, $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'akeneo_storage_utils.factory.referenced_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\MongoDBODM\Collections\ReferencedCollectionFactory A Akeneo\Bundle\StorageUtilsBundle\Doctrine\MongoDBODM\Collections\ReferencedCollectionFactory instance.
     */
    protected function getAkeneoStorageUtils_Factory_ReferencedCollectionService()
    {
        return $this->services['akeneo_storage_utils.factory.referenced_collection'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\MongoDBODM\Collections\ReferencedCollectionFactory($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance.
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\FileCacheReader(new \Doctrine\Common\Annotations\AnnotationReader(), (__DIR__.'/annotations'), true);
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('assetic.asset_factory');
        $b = $this->get('templating.loader');

        $c = new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config'));

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($a, array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig')), $c, true), 'php' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Symfony\Bundle\AsseticBundle\Factory\Loader\AsseticHelperFormulaLoader($a), $c, true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', (dirname(dirname(__DIR__)).'/Resources/OroAsseticBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', (dirname(dirname(__DIR__)).'/Resources/OroAsseticBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', (dirname(dirname(__DIR__)).'/Resources/OroUIBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', (dirname(dirname(__DIR__)).'/Resources/OroUIBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', (dirname(dirname(__DIR__)).'/Resources/OroUserBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', (dirname(dirname(__DIR__)).'/Resources/OroUserBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', (dirname(dirname(__DIR__)).'/Resources/OroFilterBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', (dirname(dirname(__DIR__)).'/Resources/OroFilterBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', (dirname(dirname(__DIR__)).'/Resources/OroNavigationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', (dirname(dirname(__DIR__)).'/Resources/OroNavigationBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', (dirname(dirname(__DIR__)).'/Resources/OroWindowsBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', (dirname(dirname(__DIR__)).'/Resources/OroWindowsBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', (dirname(dirname(__DIR__)).'/Resources/OroEntityExtendBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', (dirname(dirname(__DIR__)).'/Resources/OroEntityExtendBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', (dirname(dirname(__DIR__)).'/Resources/OroSecurityBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', (dirname(dirname(__DIR__)).'/Resources/OroSecurityBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimUIBundle', (dirname(dirname(__DIR__)).'/Resources/PimUIBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimUIBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimUIBundle', (dirname(dirname(__DIR__)).'/Resources/PimUIBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimUIBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimCatalogBundle', (dirname(dirname(__DIR__)).'/Resources/PimCatalogBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimCatalogBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimCatalogBundle', (dirname(dirname(__DIR__)).'/Resources/PimCatalogBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimCatalogBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimEnrichBundle', (dirname(dirname(__DIR__)).'/Resources/PimEnrichBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimEnrichBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimEnrichBundle', (dirname(dirname(__DIR__)).'/Resources/PimEnrichBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimEnrichBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimNotificationBundle', (dirname(dirname(__DIR__)).'/Resources/PimNotificationBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimNotificationBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimNotificationBundle', (dirname(dirname(__DIR__)).'/Resources/PimNotificationBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'PimNotificationBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', (dirname(dirname(__DIR__)).'/Resources/OroDataGridBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', (dirname(dirname(__DIR__)).'/Resources/OroDataGridBundle/views'), '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views'), '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, '', (dirname(dirname(__DIR__)).'/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, '', (dirname(dirname(__DIR__)).'/Resources/views'), '/\\.[^.]+\\.php$/'), 'php');

        return $instance;
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this->services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /**
     * Gets the 'assetic.filter.lessphp' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\LessphpFilter A Assetic\Filter\LessphpFilter instance.
     */
    protected function getAssetic_Filter_LessphpService()
    {
        require_once (dirname(dirname(__DIR__)).'/../vendor/leafo/lessphp/lessc.inc.php');

        $this->services['assetic.filter.lessphp'] = $instance = new \Assetic\Filter\LessphpFilter();

        $instance->setPresets(array());
        $instance->setLoadPaths(array());
        $instance->setFormatter(NULL);
        $instance->setPreserveComments(NULL);

        return $instance;
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('lessphp' => 'assetic.filter.lessphp', 'cssrewrite' => 'assetic.filter.cssrewrite'));
    }

    /**
     * Gets the 'assetic.helper.static' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper A Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper instance.
     * 
     * @throws InactiveScopeException when the 'assetic.helper.static' service is requested while the 'request' scope is not active
     */
    protected function getAssetic_Helper_StaticService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('assetic.helper.static', 'request');
        }

        return $this->services['assetic.helper.static'] = $this->scopedServices['request']['assetic.helper.static'] = new \Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper($this->get('templating.helper.assets'), $this->get('assetic.asset_factory'));
    }

    /**
     * Gets the 'besimple.soap.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\Cache A BeSimple\SoapBundle\Cache instance.
     */
    protected function getBesimple_Soap_CacheService()
    {
        return $this->services['besimple.soap.cache'] = new \BeSimple\SoapBundle\Cache(true, 1, (__DIR__.'/besimple/soap/php'), 86400, 5);
    }

    /**
     * Gets the 'besimple.soap.context.soap' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\WebServiceContext A BeSimple\SoapBundle\WebServiceContext instance.
     */
    protected function getBesimple_Soap_Context_SoapService()
    {
        return $this->services['besimple.soap.context.soap'] = new \BeSimple\SoapBundle\WebServiceContext($this->get('besimple.soap.definition.loader'), $this->get('besimple.soap.converter.collection'), array('cache_dir' => (__DIR__.'/besimple/soap'), 'debug' => true, 'cache_type' => NULL, 'binder_request_header_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestHeaderMessageBinder', 'binder_request_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestMessageBinder', 'binder_response_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralResponseMessageBinder', 'wsdl_stylesheet' => NULL, 'namespace' => 'http://symfony.loc/Api/1.0/', 'resource' => (dirname(dirname(__DIR__)).'/../app/config/soap.yml'), 'resource_type' => 'yml', 'name' => 'soap'), $this->get('besimple.soap.cache'));
    }

    /**
     * Gets the 'besimple.soap.converter.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapCommon\Converter\TypeConverterCollection A BeSimple\SoapCommon\Converter\TypeConverterCollection instance.
     */
    protected function getBesimple_Soap_Converter_CollectionService()
    {
        $this->services['besimple.soap.converter.collection'] = $instance = new \BeSimple\SoapCommon\Converter\TypeConverterCollection();

        $instance->add(new \BeSimple\SoapCommon\Converter\DateTimeTypeConverter());
        $instance->add(new \BeSimple\SoapCommon\Converter\DateTypeConverter());

        return $instance;
    }

    /**
     * Gets the 'besimple.soap.definition.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Config\Loader\DelegatingLoader A Symfony\Component\Config\Loader\DelegatingLoader instance.
     */
    protected function getBesimple_Soap_Definition_LoaderService()
    {
        $a = $this->get('annotation_reader');
        $b = $this->get('besimple.soap.type.repository');

        $c = new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationClassLoader($a, $b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationFileLoader($this->get('file_locator'), $c));
        $d->addLoader($c);
        $d->addLoader(new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationComplexTypeLoader($a, $b));

        return $this->services['besimple.soap.definition.loader'] = new \Symfony\Component\Config\Loader\DelegatingLoader($d);
    }

    /**
     * Gets the 'besimple.soap.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\EventListener\SoapExceptionListener A BeSimple\SoapBundle\EventListener\SoapExceptionListener instance.
     */
    protected function getBesimple_Soap_ExceptionListenerService()
    {
        return $this->services['besimple.soap.exception_listener'] = new \BeSimple\SoapBundle\EventListener\SoapExceptionListener($this, 'BeSimpleSoapBundle:SoapWebService:exception', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'besimple.soap.request_format.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\EventListener\RequestFormatListener A BeSimple\SoapBundle\EventListener\RequestFormatListener instance.
     */
    protected function getBesimple_Soap_RequestFormat_ListenerService()
    {
        return $this->services['besimple.soap.request_format.listener'] = new \BeSimple\SoapBundle\EventListener\RequestFormatListener();
    }

    /**
     * Gets the 'besimple.soap.response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\Soap\SoapResponse A BeSimple\SoapBundle\Soap\SoapResponse instance.
     */
    protected function getBesimple_Soap_ResponseService()
    {
        return $this->services['besimple.soap.response'] = new \BeSimple\SoapBundle\Soap\SoapResponse();
    }

    /**
     * Gets the 'besimple.soap.response.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapBundle\EventListener\SoapResponseListener A BeSimple\SoapBundle\EventListener\SoapResponseListener instance.
     */
    protected function getBesimple_Soap_Response_ListenerService()
    {
        return $this->services['besimple.soap.response.listener'] = new \BeSimple\SoapBundle\EventListener\SoapResponseListener($this->get('besimple.soap.response'));
    }

    /**
     * Gets the 'besimple.soap.type.repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \BeSimple\SoapCommon\Definition\Type\TypeRepository A BeSimple\SoapCommon\Definition\Type\TypeRepository instance.
     */
    protected function getBesimple_Soap_Type_RepositoryService()
    {
        $this->services['besimple.soap.type.repository'] = $instance = new \BeSimple\SoapCommon\Definition\Type\TypeRepository(new \BeSimple\SoapServer\Classmap());

        $instance->addXmlNamespace('xsd', 'http://www.w3.org/2001/XMLSchema');
        $instance->addType('string', 'xsd:string');
        $instance->addType('boolean', 'xsd:boolean');
        $instance->addType('int', 'xsd:int');
        $instance->addType('float', 'xsd:float');
        $instance->addType('date', 'xsd:date');
        $instance->addType('dateTime', 'xsd:dateTime');

        return $instance;
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => $this->get('liip_imagine.cache.clearer'), 1 => new \Oro\Bundle\EmailBundle\Cache\EntityCacheClearer((dirname(dirname(__DIR__)).'/emails'), 'OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy'), 2 => new \Oro\Bundle\SecurityBundle\Cache\OwnershipMetadataCacheClearer($this->get('oro_security.owner.ownership_metadata_provider')), 3 => new \Oro\Bundle\SecurityBundle\Cache\AclAnnotationCacheClearer($this->get('oro_security.acl.annotation_provider')), 4 => new \Oro\Bundle\SecurityBundle\Cache\ActionMetadataCacheClearer($this->get('oro_security.action_metadata_provider')), 5 => new \Oro\Bundle\SecurityBundle\Cache\EntitySecurityMetadataCacheClearer($this->get('oro_security.entity_security_metadata_provider')), 6 => new \Oro\Bundle\SecurityBundle\Cache\OwnerTreeCacheCleaner($this->get('oro_security.ownership_tree_provider'))));
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, (dirname(dirname(__DIR__)).'/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Oro\Bundle\EmailBundle\Cache\EntityCacheWarmer($this->get('oro_email.email.owner.provider.storage'), (dirname(dirname(__DIR__)).'/emails'), 'OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy'), 1 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this->get('templating.locator')), 2 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('router')), 4 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c), 5 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this->get('doctrine')), 6 => new \Oro\Bundle\EntityExtendBundle\Cache\EntityCacheWarmer($this->get('oro_entity_extend.tools.dumper')), 7 => new \Oro\Bundle\SecurityBundle\Cache\OwnershipMetadataCacheWarmer($this->get('oro_security.owner.ownership_metadata_provider')), 8 => new \Oro\Bundle\SecurityBundle\Cache\AclAnnotationCacheWarmer($this->get('oro_security.acl.annotation_provider')), 9 => new \Oro\Bundle\SecurityBundle\Cache\ActionMetadataCacheWarmer($this->get('oro_security.action_metadata_provider')), 10 => new \Oro\Bundle\SecurityBundle\Cache\EntitySecurityMetadataCacheWarmer($this->get('oro_security.entity_security_metadata_provider')), 11 => new \Oro\Bundle\SecurityBundle\Cache\OwnerTreeCacheWarmer($this->get('oro_security.ownership_tree_provider')), 12 => $this->get('kernel.cache_warmer.jsformvalidation')));
    }

    /**
     * Gets the 'clank.client_event.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Event\AcmeClientEventListener A JDare\ClankBundle\Event\AcmeClientEventListener instance.
     */
    protected function getClank_ClientEvent_ListenerService()
    {
        return $this->services['clank.client_event.listener'] = new \JDare\ClankBundle\Event\AcmeClientEventListener();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, $this->get('controller_name_converter'), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.deprecation_logger_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener A Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener instance.
     */
    protected function getDebug_DeprecationLoggerListenerService()
    {
        return $this->services['debug.deprecation_logger_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener('deprecation', $this->get('monolog.logger.deprecation', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'debug.emergency_logger_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener A Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener instance.
     */
    protected function getDebug_EmergencyLoggerListenerService()
    {
        return $this->services['debug.emergency_logger_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener('emergency', $this->get('monolog.logger.emergency', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher($this->get('event_dispatcher'), $this->get('debug.stopwatch'), $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setProfiler($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'debug.templating.engine.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine A Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine instance.
     */
    protected function getDebug_Templating_Engine_PhpService()
    {
        $this->services['debug.templating.engine.php'] = $instance = new \Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine($this->get('templating.name_parser'), $this, $this->get('templating.loader'), $this->get('debug.stopwatch'), $this->get('templating.globals'));

        $instance->setCharset('UTF-8');
        $instance->setHelpers(array('slots' => 'templating.helper.slots', 'assets' => 'templating.helper.assets', 'request' => 'templating.helper.request', 'session' => 'templating.helper.session', 'router' => 'templating.helper.router', 'actions' => 'templating.helper.actions', 'code' => 'templating.helper.code', 'translator' => 'templating.helper.translator', 'form' => 'templating.helper.form', 'logout_url' => 'templating.helper.logout_url', 'security' => 'templating.helper.security', 'assetic' => 'assetic.helper.static', 'jms_serializer' => 'jms_serializer.templating.helper.serializer', 'knp_pagination' => 'knp_paginator.templating.helper.pagination', 'imagine' => 'liip_imagine.templating.helper'));

        return $instance;
    }

    /**
     * Gets the 'debug.templating.engine.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine A Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine instance.
     */
    protected function getDebug_Templating_Engine_TwigService()
    {
        $this->services['debug.templating.engine.twig'] = $instance = new \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine($this->get('twig'), $this->get('templating.name_parser'), $this->get('templating.locator'), $this->get('debug.stopwatch'));

        $instance->setDefaultEscapingStrategy(array(0 => $instance, 1 => 'guessDefaultEscapingStrategy'));

        return $instance;
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection', 'report_source' => 'doctrine.dbal.report_source_connection', 'report_target' => 'doctrine.dbal.report_target_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array('datetime' => array('class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateTimeType', 'commented' => true)));
    }

    /**
     * Gets the 'doctrine.dbal.default.wrapped_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PDO A PDO instance.
     */
    protected function getDoctrine_Dbal_Default_WrappedConnectionService()
    {
        return $this->services['doctrine.dbal.default.wrapped_connection'] = $this->get('doctrine.dbal.default_connection')->getWrappedConnection();
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \stdClass A stdClass instance.
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = $this->get('annotation_reader');

        $b = new \Doctrine\DBAL\Logging\LoggerChain();
        $b->addLogger($this->get('doctrine.dbal.logger'));
        $b->addLogger($this->get('doctrine.dbal.logger.profiling.default'));

        $c = new \Doctrine\DBAL\Configuration();
        $c->setSQLLogger($b);

        $d = new \Gedmo\Tree\TreeListener();
        $d->setAnnotationReader($a);

        $e = new \Gedmo\Timestampable\TimestampableListener();
        $e->setAnnotationReader($a);

        $f = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.orm.inject_product_reference'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.localizable'));
        $f->addEventSubscriber($d);
        $f->addEventSubscriber($e);
        $f->addEventSubscriber(new \Oro\Bundle\EmailBundle\EventListener\EntitySubscriber(new \Oro\Bundle\EmailBundle\Entity\Manager\EmailOwnerManager($this->get('oro_email.email.owner.provider.storage'), $this->get('oro_email.email.address.manager'))));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.timestampable'));
        $f->addEventSubscriber($this->get('oro_entity_extend.listener.entity_subscriber'));
        $f->addEventSubscriber($this->get('pim_versioning.event_subscriber.addversion'));
        $f->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.metric_base_values'));
        $f->addEventSubscriber($this->get('oro_dataaudit.listener.entity_subscriber'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.scopable'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.resolve_target_repository'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.outdate_indexed_values'));
        $f->addEventSubscriber($this->get('pim_user.event_subscriber.user_preferences'));
        $f->addEventSubscriber($this->get('pim_translation.listener.add_locale'));
        $f->addEventSubscriber($this->get('pim_catalog.event_subscriber.create_attribute_requirement'));
        $f->addEventSubscriber($this->get('pim_versioning.event_subscriber.timestampable'));
        $f->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $f->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $f->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $f->addEventListener(array(0 => 'postGenerateSchema'), 'security.acl.dbal.schema_listener');
        $f->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $f->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $f->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));
        $f->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'localhost', 'port' => NULL, 'unix_socket' => NULL, 'dbname' => 'pim_foody', 'user' => 'root', 'password' => 'hoang', 'charset' => 'UTF8', 'driverOptions' => array()), $c, $f, array());
    }

    /**
     * Gets the 'doctrine.dbal.report_source_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \stdClass A stdClass instance.
     */
    protected function getDoctrine_Dbal_ReportSourceConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger($this->get('doctrine.dbal.logger'));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.report_source'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.timestampable'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.resolve_target_repository'));
        $c->addEventSubscriber($this->get('pim_versioning.event_subscriber.addversion'));
        $c->addEventSubscriber($this->get('pim_user.event_subscriber.user_preferences'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.orm.inject_product_reference'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.create_attribute_requirement'));
        $c->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.metric_base_values'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.outdate_indexed_values'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.localizable'));
        $c->addEventSubscriber($this->get('pim_translation.listener.add_locale'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.scopable'));
        $c->addEventSubscriber($this->get('pim_versioning.event_subscriber.timestampable'));
        $c->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $c->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $c->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $c->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $c->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));

        return $this->services['doctrine.dbal.report_source_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'localhost', 'port' => NULL, 'unix_socket' => NULL, 'dbname' => 'pim_foody', 'user' => 'root', 'password' => 'hoang', 'charset' => 'UTF8', 'driverOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the 'doctrine.dbal.report_target_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \stdClass A stdClass instance.
     */
    protected function getDoctrine_Dbal_ReportTargetConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger($this->get('doctrine.dbal.logger'));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.report_target'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.timestampable'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.resolve_target_repository'));
        $c->addEventSubscriber($this->get('pim_versioning.event_subscriber.addversion'));
        $c->addEventSubscriber($this->get('pim_user.event_subscriber.user_preferences'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.orm.inject_product_reference'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.create_attribute_requirement'));
        $c->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.metric_base_values'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.outdate_indexed_values'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.localizable'));
        $c->addEventSubscriber($this->get('pim_translation.listener.add_locale'));
        $c->addEventSubscriber($this->get('pim_catalog.event_subscriber.scopable'));
        $c->addEventSubscriber($this->get('pim_versioning.event_subscriber.timestampable'));
        $c->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $c->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $c->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $c->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $c->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));

        return $this->services['doctrine.dbal.report_target_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'localhost', 'port' => NULL, 'unix_socket' => NULL, 'dbname' => 'pim_foody', 'user' => 'root', 'password' => 'hoang', 'charset' => 'UTF8', 'driverOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\ORM\OroEntityManager A Oro\Bundle\EntityBundle\ORM\OroEntityManager instance.
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        $a = $this->get('annotation_reader');

        $b = new \Doctrine\Common\Cache\ArrayCache();
        $b->setNamespace('sf2orm_default_e0f0da8c7c897f6675ad136ae2793749');

        $c = new \Doctrine\Common\Cache\ArrayCache();
        $c->setNamespace('sf2orm_default_e0f0da8c7c897f6675ad136ae2793749');

        $d = new \Doctrine\Common\Cache\ArrayCache();
        $d->setNamespace('sf2orm_default_e0f0da8c7c897f6675ad136ae2793749');

        $e = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Entity'), 1 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Entity'), 2 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Entity'), 3 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Entity'), 4 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Entity'), 5 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Entity'), 6 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Entity'), 7 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Entity'), 8 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Entity'), 9 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Entity'), 10 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Entity'), 11 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/batch-bundle/Akeneo/Bundle/BatchBundle/Entity'), 12 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Entity'), 13 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Entity'), 14 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/TranslationBundle/Entity'), 15 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Entity')));

        $f = new \Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver(array((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/config/doctrine') => 'Pim\\Bundle\\NotificationBundle\\Entity', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/doctrine') => 'Pim\\Bundle\\CatalogBundle\\Entity', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/config/doctrine') => 'Pim\\Bundle\\DataGridBundle\\Entity', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/config/doctrine') => 'Pim\\Bundle\\EnrichBundle\\Entity', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/config/doctrine') => 'Pim\\Bundle\\CommentBundle\\Entity'));
        $f->setGlobalBasename('mapping');

        $g = new \Doctrine\ORM\Mapping\Driver\DriverChain();
        $g->addDriver($e, 'Oro\\Bundle\\ConfigBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\EmailBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\EntityConfigBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\EntityExtendBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\FormBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\ImapBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\NavigationBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\OrganizationBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\UserBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\WindowsBundle\\Entity');
        $g->addDriver($e, 'Oro\\Bundle\\DataAuditBundle\\Entity');
        $g->addDriver($e, 'Akeneo\\Bundle\\BatchBundle\\Entity');
        $g->addDriver($e, 'Pim\\Bundle\\UserBundle\\Entity');
        $g->addDriver($e, 'Pim\\Bundle\\UIBundle\\Entity');
        $g->addDriver($e, 'Pim\\Bundle\\TranslationBundle\\Entity');
        $g->addDriver($e, 'Pim\\Bundle\\ImportExportBundle\\Entity');
        $g->addDriver($f, 'Pim\\Bundle\\NotificationBundle\\Entity');
        $g->addDriver($f, 'Pim\\Bundle\\CatalogBundle\\Entity');
        $g->addDriver($f, 'Pim\\Bundle\\DataGridBundle\\Entity');
        $g->addDriver($f, 'Pim\\Bundle\\EnrichBundle\\Entity');
        $g->addDriver($f, 'Pim\\Bundle\\CommentBundle\\Entity');
        $g->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => (dirname(dirname(__DIR__)).'/emails/OroEmail/Cache/OroEmailBundle/Entity'))), 'OroEmail\\Cache\\OroEmailBundle\\Entity');
        $g->addDriver(new \Doctrine\ORM\Mapping\Driver\YamlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array((__DIR__.'/oro_entities/Extend/Entity') => 'Extend\\Entity'), '.orm.yml')), 'Extend\\Entity');
        $g->addDriver(new \Doctrine\ORM\Mapping\Driver\YamlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/model/doctrine') => 'Pim\\Bundle\\CatalogBundle\\Model'), '.orm.yml')), 'Pim\\Bundle\\CatalogBundle\\Model');
        $g->addDriver(new \Doctrine\ORM\Mapping\Driver\YamlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/VersioningBundle/Resources/config/model/doctrine') => 'Pim\\Bundle\\VersioningBundle\\Model'), '.orm.yml')), 'Pim\\Bundle\\VersioningBundle\\Model');

        $h = new \Doctrine\ORM\Configuration();
        $h->setEntityNamespaces(array('OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\Entity', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\Entity', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\Entity', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\Entity', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\Entity', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\Entity', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\Entity', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\Entity', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\Entity', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\Entity', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\Entity', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\Entity', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\Entity', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\Entity', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\Entity', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\Entity', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\Entity', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\Entity', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\Entity', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\Entity', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\Entity'));
        $h->setMetadataCacheImpl($b);
        $h->setQueryCacheImpl($c);
        $h->setResultCacheImpl($d);
        $h->setMetadataDriverImpl($g);
        $h->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $h->setProxyNamespace('Proxies');
        $h->setAutoGenerateProxyClasses(true);
        $h->setClassMetadataFactoryName('Oro\\Bundle\\EntityExtendBundle\\Mapping\\ExtendClassMetadataFactory');
        $h->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $h->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());

        $this->services['doctrine.orm.default_entity_manager'] = $instance = call_user_func(array('Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager', 'create'), $this->get('doctrine.dbal.default_connection'), $h);

        $instance->setFilterCollection($this->get('oro_entity.orm.sql_filter_collection'));
        $instance->setExtendManager($this->get('oro_entity_extend.extend.extend_manager'));
        $this->get('doctrine.orm.default_manager_configurator')->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance.
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance.
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance.
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this->get('doctrine'));
    }

    /**
     * Gets the 'escape_wsse_authentication.encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder A Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder instance.
     */
    protected function getEscapeWsseAuthentication_EncoderService()
    {
        return $this->services['escape_wsse_authentication.encoder'] = new \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder('sha1', true, 1);
    }

    /**
     * Gets the 'escape_wsse_authentication.encoder.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder A Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder instance.
     */
    protected function getEscapeWsseAuthentication_Encoder_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.encoder.wsse_secured'] = new \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder('sha1', true, 1);
    }

    /**
     * Gets the 'escape_wsse_authentication.entry_point' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint A Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint instance.
     */
    protected function getEscapeWsseAuthentication_EntryPointService()
    {
        return $this->services['escape_wsse_authentication.entry_point'] = new \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint($this->get('logger'), NULL, 'UsernameToken');
    }

    /**
     * Gets the 'escape_wsse_authentication.entry_point.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint A Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint instance.
     */
    protected function getEscapeWsseAuthentication_EntryPoint_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.entry_point.wsse_secured'] = new \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint($this->get('logger'), 'Secured API', 'UsernameToken');
    }

    /**
     * Gets the 'escape_wsse_authentication.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Security\WsseAuthListener A Oro\Bundle\UserBundle\Security\WsseAuthListener instance.
     */
    protected function getEscapeWsseAuthentication_ListenerService()
    {
        return $this->services['escape_wsse_authentication.listener'] = new \Oro\Bundle\UserBundle\Security\WsseAuthListener($this->get('security.context'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'escape_wsse_authentication.listener.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Security\WsseAuthListener A Oro\Bundle\UserBundle\Security\WsseAuthListener instance.
     */
    protected function getEscapeWsseAuthentication_Listener_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.listener.wsse_secured'] = new \Oro\Bundle\UserBundle\Security\WsseAuthListener($this->get('security.context'), $this->get('security.authentication.manager'), $this->get('escape_wsse_authentication.entry_point.wsse_secured'));
    }

    /**
     * Gets the 'escape_wsse_authentication.nonce_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getEscapeWsseAuthentication_NonceCacheService()
    {
        return $this->services['escape_wsse_authentication.nonce_cache'] = new \Doctrine\Common\Cache\PhpFileCache((__DIR__.'/security/nonces'));
    }

    /**
     * Gets the 'escape_wsse_authentication.nonce_cache.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getEscapeWsseAuthentication_NonceCache_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.nonce_cache.wsse_secured'] = new \Doctrine\Common\Cache\PhpFileCache((__DIR__.'/security/nonces'));
    }

    /**
     * Gets the 'escape_wsse_authentication.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Security\WsseUserProvider A Oro\Bundle\UserBundle\Security\WsseUserProvider instance.
     */
    protected function getEscapeWsseAuthentication_ProviderService()
    {
        return $this->services['escape_wsse_authentication.provider'] = new \Oro\Bundle\UserBundle\Security\WsseUserProvider(NULL, NULL, NULL, 300, '/^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/');
    }

    /**
     * Gets the 'escape_wsse_authentication.provider.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Security\WsseUserProvider A Oro\Bundle\UserBundle\Security\WsseUserProvider instance.
     */
    protected function getEscapeWsseAuthentication_Provider_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.provider.wsse_secured'] = new \Oro\Bundle\UserBundle\Security\WsseUserProvider($this->get('security.user.provider.concrete.chain_provider'), $this->get('escape_wsse_authentication.encoder.wsse_secured'), $this->get('escape_wsse_authentication.nonce_cache.wsse_secured'), 3600, '/^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/');
    }

    /**
     * Gets the 'event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher A Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher instance.
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this);

        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.paginate', 1 => 'before'), 0);
        $instance->addListenerService('knp_pager.pagination', array(0 => 'knp_paginator.subscriber.paginate', 1 => 'pagination'), 0);
        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.sortable', 1 => 'before'), 1);
        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.filtration', 1 => 'before'), 1);
        $instance->addListenerService('knp_pager.pagination', array(0 => 'knp_paginator.subscriber.sliding_pagination', 1 => 'pagination'), 1);
        $instance->addListenerService('kernel.controller', array(0 => 'data_collector.router', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'monolog.handler.firephp', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'besimple.soap.request_format.listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.view', array(0 => 'besimple.soap.response.listener', 1 => 'onKernelView'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.body_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'fos_rest.format_listener', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'knp_menu.listener.voters', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'knp_paginator.subscriber.sliding_pagination', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'lexik_maintenance.listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'nelmio_api_doc.event_listener.request', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.view', array(0 => 'oro_ui.view.listener', 1 => 'onKernelView'), 0);
        $instance->addListenerService('oro_menu.configure.application_menu', array(0 => 'oro_entity.listener.navigation_listener', 1 => 'onNavigationConfigure'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.audit-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.auditfield-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.auditfield-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildBefore'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'oro_help.listener.help_link', 1 => 'onKernelController'), -200);
        $instance->addListenerService('kernel.response', array(0 => 'kernel.listener.nav_history_response', 1 => 'onResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'kernel.listener.title_service.request_listener', 1 => 'onKernelRequest'), -255);
        $instance->addListenerService('kernel.response', array(0 => 'kernel.listener.hashnav_response', 1 => 'onResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'oro_navigation.twig.hash_nav_extension', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('entity_form.render.before', array(0 => 'oro_organization.form.listener', 1 => 'addOwnerField'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.bu-update-users-grid', array(0 => 'oro_organization.event_listener.bu_update_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.bu-view-users-grid', array(0 => 'oro_organization.event_listener.bu_view_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'oro_security.listener.controller', 1 => 'onKernelController'), -1);
        $instance->addListenerService('security.interactive_login', array(0 => 'oro_user.security.login', 1 => 'onLogin'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.users-email-grid', array(0 => 'oro_user.event_listener.user_email_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.role-users-grid', array(0 => 'oro_user.event_listener.role_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.group-users-grid', array(0 => 'oro_user.event_listener.group_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'oro_dataaudit.listener.kernel_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.audit-history-grid', array(0 => 'oro_dataaudit.event_listener.dataaudit_history_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('jsfv.pre_process', array(0 => 'jsfv.validation_groups_listener', 1 => 'onJsfvPreProcess'), 0);
        $instance->addListenerService('jsfv.post_process', array(0 => 'jsfv.repeated_field_listener', 1 => 'onJsfvPostProcess'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.pim-role-user-grid', array(0 => 'pim_user.event_listener.role_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.pim-group-user-grid', array(0 => 'pim_user.event_listener.group_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before', array(0 => 'pim_datagrid.event_listener.configure_sorters_listener', 1 => 'onBuildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.export-profile-grid', array(0 => 'pim_import_export.event_listener.inject_job_type', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.import-profile-grid', array(0 => 'pim_import_export.event_listener.inject_job_type', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.export-execution-grid', array(0 => 'pim_import_export.event_listener.inject_job_type', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.import-execution-grid', array(0 => 'pim_import_export.event_listener.inject_job_type', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'pim_versioning.event_subscriber.adduser', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after', array(0 => 'pim_enrich.event_listener.add_locale_code_to_grid', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.product-grid', array(0 => 'pim_enrich.event_listener.product_grid_before_listener', 1 => 'buildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.product-grid', array(0 => 'pim_enrich.event_listener.product_grid_after_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.product-group-grid', array(0 => 'pim_enrich.event_listener.product_group_grid_before_listener', 1 => 'buildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.product-group-grid', array(0 => 'pim_enrich.event_listener.product_group_grid_after_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.product-variant-group-grid', array(0 => 'pim_enrich.event_listener.product_variant_group_grid_before_listener', 1 => 'buildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.product-variant-group-grid', array(0 => 'pim_enrich.event_listener.product_variant_group_grid_after_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.group-grid', array(0 => 'pim_enrich.event_listener.group_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.variant-group-grid', array(0 => 'pim_enrich.event_listener.variant_group_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.association-product-grid', array(0 => 'pim_enrich.event_listener.association_product_grid_before_listener', 1 => 'buildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.association-product-grid', array(0 => 'pim_enrich.event_listener.association_product_grid_after_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.association-group-grid', array(0 => 'pim_enrich.event_listener.association_group_grid_after_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.history-grid', array(0 => 'pim_enrich.event_listener.history_grid_listener', 1 => 'onBuildBefore'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.product-history-grid', array(0 => 'pim_enrich.event_listener.history_grid_listener', 1 => 'onBuildBefore'), 0);
        $instance->addListenerService('clank.client.connected', array(0 => 'clank.client_event.listener', 1 => 'onClientConnect'), 0);
        $instance->addListenerService('clank.client.disconnected', array(0 => 'clank.client_event.listener', 1 => 'onClientDisconnect'), 0);
        $instance->addListenerService('clank.client.error', array(0 => 'clank.client_event.listener', 1 => 'onClientError'), 0);
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance->addSubscriberService('debug.emergency_logger_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener');
        $instance->addSubscriberService('debug.deprecation_logger_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance->addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance->addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance->addSubscriberService('data_collector.request', 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance->addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\CacheListener');
        $instance->addSubscriberService('besimple.soap.exception_listener', 'BeSimple\\SoapBundle\\EventListener\\SoapExceptionListener');
        $instance->addSubscriberService('stof_doctrine_extensions.event_listener.locale', 'Pim\\Bundle\\EnrichBundle\\EventListener\\UserContextListener');
        $instance->addSubscriberService('oro_email.listener.config_subscriber', 'Oro\\Bundle\\EmailBundle\\EventListener\\ConfigSubscriber');
        $instance->addSubscriberService('oro_entity.owner.entity_config_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\EntityConfigSubscriber');
        $instance->addSubscriberService('oro_entity.event_listener.custom_entity_grid_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');
        $instance->addSubscriberService('oro_entity.event_listener.relation_entity_grid_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\RelationEntityGridListener');
        $instance->addSubscriberService('oro_entity_config.event_listener.entityconfig_grid_listener', 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');
        $instance->addSubscriberService('oro_entity_config.event_listener.entityfields_grid_listener', 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');
        $instance->addSubscriberService('oro_entity_extend.listener.config_subscriber', 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\ConfigSubscriber');
        $instance->addSubscriberService('oro_locale.locale_listener', 'Oro\\Bundle\\LocaleBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('oro_security.owner.ownership_config_subscriber', 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnershipConfigSubscriber');
        $instance->addSubscriberService('oro_security.entity_security_config_subscriber', 'Oro\\Bundle\\SecurityBundle\\EventListener\\EntitySecurityMetadataConfigSubscriber');
        $instance->addSubscriberService('oro_security.listener.config_subscriber', 'Oro\\Bundle\\SecurityBundle\\EventListener\\ConfigSubscriber');
        $instance->addSubscriberService('akeneo_batch.logger_subscriber', 'Akeneo\\Bundle\\BatchBundle\\EventListener\\LoggerSubscriber');
        $instance->addSubscriberService('akeneo_batch.notification_subscriber', 'Akeneo\\Bundle\\BatchBundle\\EventListener\\NotificationSubscriber');
        $instance->addSubscriberService('akeneo_batch.set_job_execution_log_file_subscriber', 'Akeneo\\Bundle\\BatchBundle\\EventListener\\SetJobExecutionLogFileSubscriber');
        $instance->addSubscriberService('pim_user.event_subscriber.group', 'Pim\\Bundle\\UserBundle\\EventSubscriber\\GroupSubscriber');
        $instance->addSubscriberService('pim_notification.event_subscriber.job_execution_notifier', 'Pim\\Bundle\\NotificationBundle\\EventSubscriber\\JobExecutionNotifier');
        $instance->addSubscriberService('pim_catalog.event_subscriber.initialize_values', 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\InitializeValuesSubscriber');
        $instance->addSubscriberService('pim_catalog.event_subscriber.category.check_channels', 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\Category\\CheckChannelsOnDeletionSubscriber');
        $instance->addSubscriberService('pim_versioning.event_subscriber.addcontext', 'Pim\\Bundle\\VersioningBundle\\EventSubscriber\\AddContextSubscriber');
        $instance->addSubscriberService('pim_enrich.event_listener.request', 'Pim\\Bundle\\EnrichBundle\\EventListener\\RequestListener');
        $instance->addSubscriberService('pim_enrich.event_subscriber.translate_flash_messages', 'Pim\\Bundle\\EnrichBundle\\EventListener\\TranslateFlashMessagesSubscriber');
        $instance->addSubscriberService('pim_base_connector.event_listener.archivist', 'Pim\\Bundle\\BaseConnectorBundle\\EventListener\\JobExecutionArchivist');
        $instance->addSubscriberService('pim_base_connector.event_listener.invalid_items_collector', 'Pim\\Bundle\\BaseConnectorBundle\\EventListener\\InvalidItemsCollector');
        $instance->addSubscriberService('web_profiler.debug_toolbar', 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener');

        return $instance;
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), (dirname(dirname(__DIR__)).'/Resources'));
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'foody_import_product.processor.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Foody\ImportProductBundle\Processor\ProductProcessor A Foody\ImportProductBundle\Processor\ProductProcessor instance.
     */
    protected function getFoodyImportProduct_Processor_ProductService()
    {
        return $this->services['foody_import_product.processor.product'] = new \Foody\ImportProductBundle\Processor\ProductProcessor($this->get('pim_catalog.manager.product'), $this->get('pim_catalog.updater.product'));
    }

    /**
     * Gets the 'foody_import_product.reader.bdd_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Foody\ImportProductBundle\Reader\ProductReader A Foody\ImportProductBundle\Reader\ProductReader instance.
     */
    protected function getFoodyImportProduct_Reader_BddProductService()
    {
        return $this->services['foody_import_product.reader.bdd_product'] = new \Foody\ImportProductBundle\Reader\ProductReader();
    }

    /**
     * Gets the 'foody_import_product.writer.orm_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Foody\ImportProductBundle\Writer\ORM\ProductWriter A Foody\ImportProductBundle\Writer\ORM\ProductWriter instance.
     */
    protected function getFoodyImportProduct_Writer_OrmProductService()
    {
        return $this->services['foody_import_product.writer.orm_product'] = new \Foody\ImportProductBundle\Writer\ORM\ProductWriter($this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider A Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider instance.
     */
    protected function getForm_CsrfProviderService()
    {
        return $this->services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider($this->get('session'), 'ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('form' => 'form.type.form', 'birthday' => 'form.type.birthday', 'checkbox' => 'form.type.checkbox', 'choice' => 'form.type.choice', 'collection' => 'form.type.collection', 'country' => 'form.type.country', 'date' => 'form.type.date', 'datetime' => 'form.type.datetime', 'email' => 'form.type.email', 'file' => 'form.type.file', 'hidden' => 'form.type.hidden', 'integer' => 'form.type.integer', 'language' => 'form.type.language', 'locale' => 'form.type.locale', 'money' => 'form.type.money', 'number' => 'form.type.number', 'password' => 'form.type.password', 'percent' => 'form.type.percent', 'radio' => 'form.type.radio', 'repeated' => 'form.type.repeated', 'search' => 'form.type.search', 'textarea' => 'form.type.textarea', 'text' => 'form.type.text', 'time' => 'form.type.time', 'timezone' => 'form.type.timezone', 'url' => 'form.type.url', 'button' => 'form.type.button', 'submit' => 'form.type.submit', 'reset' => 'form.type.reset', 'currency' => 'form.type.currency', 'entity' => 'form.type.entity', 'a2lix_translations' => 'a2lix_translation_form.default.type.translations', 'a2lix_translationsFields' => 'a2lix_translation_form.default.type.translationsfields', 'a2lix_translationsForms' => 'a2lix_translation_form.default.type.translationsforms', 'a2lix_translationsLocalesSelector' => 'a2lix_translation_form.default.type.translationslocalesselector', 'genemu_recaptcha' => 'genemu.form.core.type.recaptcha', 'genemu_captcha' => 'genemu.form.core.type.captcha', 'genemu_plain' => 'genemu.form.core.type.plain', 'genemu_tinymce' => 'genemu.form.core.type.tinymce', 'genemu_ajaxmodel' => 'genemu.form.model.type.ajaxmodel', 'genemu_jquerycolor' => 'genemu.form.jquery.type.color', 'genemu_jquerydate' => 'genemu.form.jquery.type.date', 'genemu_jqueryfile' => 'genemu.form.jquery.type.file', 'genemu_jquerygeolocation' => 'genemu.form.jquery.type.geolocation', 'genemu_jqueryimage' => 'genemu.form.jquery.type.image', 'genemu_jqueryrating' => 'genemu.form.jquery.type.rating', 'genemu_jqueryslider' => 'genemu.form.jquery.type.slider', 'genemu_ajaxentity' => 'genemu.form.entity.type.ajaxentity', 'genemu_jqueryautocomplete_text' => 'genemu.form.jquery.type.autocomplete.text', 'genemu_jqueryautocomplete_entity' => 'genemu.form.jquery.type.autocomplete.entity', 'genemu_jqueryautocomplete_document' => 'genemu.form.jquery.type.autocomplete.document', 'genemu_jqueryselect2_choice' => 'genemu.form.jquery.type.select2.choice', 'genemu_jqueryselect2_language' => 'genemu.form.jquery.type.select2.language', 'genemu_jqueryselect2_country' => 'genemu.form.jquery.type.select2.country', 'genemu_jqueryselect2_timezone' => 'genemu.form.jquery.type.select2.timezone', 'genemu_jqueryselect2_locale' => 'genemu.form.jquery.type.select2.locale', 'genemu_jqueryselect2_entity' => 'genemu.form.jquery.type.select2.entity', 'genemu_jqueryselect2_document' => 'genemu.form.jquery.type.select2.document', 'genemu_jqueryselect2_model' => 'genemu.form.jquery.type.select2.model', 'genemu_jqueryselect2_currency' => 'genemu.form.jquery.type.select2.currency', 'genemu_jqueryselect2_hidden' => 'genemu.form.jquery.type.select2.hidden', 'genemu_jquerychosen_choice' => 'genemu.form.jquery.type.chosen.choice', 'genemu_jquerychosen_language' => 'genemu.form.jquery.type.chosen.language', 'genemu_jquerychosen_country' => 'genemu.form.jquery.type.chosen.country', 'genemu_jquerychosen_timezone' => 'genemu.form.jquery.type.chosen.timezone', 'genemu_jquerychosen_locale' => 'genemu.form.jquery.type.chosen.locale', 'genemu_jquerychosen_entity' => 'genemu.form.jquery.type.chosen.entity', 'genemu_jquerychosen_document' => 'genemu.form.jquery.type.chosen.document', 'genemu_jquerychosen_model' => 'genemu.form.jquery.type.chosen.model', 'genemu_jquerychosen_currency' => 'genemu.form.jquery.type.chosen.currency', 'genemu_jqueryautocompleter_choice' => 'genemu.form.jquery.type.autocompleter.choice', 'genemu_jqueryautocompleter_language' => 'genemu.form.jquery.type.autocompleter.language', 'genemu_jqueryautocompleter_country' => 'genemu.form.jquery.type.autocompleter.country', 'genemu_jqueryautocompleter_timezone' => 'genemu.form.jquery.type.autocompleter.timezone', 'genemu_jqueryautocompleter_locale' => 'genemu.form.jquery.type.autocompleter.locale', 'genemu_jqueryautocompleter_entity' => 'genemu.form.jquery.type.autocompleter.entity', 'genemu_jqueryautocompleter_document' => 'genemu.form.jquery.type.autocompleter.document', 'genemu_jqueryautocompleter_model' => 'genemu.form.jquery.type.autocompleter.model', 'genemu_jqueryautocompleter_currency' => 'genemu.form.jquery.type.autocompleter.currency', 'genemu_jquerytokeninput_choice' => 'genemu.form.jquery.type.tokeninput.choice', 'genemu_jquerytokeninput_language' => 'genemu.form.jquery.type.tokeninput.language', 'genemu_jquerytokeninput_country' => 'genemu.form.jquery.type.tokeninput.country', 'genemu_jquerytokeninput_timezone' => 'genemu.form.jquery.type.tokeninput.timezone', 'genemu_jquerytokeninput_locale' => 'genemu.form.jquery.type.tokeninput.locale', 'genemu_jquerytokeninput_entity' => 'genemu.form.jquery.type.tokeninput.entity', 'genemu_jquerytokeninput_document' => 'genemu.form.jquery.type.tokeninput.document', 'genemu_jquerytokeninput_model' => 'genemu.form.jquery.type.tokeninput.model', 'genemu_jquerytokeninput_currency' => 'genemu.form.jquery.type.tokeninput.currency', 'liip_imagine_image' => 'liip_imagine.form.type.image', 'oro_config_form_type' => 'oro_config.type.form', 'oro_config_form_field_type' => 'oro_config.type.form_field', 'oro_config_checkbox' => 'oro_config.type.config_checkbox', 'oro_email_emailtemplate' => 'oro_email.form.type.emailtemplate', 'oro_email_emailtemplate_translatation' => 'oro_email.form.type.emailtemplate_translation', 'oro_email_template_list' => 'oro_email.form.type.emailtemplate_select', 'oro_email_emailtemplate_api' => 'oro_email.form.type.emailtemplate.api', 'oro_email_email' => 'oro_email.form.type.email', 'oro_email_email_address' => 'oro_email.form.type.email_address', 'custom_entity_type' => 'oro_entity.form.type.custom_entity', 'oro_entity_choice' => 'oro_entity.form.type.entity_choice', 'oro_entity_field_choice' => 'oro_entity.form.type.entity_field_choice', 'oro_option_select' => 'oro_entity.form.type.option_select', 'oro_entity_select' => 'oro_entity.form.type.entity_select', 'oro_entity_config_type' => 'oro_entity_config.type.config', 'oro_entity_extend_field_type' => 'oro_entity_extend.type.field', 'oro_entity_relation_type' => 'oro_entity_extend.type.relation', 'oro_entity_option_set' => 'oro_entity_extend.type.option_set', 'oro_entity_option_set_collection' => 'oro_entity_extend.type.option_set_collection', 'oro_type_date_range' => 'oro_filter.form.type.date_range', 'oro_type_datetime_range' => 'oro_filter.form.type.datetime_range', 'oro_type_filter' => 'oro_filter.form.type.filter', 'oro_type_choice_filter' => 'oro_filter.form.type.filter.choice', 'oro_type_text_filter' => 'oro_filter.form.type.filter.text', 'oro_type_number_filter' => 'oro_filter.form.type.filter.number', 'oro_type_date_range_filter' => 'oro_filter.form.type.filter.date_range', 'oro_type_datetime_range_filter' => 'oro_filter.form.type.filter.datetime_range', 'oro_type_boolean_filter' => 'oro_filter.form.type.filter.boolean', 'oro_type_entity_filter' => 'oro_filter.form.type.filter.entity', 'oro_type_selectrow_filter' => 'oro_filter.form.type.filter.selectrow', 'oro_date' => 'oro_form.type.date', 'oro_datetime' => 'oro_form.type.datetime', 'oro_money' => 'oro_form.type.money', 'oro_icon_select' => 'oro_form.type.icon', 'oro_entity_identifier' => 'oro_form.type.entity_identifier', 'oro_jqueryselect2_hidden' => 'oro_form.type.jqueryselect2_hidden', 'oro_multiple_entity' => 'oro_form.type.multiple_entity', 'oro_collection' => 'oro_form.type.collection', 'oro_imap_configuration' => 'oro_imap.form.type.configuration', 'oro_installer_configuration' => 'oro_installer.form.type.configuration', 'oro_installer_configuration_database' => 'oro_installer.form.type.configuration.database', 'oro_installer_configuration_mailer' => 'oro_installer.form.type.configuration.mailer', 'oro_installer_configuration_system' => 'oro_installer.form.type.configuration.system', 'oro_installer_configuration_websocket' => 'oro_installer.form.type.configuration.websocket', 'oro_installer_setup' => 'oro_installer.form.type.setup', 'oro_name_format' => 'oro_locale.form.type.name_format', 'oro_locale_country' => 'oro_locale.form.type.country', 'oro_currency' => 'oro_locale.form.type.currency', 'oro_locale' => 'oro_locale.form.type.locale', 'oro_locale_timezone' => 'oro_locale.form.type.timezone', 'pagestate' => 'oro_navigation.form.type.pagestate', 'oro_business_unit' => 'oro_organization.form.type.business_unit', 'business_unit' => 'oro_organization.form.type.business_unit.api', 'oro_type_choice_ownership_type' => 'oro_organization.form.type.ownership_type', 'oro_business_unit_tree_select' => 'oro_organization.form.type.business_unit_tree_select_type', 'oro_business_unit_select' => 'oro_organization.form.type.business_unit_select', 'oro_acl_access_level_selector' => 'oro_security.form.type.oro_acl_access_level_selector', 'oro_acl_label' => 'oro_security.form.type.object_label_type', 'translatable_entity' => 'oro_translation.form.type.translatable_entity', 'genemu_jqueryselect2_translatable_entity' => 'oro_translation.form.type.jqueryselect2_translatable_entity', 'oro_user_user' => 'oro_user.form.type.user', 'user' => 'oro_user.form.type.user.api', 'oro_change_password' => 'oro_user.form.type.change_password', 'oro_user_email' => 'oro_user.form.type.email', 'role' => 'oro_user.form.type.role.api', 'oro_user_group' => 'oro_user.form.type.group', 'group' => 'oro_user.form.type.group.api', 'oro_user_reset' => 'oro_user.form.type.reset', 'oro_user_status' => 'oro_user.form.type.status', 'oro_user_select' => 'oro_user.form.type.user_select', 'oro_user_multiselect' => 'oro_user.form.type.user_multiselect', 'oro_gender' => 'oro_user.form.type.gender', 'pim_type_scope_filter' => 'pim_filter.form.type.filter.scope', 'pim_type_category_filter' => 'pim_filter.form.type.filter.category', 'pim_type_metric_filter' => 'pim_filter.form.type.filter.metric', 'pim_type_price_filter' => 'pim_filter.form.type.filter.price', 'pim_type_ajax_choice_filter' => 'pim_filter.form.type.filter.ajax_choice', 'pim_type_category' => 'pim_filter.form.type.category', 'pim_type_boolean_filter' => 'pim_filter.form.type.boolean', 'oro_acl_collection' => 'pim_user.form.type.acl_collection', 'pim_acl_access_level_selector' => 'pim_user.form.type.acl_access_level_selector', 'switch' => 'pim_ui.form.type.switch', 'pim_number' => 'pim_ui.form.type.number', 'pim_ajax_entity' => 'pim_ui.form.type.ajax_entity', 'pim_datagrid_view' => 'pim_datagrid.form.type.datagrid_view', 'pim_translatable_field' => 'pim_translation.form.type.translatable_field', 'pim_import_export_job_instance' => 'pim_import_export.form.type.job_instance', 'pim_import_export_job_configuration' => 'pim_import_export.form.type.job_configuration', 'pim_import_export_step_configuration' => 'pim_import_export.form.type.step_configuration', 'pim_import_export_step_element_configuration' => 'pim_import_export.form.type.step_element_configuration', 'pim_product' => 'pim_enrich.form.type.product', 'pim_enrich_product_template' => 'pim_enrich.form.type.product_template', 'pim_product_edit' => 'pim_enrich.form.type.product_edit', 'pim_product_create' => 'pim_enrich.form.type.product_create', 'pim_product_value' => 'pim_enrich.form.type.product_value', 'pim_enrich_attribute' => 'pim_enrich.form.type.attribute', 'pim_enrich_attribute_option' => 'pim_enrich.form.type.attribute_option', 'pim_enrich_attribute_option_value' => 'pim_enrich.form.type.attribute_option_value', 'pim_attribute_option_create' => 'pim_enrich.form.type.attribute_option_create', 'pim_enrich_attribute_group' => 'pim_enrich.form.type.attribute_group', 'pim_enrich_family' => 'pim_enrich.form.type.family', 'pim_enrich_attribute_requirement' => 'pim_enrich.form.type.attribute_requirement', 'pim_wysiwyg' => 'pim_enrich.form.type.wysiwyg', 'pim_enrich_price' => 'pim_enrich.form.type.price', 'pim_enrich_price_collection' => 'pim_enrich.form.type.price_collection', 'pim_enrich_metric' => 'pim_enrich.form.type.metric', 'pim_enrich_media' => 'pim_enrich.form.type.media', 'pim_category' => 'pim_enrich.form.type.category', 'pim_enrich_channel' => 'pim_enrich.form.type.channel', 'pim_enrich_currency' => 'pim_enrich.form.type.currency', 'pim_enrich_localized_collection' => 'pim_enrich.form.type.localized_collection', 'pim_enrich_group' => 'pim_enrich.form.type.group', 'pim_enrich_variant_group' => 'pim_enrich.form.type.variant_group', 'pim_enrich_group_type' => 'pim_enrich.form.type.group_type', 'pim_enrich_association_type' => 'pim_enrich.form.type.association_type', 'pim_available_attributes' => 'pim_enrich.form.type.available_attributes', 'pim_enrich_association' => 'pim_enrich.form.type.association', 'pim_enrich_conversion_units' => 'pim_enrich.form.type.conversion_units', 'pim_enrich_image' => 'pim_enrich.form.type.image', 'light_entity' => 'pim_enrich.form.type.light_entity', 'pim_object_identifier' => 'pim_enrich.form.type.object_identifier', 'pim_enrich_scopable' => 'pim_enrich.form.type.scopable', 'pim_enrich_available_locales' => 'pim_enrich.form.type.available_locales', 'pim_enrich_options' => 'pim_enrich.form.type.options', 'pim_enrich_mass_edit_common_attributes' => 'pim_enrich.form.type.edit_common_attributes', 'pim_enrich_mass_add_to_groups' => 'pim_enrich.form.type.add_to_groups', 'pim_enrich_mass_add_to_variant_group' => 'pim_enrich.form.type.add_to_variant_group', 'pim_enrich_mass_change_family' => 'pim_enrich.form.type.change_family', 'pim_enrich_mass_change_status' => 'pim_enrich.form.type.change_status', 'pim_enrich_mass_classify' => 'pim_enrich.form.type.classify', 'pim_enrich_mass_set_attribute_requirements' => 'pim_enrich.form.type.set_attribute_requirements', 'pim_comment_comment' => 'pim_comment.form.type.comment'), array('form' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.csrf', 3 => 'nelmio_api_doc.form.extension.description_form_type_extension', 4 => 'oro_entity_config.extension.config', 5 => 'oro_entity_extend.extension.extend_entity', 6 => 'oro_form.extension.data_block', 7 => 'oro_form.extension.client_validation', 8 => 'oro_help.form.tooltip_extension', 9 => 'oro_form.extension.constraint_as_option', 10 => 'oro_form.extension.js_validation', 11 => 'oro_organization.form.extension.owner', 12 => 'form.type_extension.validation_groups', 13 => 'pim_ui.form.extension.help', 14 => 'pim_ui.form.extension.select2'), 'repeated' => array(0 => 'form.type_extension.repeated.validator', 1 => 'oro_form.extension.js_validation.repeated', 2 => 'form.type_extension.repeated_field_parameters'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine'))), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\ResolvedFormTypeFactory A Symfony\Component\Form\ResolvedFormTypeFactory instance.
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory();
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    protected function getForm_Type_ButtonService()
    {
        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType();
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    protected function getForm_Type_CollectionService()
    {
        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    protected function getForm_Type_CountryService()
    {
        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    protected function getForm_Type_DateService()
    {
        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    protected function getForm_Type_EmailService()
    {
        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance.
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    protected function getForm_Type_FileService()
    {
        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    protected function getForm_Type_HiddenService()
    {
        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    protected function getForm_Type_IntegerService()
    {
        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    protected function getForm_Type_LanguageService()
    {
        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    protected function getForm_Type_LocaleService()
    {
        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    protected function getForm_Type_MoneyService()
    {
        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    protected function getForm_Type_NumberService()
    {
        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    protected function getForm_Type_PasswordService()
    {
        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    protected function getForm_Type_PercentService()
    {
        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    protected function getForm_Type_RadioService()
    {
        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    protected function getForm_Type_ResetService()
    {
        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    protected function getForm_Type_SearchService()
    {
        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    protected function getForm_Type_SubmitService()
    {
        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    protected function getForm_Type_TextService()
    {
        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    protected function getForm_Type_TextareaService()
    {
        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    protected function getForm_Type_TimeService()
    {
        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    protected function getForm_Type_UrlService()
    {
        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('form.csrf_provider'), true, '_token', $this->get('translator.default'), 'validators');
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension();
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.repeated_field_parameters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\Form\Extension\RepeatedTypeExtension A APY\JsFormValidationBundle\Form\Extension\RepeatedTypeExtension instance.
     */
    protected function getForm_TypeExtension_RepeatedFieldParametersService()
    {
        return $this->services['form.type_extension.repeated_field_parameters'] = new \APY\JsFormValidationBundle\Form\Extension\RepeatedTypeExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.validation_groups' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\Form\Extension\FormTypeExtension A APY\JsFormValidationBundle\Form\Extension\FormTypeExtension instance.
     */
    protected function getForm_TypeExtension_ValidationGroupsService()
    {
        $this->services['form.type_extension.validation_groups'] = $instance = new \APY\JsFormValidationBundle\Form\Extension\FormTypeExtension();

        $instance->setJsfv($this->get('jsfv.generator'));

        return $instance;
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'fos_js_routing.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Controller\Controller A FOS\JsRoutingBundle\Controller\Controller instance.
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller($this->get('fos_js_routing.serializer'), $this->get('fos_js_routing.extractor'), array('enabled' => false), true);
    }

    /**
     * Gets the 'fos_js_routing.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor A FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor instance.
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor($this->get('router'), array(0 => 'oro_*', 1 => 'pim_*'), __DIR__, array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle', 'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle', 'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle', 'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle', 'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle', 'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle', 'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle', 'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle', 'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle', 'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle', 'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle', 'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle', 'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle', 'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle', 'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'));
    }

    /**
     * Gets the 'fos_js_routing.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the 'fos_rest.body_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener A FOS\RestBundle\EventListener\BodyListener instance.
     */
    protected function getFosRest_BodyListenerService()
    {
        return $this->services['fos_rest.body_listener'] = new \FOS\RestBundle\EventListener\BodyListener($this->get('fos_rest.decoder_provider'));
    }

    /**
     * Gets the 'fos_rest.decoder.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\Rest\Decoder\JsonDecoder A FOS\Rest\Decoder\JsonDecoder instance.
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\Rest\Decoder\JsonDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.jsontoform' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\Rest\Decoder\JsonToFormDecoder A FOS\Rest\Decoder\JsonToFormDecoder instance.
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\Rest\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\Rest\Decoder\XmlDecoder A FOS\Rest\Decoder\XmlDecoder instance.
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\Rest\Decoder\XmlDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider A FOS\RestBundle\Decoder\ContainerDecoderProvider instance.
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.format_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\FormatListener A FOS\RestBundle\EventListener\FormatListener instance.
     */
    protected function getFosRest_FormatListenerService()
    {
        return $this->services['fos_rest.format_listener'] = new \FOS\RestBundle\EventListener\FormatListener($this->get('fos_rest.format_negotiator'), 'html', array(0 => 'html', 1 => '*/*'), true);
    }

    /**
     * Gets the 'fos_rest.format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\Rest\Util\FormatNegotiator A FOS\Rest\Util\FormatNegotiator instance.
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\Rest\Util\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.inflector.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\Inflector\DoctrineInflector A FOS\RestBundle\Util\Inflector\DoctrineInflector instance.
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Util\Inflector\DoctrineInflector();
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher A FOS\RestBundle\Request\ParamFetcher instance.
     * 
     * @throws InactiveScopeException when the 'fos_rest.request.param_fetcher' service is requested while the 'request' scope is not active
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('fos_rest.request.param_fetcher', 'request');
        }

        return $this->services['fos_rest.request.param_fetcher'] = $this->scopedServices['request']['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this->get('fos_rest.request.param_fetcher.reader'), $this->get('request'));
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamReader A FOS\RestBundle\Request\ParamReader instance.
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader($this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteLoader A FOS\RestBundle\Routing\Loader\RestRouteLoader instance.
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $this->get('file_locator'), $this->get('controller_name_converter'), $this->get('fos_rest.routing.loader.reader.controller'), 'json');
    }

    /**
     * Gets the 'fos_rest.routing.loader.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteProcessor A FOS\RestBundle\Routing\Loader\RestRouteProcessor instance.
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestActionReader A FOS\RestBundle\Routing\Loader\Reader\RestActionReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($this->get('annotation_reader'), $this->get('fos_rest.request.param_fetcher.reader'), $this->get('fos_rest.inflector.doctrine'), true, array('json' => false, 'xml' => false, 'html' => true));
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader A FOS\RestBundle\Routing\Loader\Reader\RestControllerReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader($this->get('fos_rest.routing.loader.reader.action'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.xml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader A FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.yaml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader A FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'));
    }

    /**
     * Gets the 'fos_rest.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Serializer A JMS\Serializer\Serializer instance.
     */
    protected function getFosRest_SerializerService()
    {
        $a = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $a->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL))));

        return $this->services['fos_rest.serializer'] = new \JMS\Serializer\Serializer($this->get('jms_serializer.metadata_factory'), $this->get('jms_serializer.handler_registry'), $this->get('jms_serializer.unserialize_object_constructor'), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $a);
    }

    /**
     * Gets the 'fos_rest.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ViewHandler A FOS\RestBundle\View\ViewHandler instance.
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(array('json' => false, 'xml' => false, 'html' => true), 400, 204, false, array('html' => 302), 'php');

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\FragmentHandler A Symfony\Component\HttpKernel\Fragment\FragmentHandler instance.
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\Fragment\FragmentHandler(array(), true);

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        $instance->addRenderer($this->get('fragment.renderer.inline'));
        $instance->addRenderer($this->get('fragment.renderer.hinclude'));

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener($this->get('uri_signer'), '/_fragment');
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer A Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer instance.
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer($this, $this->get('uri_signer'), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance.
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('event_dispatcher'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'genemu.form.core.type.captcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType A Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType instance.
     */
    protected function getGenemu_Form_Core_Type_CaptchaService()
    {
        return $this->services['genemu.form.core.type.captcha'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType($this->get('genemu.gd.captcha'), array('enabled' => true, 'driver' => 'gd', 'width' => 100, 'height' => 30, 'length' => 4, 'format' => 'png', 'chars' => array(0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9), 'font_size' => 18, 'grayscale' => false, 'font_color' => array(0 => '252525', 1 => '8B8787', 2 => '550707', 3 => '3526E6', 4 => '88531E'), 'fonts' => array(0 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/akbar.ttf'), 1 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/brushcut.ttf'), 2 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/molten.ttf'), 3 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/planetbe.ttf'), 4 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/whoobub.ttf')), 'background_color' => 'DDDDDD', 'border_color' => '000000', 'code' => NULL));
    }

    /**
     * Gets the 'genemu.form.core.type.plain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Core\Type\PlainType A Genemu\Bundle\FormBundle\Form\Core\Type\PlainType instance.
     */
    protected function getGenemu_Form_Core_Type_PlainService()
    {
        return $this->services['genemu.form.core.type.plain'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\PlainType();
    }

    /**
     * Gets the 'genemu.form.core.type.recaptcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType A Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType instance.
     */
    protected function getGenemu_Form_Core_Type_RecaptchaService()
    {
        return $this->services['genemu.form.core.type.recaptcha'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType($this->get('genemu.form.type_recaptcha.validator'), '', '', array());
    }

    /**
     * Gets the 'genemu.form.core.type.tinymce' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType A Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType instance.
     */
    protected function getGenemu_Form_Core_Type_TinymceService()
    {
        return $this->services['genemu.form.core.type.tinymce'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType(array('theme' => 'advanced'));
    }

    /**
     * Gets the 'genemu.form.entity.type.ajaxentity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType A Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType instance.
     */
    protected function getGenemu_Form_Entity_Type_AjaxentityService()
    {
        return $this->services['genemu.form.entity.type.ajaxentity'] = new \Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('document', NULL);
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_EntityService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('entity', $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_TextService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.text'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('text');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_CountryService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_EntityService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_ModelService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.chosen.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_CountryService()
    {
        return $this->services['genemu.form.jquery.type.chosen.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.chosen.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.chosen.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_EntityService()
    {
        return $this->services['genemu.form.jquery.type.chosen.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.chosen.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.chosen.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_ModelService()
    {
        return $this->services['genemu.form.jquery.type.chosen.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.chosen.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.color' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType instance.
     */
    protected function getGenemu_Form_Jquery_Type_ColorService()
    {
        return $this->services['genemu.form.jquery.type.color'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType A Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType instance.
     */
    protected function getGenemu_Form_Jquery_Type_DateService()
    {
        return $this->services['genemu.form.jquery.type.date'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType A Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType instance.
     */
    protected function getGenemu_Form_Jquery_Type_FileService()
    {
        return $this->services['genemu.form.jquery.type.file'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType(array(), (dirname(dirname(__DIR__)).'/../web'));
    }

    /**
     * Gets the 'genemu.form.jquery.type.geolocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType A Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType instance.
     */
    protected function getGenemu_Form_Jquery_Type_GeolocationService()
    {
        return $this->services['genemu.form.jquery.type.geolocation'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType();
    }

    /**
     * Gets the 'genemu.form.jquery.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType instance.
     */
    protected function getGenemu_Form_Jquery_Type_ImageService()
    {
        return $this->services['genemu.form.jquery.type.image'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType('', array(), array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.rating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType A Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType instance.
     */
    protected function getGenemu_Form_Jquery_Type_RatingService()
    {
        return $this->services['genemu.form.jquery.type.rating'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.select2.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_CountryService()
    {
        return $this->services['genemu.form.jquery.type.select2.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.select2.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.select2.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_EntityService()
    {
        return $this->services['genemu.form.jquery.type.select2.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_HiddenService()
    {
        return $this->services['genemu.form.jquery.type.select2.hidden'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('hidden');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.select2.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.select2.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_ModelService()
    {
        return $this->services['genemu.form.jquery.type.select2.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.select2.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.slider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType A Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType instance.
     */
    protected function getGenemu_Form_Jquery_Type_SliderService()
    {
        return $this->services['genemu.form.jquery.type.slider'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType();
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_CountryService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_EntityService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_ModelService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('timezone');
    }

    /**
     * Gets the 'genemu.form.model.type.ajaxmodel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType A Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType instance.
     */
    protected function getGenemu_Form_Model_Type_AjaxmodelService()
    {
        return $this->services['genemu.form.model.type.ajaxmodel'] = new \Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType();
    }

    /**
     * Gets the 'genemu.form.type_recaptcha.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator A Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator instance.
     */
    protected function getGenemu_Form_TypeRecaptcha_ValidatorService()
    {
        return $this->services['genemu.form.type_recaptcha.validator'] = new \Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator($this->get('request'), '', array());
    }

    /**
     * Gets the 'genemu.gd.captcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Gd\Type\Captcha A Genemu\Bundle\FormBundle\Gd\Type\Captcha instance.
     */
    protected function getGenemu_Gd_CaptchaService()
    {
        return $this->services['genemu.gd.captcha'] = new \Genemu\Bundle\FormBundle\Gd\Type\Captcha($this->get('session'), 'ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'genemu.twig.extension.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Twig\Extension\FormExtension A Genemu\Bundle\FormBundle\Twig\Extension\FormExtension instance.
     */
    protected function getGenemu_Twig_Extension_FormService()
    {
        return $this->services['genemu.twig.extension.form'] = new \Genemu\Bundle\FormBundle\Twig\Extension\FormExtension($this->get('twig.form.renderer'));
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this->get('debug.event_dispatcher'), $this, $this->get('debug.controller_resolver'));
    }

    /**
     * Gets the 'jdare_clank.clank_app' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Server\App\ClankApp A JDare\ClankBundle\Server\App\ClankApp instance.
     */
    protected function getJdareClank_ClankAppService()
    {
        return $this->services['jdare_clank.clank_app'] = new \JDare\ClankBundle\Server\App\ClankApp($this->get('jdare_clank.clank_handler_rpc'), $this->get('jdare_clank.clank_handler_topic'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'jdare_clank.clank_handler_rpc' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Server\App\Handler\RPCHandler A JDare\ClankBundle\Server\App\Handler\RPCHandler instance.
     */
    protected function getJdareClank_ClankHandlerRpcService()
    {
        $this->services['jdare_clank.clank_handler_rpc'] = $instance = new \JDare\ClankBundle\Server\App\Handler\RPCHandler();

        $instance->setContainer($this);
        $instance->setRPCServices(array());

        return $instance;
    }

    /**
     * Gets the 'jdare_clank.clank_handler_topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Server\App\Handler\TopicHandler A JDare\ClankBundle\Server\App\Handler\TopicHandler instance.
     */
    protected function getJdareClank_ClankHandlerTopicService()
    {
        $this->services['jdare_clank.clank_handler_topic'] = $instance = new \JDare\ClankBundle\Server\App\Handler\TopicHandler();

        $instance->setContainer($this);
        $instance->setTopicServices(array());

        return $instance;
    }

    /**
     * Gets the 'jdare_clank.entry_point' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Server\EntryPoint A JDare\ClankBundle\Server\EntryPoint instance.
     */
    protected function getJdareClank_EntryPointService()
    {
        return $this->services['jdare_clank.entry_point'] = new \JDare\ClankBundle\Server\EntryPoint($this, array(0 => 'jdare_clank.web_socket_server'));
    }

    /**
     * Gets the 'jdare_clank.periodic_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Periodic\AcmePeriodic A JDare\ClankBundle\Periodic\AcmePeriodic instance.
     */
    protected function getJdareClank_PeriodicSampleServiceService()
    {
        return $this->services['jdare_clank.periodic_sample_service'] = new \JDare\ClankBundle\Periodic\AcmePeriodic();
    }

    /**
     * Gets the 'jdare_clank.rpc_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\RPC\AcmeService A JDare\ClankBundle\RPC\AcmeService instance.
     */
    protected function getJdareClank_RpcSampleServiceService()
    {
        return $this->services['jdare_clank.rpc_sample_service'] = new \JDare\ClankBundle\RPC\AcmeService();
    }

    /**
     * Gets the 'jdare_clank.topic_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Topic\AcmeTopic A JDare\ClankBundle\Topic\AcmeTopic instance.
     */
    protected function getJdareClank_TopicSampleServiceService()
    {
        return $this->services['jdare_clank.topic_sample_service'] = new \JDare\ClankBundle\Topic\AcmeTopic();
    }

    /**
     * Gets the 'jdare_clank.twig.clank_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Twig\ClankExtension A JDare\ClankBundle\Twig\ClankExtension instance.
     */
    protected function getJdareClank_Twig_ClankExtensionService()
    {
        return $this->services['jdare_clank.twig.clank_extension'] = new \JDare\ClankBundle\Twig\ClankExtension($this);
    }

    /**
     * Gets the 'jdare_clank.web_socket_server' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JDare\ClankBundle\Server\Type\WebSocketServerType A JDare\ClankBundle\Server\Type\WebSocketServerType instance.
     */
    protected function getJdareClank_WebSocketServerService()
    {
        $this->services['jdare_clank.web_socket_server'] = $instance = new \JDare\ClankBundle\Server\Type\WebSocketServerType('127.0.0.1', 8080);

        $instance->setContainer($this);
        $instance->setPeriodicServices(array(0 => array('service' => 'oro_wamp.db_ping', 'time' => 60000)));
        $instance->setSession('session.handler.pdo');

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.array_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler A JMS\Serializer\Handler\ArrayCollectionHandler instance.
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.constraint_violation_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler A JMS\Serializer\Handler\ConstraintViolationHandler instance.
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the 'jms_serializer.datetime_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\DateHandler A JMS\Serializer\Handler\DateHandler instance.
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'Europe/Paris', true);
    }

    /**
     * Gets the 'jms_serializer.doctrine_proxy_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber A JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber instance.
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber();
    }

    /**
     * Gets the 'jms_serializer.form_error_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler A JMS\Serializer\Handler\FormErrorHandler instance.
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler($this->get('translator.default'));
    }

    /**
     * Gets the 'jms_serializer.handler_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry A JMS\Serializer\Handler\LazyHandlerRegistry instance.
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(2 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'))), 1 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')))));
    }

    /**
     * Gets the 'jms_serializer.json_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor A JMS\Serializer\JsonDeserializationVisitor instance.
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.json_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor A JMS\Serializer\JsonSerializationVisitor instance.
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor($this->get('jms_serializer.naming_strategy'));

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver A JMS\Serializer\Metadata\Driver\DoctrineTypeDriver instance.
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = new \Metadata\Driver\FileLocator(array('Symfony\\Bundle\\FrameworkBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SecurityBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/config/serializer'), 'Symfony\\Bundle\\TwigBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer'), 'Symfony\\Bundle\\MonologBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/monolog-bundle/Symfony/Bundle/MonologBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SwiftmailerBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/swiftmailer-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\AsseticBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/assetic-bundle/Symfony/Bundle/AsseticBundle/Resources/config/serializer'), 'Sensio\\Bundle\\FrameworkExtraBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/sensio/framework-extra-bundle/Sensio/Bundle/FrameworkExtraBundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/config/serializer'), 'A2lix\\TranslationFormBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/config/serializer'), 'BeSimple\\SoapBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/besimple/soap/src/BeSimple/SoapBundle/Resources/config/serializer'), 'Doctrine\\Bundle\\FixturesBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/doctrine/doctrine-fixtures-bundle/Doctrine/Bundle/FixturesBundle/Resources/config/serializer'), 'Escape\\WSSEAuthenticationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/escapestudios/wsse-authentication-bundle/Escape/WSSEAuthenticationBundle/Resources/config/serializer'), 'FOS\\JsRoutingBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/friendsofsymfony/jsrouting-bundle/FOS/JsRoutingBundle/Resources/config/serializer'), 'FOS\\RestBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer'), 'Genemu\\Bundle\\FormBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/config/serializer'), 'JDare\\ClankBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/config/serializer'), 'JMS\\SerializerBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer'), 'Knp\\Bundle\\MenuBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/config/serializer'), 'Knp\\Bundle\\PaginatorBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/config/serializer'), 'Lexik\\Bundle\\MaintenanceBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/config/serializer'), 'Liip\\ImagineBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/config/serializer'), 'Nelmio\\ApiDocBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/config/serializer'), 'Stof\\DoctrineExtensionsBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/config/serializer'), 'Sylius\\Bundle\\FlowBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/config/serializer'), 'Oro\\Bundle\\UIBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/config/serializer'), 'Oro\\Bundle\\AsseticBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/config/serializer'), 'Oro\\Bundle\\ConfigBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/config/serializer'), 'Oro\\Bundle\\DataGridBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/config/serializer'), 'Oro\\Bundle\\DistributionBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DistributionBundle/Resources/config/serializer'), 'Oro\\Bundle\\EmailBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/serializer'), 'Oro\\Bundle\\EntityBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/config/serializer'), 'Oro\\Bundle\\EntityConfigBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/serializer'), 'Oro\\Bundle\\EntityExtendBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/config/serializer'), 'Oro\\Bundle\\FilterBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/config/serializer'), 'Oro\\Bundle\\FormBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/config/serializer'), 'Oro\\Bundle\\HelpBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/config/serializer'), 'Oro\\Bundle\\ImapBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/serializer'), 'Oro\\Bundle\\InstallerBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/config/serializer'), 'Oro\\Bundle\\LocaleBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/config/serializer'), 'Oro\\Bundle\\NavigationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/serializer'), 'Oro\\Bundle\\OrganizationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/serializer'), 'Oro\\Bundle\\PlatformBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/config/serializer'), 'Oro\\Bundle\\RequireJSBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/config/serializer'), 'Oro\\Bundle\\SecurityBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/config/serializer'), 'Oro\\Bundle\\TranslationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/config/serializer'), 'Oro\\Bundle\\UserBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/serializer'), 'Oro\\Bundle\\WindowsBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/config/serializer'), 'Oro\\Bundle\\DataAuditBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/config/serializer'), 'Knp\\Bundle\\GaufretteBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/knplabs/knp-gaufrette-bundle/Knp/Bundle/GaufretteBundle/Resources/config/serializer'), 'APY\\JsFormValidationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/apy/jsfv-bundle/APY/JsFormValidationBundle/Resources/config/serializer'), 'Doctrine\\Bundle\\MigrationsBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/doctrine/doctrine-migrations-bundle/Doctrine/Bundle/MigrationsBundle/Resources/config/serializer'), 'Akeneo\\Bundle\\MeasureBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/measure-bundle/Akeneo/Bundle/MeasureBundle/Resources/config/serializer'), 'Akeneo\\Bundle\\BatchBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/batch-bundle/Akeneo/Bundle/BatchBundle/Resources/config/serializer'), 'Akeneo\\Bundle\\StorageUtilsBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Akeneo/Bundle/StorageUtilsBundle/Resources/config/serializer'), 'Pim\\Bundle\\NavigationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/config/serializer'), 'Pim\\Bundle\\FilterBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/config/serializer'), 'Pim\\Bundle\\UserBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/config/serializer'), 'Pim\\Bundle\\JsFormValidationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/JsFormValidationBundle/Resources/config/serializer'), 'Pim\\Bundle\\EntityBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EntityBundle/Resources/config/serializer'), 'Pim\\Bundle\\DashboardBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/config/serializer'), 'Pim\\Bundle\\InstallerBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/InstallerBundle/Resources/config/serializer'), 'Pim\\Bundle\\UIBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/config/serializer'), 'Pim\\Bundle\\NotificationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/config/serializer'), 'Pim\\Bundle\\CatalogBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/serializer'), 'Pim\\Bundle\\DataGridBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/config/serializer'), 'Pim\\Bundle\\TranslationBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/TranslationBundle/Resources/config/serializer'), 'Pim\\Bundle\\ImportExportBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/config/serializer'), 'Pim\\Bundle\\VersioningBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/VersioningBundle/Resources/config/serializer'), 'Pim\\Bundle\\WebServiceBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/WebServiceBundle/Resources/config/serializer'), 'Pim\\Bundle\\EnrichBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/config/serializer'), 'Pim\\Bundle\\BaseConnectorBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/config/serializer'), 'Pim\\Bundle\\TransformBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/TransformBundle/Resources/config/serializer'), 'Pim\\Bundle\\CommentBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/config/serializer'), 'Pim\\Bundle\\PdfGeneratorBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/PdfGeneratorBundle/Resources/config/serializer'), 'Foody\\InstallerBundle' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/config/serializer'), 'Foody\\ImportProductBundle' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/ImportProductBundle/Resources/config/serializer'), 'Symfony\\Bundle\\WebProfilerBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/serializer'), 'Sensio\\Bundle\\DistributionBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/config/serializer'), 'Sensio\\Bundle\\GeneratorBundle' => (dirname(dirname(dirname(__DIR__))).'/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Resources/config/serializer')));

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver($this->get('annotation_reader')))), $this->get('doctrine'));
    }

    /**
     * Gets the 'jms_serializer.naming_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy A JMS\Serializer\Naming\CacheNamingStrategy instance.
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the 'jms_serializer.object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor A JMS\Serializer\Construction\DoctrineObjectConstructor instance.
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.php_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler A JMS\Serializer\Handler\PhpCollectionHandler instance.
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.stopwatch_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber A JMS\SerializerBundle\Serializer\StopwatchEventSubscriber instance.
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber($this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'jms_serializer.templating.helper.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper A JMS\SerializerBundle\Templating\SerializerHelper instance.
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper($this->get('fos_rest.serializer'));
    }

    /**
     * Gets the 'jms_serializer.xml_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor A JMS\Serializer\XmlDeserializationVisitor instance.
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.xml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor A JMS\Serializer\XmlSerializationVisitor instance.
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        return $this->services['jms_serializer.xml_serialization_visitor'] = new \JMS\Serializer\XmlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'jms_serializer.yaml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor A JMS\Serializer\YamlSerializationVisitor instance.
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'jsfv.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\Controller\Controller A APY\JsFormValidationBundle\Controller\Controller instance.
     */
    protected function getJsfv_ControllerService()
    {
        return $this->services['jsfv.controller'] = new \APY\JsFormValidationBundle\Controller\Controller($this);
    }

    /**
     * Gets the 'jsfv.generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\JsFormValidationBundle\Generator\FormValidationScriptGenerator A Pim\Bundle\JsFormValidationBundle\Generator\FormValidationScriptGenerator instance.
     */
    protected function getJsfv_GeneratorService()
    {
        return $this->services['jsfv.generator'] = new \Pim\Bundle\JsFormValidationBundle\Generator\FormValidationScriptGenerator($this, $this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'jsfv.repeated_field_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\EventListener\RepeatedFieldListener A APY\JsFormValidationBundle\EventListener\RepeatedFieldListener instance.
     */
    protected function getJsfv_RepeatedFieldListenerService()
    {
        return $this->services['jsfv.repeated_field_listener'] = new \APY\JsFormValidationBundle\EventListener\RepeatedFieldListener();
    }

    /**
     * Gets the 'jsfv.validation_groups_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\EventListener\ValidationGroupsListener A APY\JsFormValidationBundle\EventListener\ValidationGroupsListener instance.
     */
    protected function getJsfv_ValidationGroupsListenerService()
    {
        return $this->services['jsfv.validation_groups_listener'] = new \APY\JsFormValidationBundle\EventListener\ValidationGroupsListener();
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'kernel.cache_warmer.jsformvalidation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \APY\JsFormValidationBundle\CacheWarmer\JsFormValidationCacheWarmer A APY\JsFormValidationBundle\CacheWarmer\JsFormValidationCacheWarmer instance.
     */
    protected function getKernel_CacheWarmer_JsformvalidationService()
    {
        return $this->services['kernel.cache_warmer.jsformvalidation'] = new \APY\JsFormValidationBundle\CacheWarmer\JsFormValidationCacheWarmer($this);
    }

    /**
     * Gets the 'kernel.listener.hashnav_response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener A Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener instance.
     */
    protected function getKernel_Listener_HashnavResponseService()
    {
        return $this->services['kernel.listener.hashnav_response'] = new \Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener($this->get('security.context'), $this->get('templating'));
    }

    /**
     * Gets the 'kernel.listener.nav_history_response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener A Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener instance.
     */
    protected function getKernel_Listener_NavHistoryResponseService()
    {
        return $this->services['kernel.listener.nav_history_response'] = new \Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener($this->get('oro_navigation.item.factory'), $this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'kernel.listener.title_service.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Event\RequestTitleListener A Oro\Bundle\NavigationBundle\Event\RequestTitleListener instance.
     */
    protected function getKernel_Listener_TitleService_RequestListenerService()
    {
        return $this->services['kernel.listener.title_service.request_listener'] = new \Oro\Bundle\NavigationBundle\Event\RequestTitleListener($this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'knp_gaufrette.filesystem_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\GaufretteBundle\FilesystemMap A Knp\Bundle\GaufretteBundle\FilesystemMap instance.
     */
    protected function getKnpGaufrette_FilesystemMapService()
    {
        return $this->services['knp_gaufrette.filesystem_map'] = new \Knp\Bundle\GaufretteBundle\FilesystemMap(array('pim' => $this->get('pim_filesystem'), 'pim_archivist' => $this->get('pim_archivist_filesystem')));
    }

    /**
     * Gets the 'knp_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance.
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Integration\Symfony\RoutingExtension($this->get('router')), 0);

        return $instance;
    }

    /**
     * Gets the 'knp_menu.listener.voters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener A Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener instance.
     */
    protected function getKnpMenu_Listener_VotersService()
    {
        $this->services['knp_menu.listener.voters'] = $instance = new \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener();

        $instance->addVoter($this->get('knp_menu.voter.router'));
        $instance->addVoter($this->get('knp_voter_request'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Matcher\Matcher A Knp\Menu\Matcher\Matcher instance.
     */
    protected function getKnpMenu_MatcherService()
    {
        $this->services['knp_menu.matcher'] = $instance = new \Knp\Menu\Matcher\Matcher();

        $instance->addVoter($this->get('knp_menu.voter.router'));
        $instance->addVoter($this->get('knp_voter_request'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.menu_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Provider\ChainProvider A Knp\Menu\Provider\ChainProvider instance.
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(array(0 => new \Knp\Bundle\MenuBundle\Provider\ContainerAwareProvider($this, array()), 1 => new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider($this->get('kernel'), $this, $this->get('knp_menu.factory')), 2 => $this->get('oro_menu.builder_chain')));
    }

    /**
     * Gets the 'knp_menu.renderer.list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\ListRenderer A Knp\Menu\Renderer\ListRenderer instance.
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /**
     * Gets the 'knp_menu.renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\Renderer\TwigRenderer A Knp\Menu\Renderer\TwigRenderer instance.
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer($this->get('twig'), 'knp_menu.html.twig', $this->get('knp_menu.matcher'), array());
    }

    /**
     * Gets the 'knp_menu.renderer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider A Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider instance.
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider($this, 'twig', array('list' => 'knp_menu.renderer.list', 'twig' => 'knp_menu.renderer.twig'));
    }

    /**
     * Gets the 'knp_menu.voter.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter A Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter instance.
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter();
    }

    /**
     * Gets the 'knp_paginator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Component\Pager\Paginator A Knp\Component\Pager\Paginator instance.
     */
    protected function getKnpPaginatorService()
    {
        $this->services['knp_paginator'] = $instance = new \Knp\Component\Pager\Paginator($this->get('event_dispatcher'));

        $instance->setDefaultPaginatorOptions(array('pageParameterName' => 'page', 'sortFieldParameterName' => 'sort', 'sortDirectionParameterName' => 'direction', 'filterFieldParameterName' => 'filterField', 'filterValueParameterName' => 'filterValue', 'distinct' => true));

        return $instance;
    }

    /**
     * Gets the 'knp_paginator.helper.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Helper\Processor A Knp\Bundle\PaginatorBundle\Helper\Processor instance.
     */
    protected function getKnpPaginator_Helper_ProcessorService()
    {
        return $this->services['knp_paginator.helper.processor'] = new \Knp\Bundle\PaginatorBundle\Helper\Processor($this->get('templating.helper.router'), $this->get('translator.default'));
    }

    /**
     * Gets the 'knp_paginator.subscriber.filtration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber A Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_FiltrationService()
    {
        return $this->services['knp_paginator.subscriber.filtration'] = new \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber();
    }

    /**
     * Gets the 'knp_paginator.subscriber.paginate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber A Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_PaginateService()
    {
        return $this->services['knp_paginator.subscriber.paginate'] = new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber();
    }

    /**
     * Gets the 'knp_paginator.subscriber.sliding_pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber A Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_SlidingPaginationService()
    {
        return $this->services['knp_paginator.subscriber.sliding_pagination'] = new \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber(array('defaultPaginationTemplate' => 'OroUIBundle::pager.html.twig', 'defaultSortableTemplate' => 'KnpPaginatorBundle:Pagination:sortable_link.html.twig', 'defaultFiltrationTemplate' => 'KnpPaginatorBundle:Pagination:filtration.html.twig', 'defaultPageRange' => 5));
    }

    /**
     * Gets the 'knp_paginator.subscriber.sortable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber A Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_SortableService()
    {
        return $this->services['knp_paginator.subscriber.sortable'] = new \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber();
    }

    /**
     * Gets the 'knp_paginator.templating.helper.pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Templating\PaginationHelper A Knp\Bundle\PaginatorBundle\Templating\PaginationHelper instance.
     */
    protected function getKnpPaginator_Templating_Helper_PaginationService()
    {
        return $this->services['knp_paginator.templating.helper.pagination'] = new \Knp\Bundle\PaginatorBundle\Templating\PaginationHelper($this->get('knp_paginator.helper.processor'), $this->get('debug.templating.engine.php'));
    }

    /**
     * Gets the 'knp_paginator.twig.extension.pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension A Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension instance.
     */
    protected function getKnpPaginator_Twig_Extension_PaginationService()
    {
        return $this->services['knp_paginator.twig.extension.pagination'] = new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension($this->get('knp_paginator.helper.processor'));
    }

    /**
     * Gets the 'knp_voter_request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter A Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter instance.
     */
    protected function getKnpVoterRequestService()
    {
        return $this->services['knp_voter_request'] = new \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter();
    }

    /**
     * Gets the 'lexik_maintenance.driver.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory A Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory instance.
     */
    protected function getLexikMaintenance_Driver_FactoryService()
    {
        return $this->services['lexik_maintenance.driver.factory'] = new \Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory(new \Lexik\Bundle\MaintenanceBundle\Drivers\DatabaseDriver($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('translator.default'), array('class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\FileDriver', 'options' => array('file_path' => (dirname(__DIR__).'/lock')), 'ttl' => NULL));
    }

    /**
     * Gets the 'lexik_maintenance.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener A Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener instance.
     */
    protected function getLexikMaintenance_ListenerService()
    {
        return $this->services['lexik_maintenance.listener'] = new \Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener($this->get('lexik_maintenance.driver.factory'), 'maintenance|.*\\.js', NULL, NULL, array(), NULL, array());
    }

    /**
     * Gets the 'liip_imagine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Imagine\Gd\Imagine A Imagine\Gd\Imagine instance.
     */
    protected function getLiipImagineService()
    {
        return $this->services['liip_imagine'] = new \Imagine\Gd\Imagine();
    }

    /**
     * Gets the 'liip_imagine.cache.clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\CacheClearer A Liip\ImagineBundle\Imagine\Cache\CacheClearer instance.
     */
    protected function getLiipImagine_Cache_ClearerService()
    {
        return $this->services['liip_imagine.cache.clearer'] = new \Liip\ImagineBundle\Imagine\Cache\CacheClearer($this->get('liip_imagine.cache.manager'), '/media/cache');
    }

    /**
     * Gets the 'liip_imagine.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\CacheManager A Liip\ImagineBundle\Imagine\Cache\CacheManager instance.
     */
    protected function getLiipImagine_Cache_ManagerService()
    {
        $this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager($this->get('liip_imagine.filter.configuration'), $this->get('router'), (dirname(dirname(__DIR__)).'/../web'), 'web_path');

        $instance->addResolver('web_path', $this->get('liip_imagine.cache.resolver.web_path'));
        $instance->addResolver('no_cache', $this->get('liip_imagine.cache.resolver.no_cache'));
        $instance->addResolver('local_dir', $this->get('pim_enrich.imagine.local_dir_resolver'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.no_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_NoCacheService()
    {
        return $this->services['liip_imagine.cache.resolver.no_cache'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver($this->get('filesystem'));
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.web_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_WebPathService()
    {
        $this->services['liip_imagine.cache.resolver.web_path'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver($this->get('filesystem'));

        $instance->setBasePath('');
        $instance->setFolderPermissions(511);

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Controller\ImagineController A Liip\ImagineBundle\Controller\ImagineController instance.
     */
    protected function getLiipImagine_ControllerService()
    {
        return $this->services['liip_imagine.controller'] = new \Liip\ImagineBundle\Controller\ImagineController($this->get('liip_imagine.data.manager'), $this->get('liip_imagine.filter.manager'), $this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'liip_imagine.data.loader.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader A Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader instance.
     */
    protected function getLiipImagine_Data_Loader_FilesystemService()
    {
        return $this->services['liip_imagine.data.loader.filesystem'] = new \Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader($this->get('liip_imagine'), array(), (dirname(dirname(__DIR__)).'/../web'));
    }

    /**
     * Gets the 'liip_imagine.data.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Data\DataManager A Liip\ImagineBundle\Imagine\Data\DataManager instance.
     */
    protected function getLiipImagine_Data_ManagerService()
    {
        $this->services['liip_imagine.data.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Data\DataManager($this->get('liip_imagine.filter.configuration'), 'filesystem');

        $instance->addLoader('filesystem', $this->get('liip_imagine.data.loader.filesystem'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.filter.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration A Liip\ImagineBundle\Imagine\Filter\FilterConfiguration instance.
     */
    protected function getLiipImagine_Filter_ConfigurationService()
    {
        return $this->services['liip_imagine.filter.configuration'] = new \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration(array('avatar_med' => array('quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 58, 1 => 58), 'mode' => 'outbound'), 'strip' => array()), 'format' => NULL, 'cache' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'thumbnail_small' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 80, 1 => 120), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'thumbnail' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 320, 1 => 240), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'image_preview' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 900, 1 => 600), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array())));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.background' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_BackgroundService()
    {
        return $this->services['liip_imagine.filter.loader.background'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader($this->get('liip_imagine'));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.crop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_CropService()
    {
        return $this->services['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.paste' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_PasteService()
    {
        return $this->services['liip_imagine.filter.loader.paste'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader($this->get('liip_imagine'), dirname(dirname(__DIR__)));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.relative_resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_RelativeResizeService()
    {
        return $this->services['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ResizeService()
    {
        return $this->services['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.strip' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_StripService()
    {
        return $this->services['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.thumbnail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ThumbnailService()
    {
        return $this->services['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.upscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_UpscaleService()
    {
        return $this->services['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.watermark' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_WatermarkService()
    {
        return $this->services['liip_imagine.filter.loader.watermark'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader($this->get('liip_imagine'), dirname(dirname(__DIR__)));
    }

    /**
     * Gets the 'liip_imagine.filter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterManager A Liip\ImagineBundle\Imagine\Filter\FilterManager instance.
     */
    protected function getLiipImagine_Filter_ManagerService()
    {
        $this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager($this->get('liip_imagine.filter.configuration'));

        $instance->addLoader('relative_resize', $this->get('liip_imagine.filter.loader.relative_resize'));
        $instance->addLoader('resize', $this->get('liip_imagine.filter.loader.resize'));
        $instance->addLoader('thumbnail', $this->get('liip_imagine.filter.loader.thumbnail'));
        $instance->addLoader('crop', $this->get('liip_imagine.filter.loader.crop'));
        $instance->addLoader('paste', $this->get('liip_imagine.filter.loader.paste'));
        $instance->addLoader('watermark', $this->get('liip_imagine.filter.loader.watermark'));
        $instance->addLoader('background', $this->get('liip_imagine.filter.loader.background'));
        $instance->addLoader('strip', $this->get('liip_imagine.filter.loader.strip'));
        $instance->addLoader('upscale', $this->get('liip_imagine.filter.loader.upscale'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Form\Type\ImageType A Liip\ImagineBundle\Form\Type\ImageType instance.
     */
    protected function getLiipImagine_Form_Type_ImageService()
    {
        return $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType();
    }

    /**
     * Gets the 'liip_imagine.routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Routing\ImagineLoader A Liip\ImagineBundle\Routing\ImagineLoader instance.
     */
    protected function getLiipImagine_Routing_LoaderService()
    {
        return $this->services['liip_imagine.routing.loader'] = new \Liip\ImagineBundle\Routing\ImagineLoader('liip_imagine.controller:filterAction', '/media/cache', array('avatar_med' => array('quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 58, 1 => 58), 'mode' => 'outbound'), 'strip' => array()), 'format' => NULL, 'cache' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'thumbnail_small' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 80, 1 => 120), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'thumbnail' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 320, 1 => 240), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array()), 'image_preview' => array('cache' => 'local_dir', 'quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 900, 1 => 600), 'mode' => 'inset'), 'strip' => array()), 'format' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array())));
    }

    /**
     * Gets the 'liip_imagine.templating.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Templating\Helper\ImagineHelper A Liip\ImagineBundle\Templating\Helper\ImagineHelper instance.
     */
    protected function getLiipImagine_Templating_HelperService()
    {
        return $this->services['liip_imagine.templating.helper'] = new \Liip\ImagineBundle\Templating\Helper\ImagineHelper($this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance.
     */
    protected function getLocaleListenerService()
    {
        $this->services['locale_listener'] = $instance = new \Symfony\Component\HttpKernel\EventListener\LocaleListener('en', $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    protected function getMonolog_Handler_DebugService()
    {
        return $this->services['monolog.handler.debug'] = new \Symfony\Bridge\Monolog\Handler\DebugHandler(100, true);
    }

    /**
     * Gets the 'monolog.handler.firephp' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\FirePHPHandler A Symfony\Bridge\Monolog\Handler\FirePHPHandler instance.
     */
    protected function getMonolog_Handler_FirephpService()
    {
        return $this->services['monolog.handler.firephp'] = new \Symfony\Bridge\Monolog\Handler\FirePHPHandler(200, true);
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this->services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler((dirname(dirname(__DIR__)).'/logs/dev.log'), 100, true);
    }

    /**
     * Gets the 'monolog.logger.batch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_BatchService()
    {
        $this->services['monolog.logger.batch'] = $instance = new \Symfony\Bridge\Monolog\Logger('batch');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));
        $instance->pushHandler($this->get('akeneo_batch.logger.batch_log_handler'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.deprecation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DeprecationService()
    {
        $this->services['monolog.logger.deprecation'] = $instance = new \Symfony\Bridge\Monolog\Logger('deprecation');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.emergency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EmergencyService()
    {
        $this->services['monolog.logger.emergency'] = $instance = new \Symfony\Bridge\Monolog\Logger('emergency');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.doc_comment_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Util\DocCommentExtractor A Nelmio\ApiDocBundle\Util\DocCommentExtractor instance.
     */
    protected function getNelmioApiDoc_DocCommentExtractorService()
    {
        return $this->services['nelmio_api_doc.doc_comment_extractor'] = new \Nelmio\ApiDocBundle\Util\DocCommentExtractor();
    }

    /**
     * Gets the 'nelmio_api_doc.event_listener.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\EventListener\RequestListener A Nelmio\ApiDocBundle\EventListener\RequestListener instance.
     */
    protected function getNelmioApiDoc_EventListener_RequestService()
    {
        return $this->services['nelmio_api_doc.event_listener.request'] = new \Nelmio\ApiDocBundle\EventListener\RequestListener($this->get('nelmio_api_doc.extractor.api_doc_extractor'), $this->get('nelmio_api_doc.formatter.html_formatter'), '_doc');
    }

    /**
     * Gets the 'nelmio_api_doc.extractor.api_doc_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Extractor\ApiDocExtractor A Nelmio\ApiDocBundle\Extractor\ApiDocExtractor instance.
     */
    protected function getNelmioApiDoc_Extractor_ApiDocExtractorService()
    {
        $a = $this->get('nelmio_api_doc.doc_comment_extractor');

        $this->services['nelmio_api_doc.extractor.api_doc_extractor'] = $instance = new \Nelmio\ApiDocBundle\Extractor\ApiDocExtractor($this, $this->get('router'), $this->get('annotation_reader'), $a, array(0 => new \Nelmio\ApiDocBundle\Extractor\Handler\FosRestHandler(), 1 => new \Nelmio\ApiDocBundle\Extractor\Handler\JmsSecurityExtraHandler(), 2 => new \Nelmio\ApiDocBundle\Extractor\Handler\SensioFrameworkExtraHandler(), 3 => new \Nelmio\ApiDocBundle\Extractor\Handler\PhpDocHandler($a)));

        $instance->addParser($this->get('nelmio_api_doc.parser.form_type_parser'));
        $instance->addParser($this->get('nelmio_api_doc.parser.validation_parser'));
        $instance->addParser($this->get('nelmio_api_doc.parser.jms_metadata_parser'));

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.form.extension.description_form_type_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension A Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension instance.
     */
    protected function getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService()
    {
        return $this->services['nelmio_api_doc.form.extension.description_form_type_extension'] = new \Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.abstract_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\AbstractFormatter A Nelmio\ApiDocBundle\Formatter\AbstractFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_AbstractFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.abstract_formatter'] = new \Nelmio\ApiDocBundle\Formatter\AbstractFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.html_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\HtmlFormatter A Nelmio\ApiDocBundle\Formatter\HtmlFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_HtmlFormatterService()
    {
        $this->services['nelmio_api_doc.formatter.html_formatter'] = $instance = new \Nelmio\ApiDocBundle\Formatter\HtmlFormatter();

        $instance->setTemplatingEngine($this->get('templating'));
        $instance->setMotdTemplate('NelmioApiDocBundle::Components/motd.html.twig');
        $instance->setApiName('API documentation');
        $instance->setEnableSandbox(true);
        $instance->setEndpoint(NULL);
        $instance->setRequestFormatMethod('format_param');
        $instance->setDefaultRequestFormat('json');
        $instance->setAcceptType('');
        $instance->setBodyFormat('form');
        $instance->setAuthentication(NULL);

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.markdown_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\MarkdownFormatter A Nelmio\ApiDocBundle\Formatter\MarkdownFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_MarkdownFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.markdown_formatter'] = new \Nelmio\ApiDocBundle\Formatter\MarkdownFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.simple_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\SimpleFormatter A Nelmio\ApiDocBundle\Formatter\SimpleFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_SimpleFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.simple_formatter'] = new \Nelmio\ApiDocBundle\Formatter\SimpleFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.parser.form_type_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\FormTypeParser A Nelmio\ApiDocBundle\Parser\FormTypeParser instance.
     */
    protected function getNelmioApiDoc_Parser_FormTypeParserService()
    {
        return $this->services['nelmio_api_doc.parser.form_type_parser'] = new \Nelmio\ApiDocBundle\Parser\FormTypeParser($this->get('form.factory'));
    }

    /**
     * Gets the 'nelmio_api_doc.parser.jms_metadata_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\JmsMetadataParser A Nelmio\ApiDocBundle\Parser\JmsMetadataParser instance.
     */
    protected function getNelmioApiDoc_Parser_JmsMetadataParserService()
    {
        return $this->services['nelmio_api_doc.parser.jms_metadata_parser'] = new \Nelmio\ApiDocBundle\Parser\JmsMetadataParser($this->get('jms_serializer.metadata_factory'), $this->get('jms_serializer.naming_strategy'), $this->get('nelmio_api_doc.doc_comment_extractor'));
    }

    /**
     * Gets the 'nelmio_api_doc.parser.validation_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\ValidationParser A Nelmio\ApiDocBundle\Parser\ValidationParser instance.
     */
    protected function getNelmioApiDoc_Parser_ValidationParserService()
    {
        return $this->services['nelmio_api_doc.parser.validation_parser'] = new \Nelmio\ApiDocBundle\Parser\ValidationParser($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'nelmio_api_doc.twig.extension.extra_markdown' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension A Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension instance.
     */
    protected function getNelmioApiDoc_Twig_Extension_ExtraMarkdownService()
    {
        return $this->services['nelmio_api_doc.twig.extension.extra_markdown'] = new \Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension();
    }

    /**
     * Gets the 'oro_assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\AsseticBundle\Factory\OroAssetManager A Oro\Bundle\AsseticBundle\Factory\OroAssetManager instance.
     */
    protected function getOroAssetic_AssetManagerService()
    {
        return $this->services['oro_assetic.asset_manager'] = new \Oro\Bundle\AsseticBundle\Factory\OroAssetManager($this->get('assetic.asset_manager'), $this->get('twig'), array('css' => array(0 => 'UI', 1 => 'config', 2 => 'grids', 3 => 'email', 4 => 'entityextend', 5 => 'filters', 6 => 'user', 7 => 'windows', 8 => 'pim_ui')), array('css' => array()));
    }

    /**
     * Gets the 'oro_assetic.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\AsseticBundle\Twig\AsseticExtension A Oro\Bundle\AsseticBundle\Twig\AsseticExtension instance.
     */
    protected function getOroAssetic_Twig_ExtensionService()
    {
        return $this->services['oro_assetic.twig.extension'] = new \Oro\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), array('css' => array('compress' => array(0 => array(0 => 'bundles/oroui/css/less/main.less', 1 => 'bundles/oroui/css/all.css', 2 => 'bundles/oroui/lib/jstree/themes/default/style.css', 3 => 'bundles/oroui/css/jquery-ui.grid.css', 4 => 'bundles/oroui/lib/font-awesome/css/font-awesome.css', 5 => 'bundles/oroconfig/css/style.css', 6 => 'bundles/orodatagrid/lib/backgrid/backgrid.css', 7 => 'bundles/orodatagrid/lib/backgrid/extensions/paginator/backgrid-paginator.css', 8 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.css', 9 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.filter.css', 10 => 'bundles/orodatagrid/css/oro.grid.css', 11 => 'bundles/oroemail/css/style.css', 12 => 'bundles/oroentityextend/css/extend.css', 13 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.css', 14 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.filter.css', 15 => 'bundles/orofilter/css/oro.filter.css', 16 => 'bundles/orouser/css/jquery-ui-1.10.2.custom.css', 17 => 'bundles/orowindows/css/jquery.dialog.extended.css', 18 => 'bundles/pimui/css/slimbox2.css', 19 => 'bundles/pimui/css/flags.less')), 'uncompress' => array(0 => array()))), $this->get('templating.name_parser'), array(0 => 'OroAsseticBundle', 1 => 'OroUIBundle', 2 => 'OroUserBundle', 3 => 'OroFilterBundle', 4 => 'OroNavigationBundle', 5 => 'OroWindowsBundle', 6 => 'OroEntityExtendBundle', 7 => 'OroSecurityBundle', 8 => 'PimUIBundle', 9 => 'PimCatalogBundle', 10 => 'PimEnrichBundle', 11 => 'PimNotificationBundle', 14 => 'OroDataGridBundle'));
    }

    /**
     * Gets the 'oro_config.form.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber A Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber instance.
     */
    protected function getOroConfig_Form_ConfigSubscriberService()
    {
        return $this->services['oro_config.form.config_subscriber'] = new \Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber($this->get('oro_config.user'));
    }

    /**
     * Gets the 'oro_config.form.handler.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler A Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler instance.
     */
    protected function getOroConfig_Form_Handler_ConfigService()
    {
        return $this->services['oro_config.form.handler.config'] = new \Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler($this->get('oro_config.global'));
    }

    /**
     * Gets the 'oro_config.global' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Config\ConfigManager A Oro\Bundle\ConfigBundle\Config\ConfigManager instance.
     */
    protected function getOroConfig_GlobalService()
    {
        return $this->services['oro_config.global'] = new \Oro\Bundle\ConfigBundle\Config\ConfigManager($this->get('doctrine.orm.default_entity_manager'), array('oro_ui' => array('application_name' => array('value' => 'Akeneo', 'scope' => 'app'), 'application_title' => array('value' => 'Akeneo', 'scope' => 'app')), 'oro_locale' => array('locale' => array('value' => 'en', 'scope' => 'app'), 'language' => array('value' => 'en', 'scope' => 'app'), 'country' => array('value' => 'US', 'scope' => 'app'), 'currency' => array('value' => 'USD', 'scope' => 'app'), 'timezone' => array('value' => 'Europe/Paris', 'scope' => 'app'), 'format_address_by_address_country' => array('value' => true, 'scope' => 'app'), 'qwerty' => array('scope' => 'app')), 'oro_navigation' => array('maxItems' => array('value' => 20, 'scope' => 'app'), 'title_suffix' => array('value' => '', 'scope' => 'app'), 'title_delimiter' => array('value' => '-', 'scope' => 'app'), 'breadcrumb_menu' => array('value' => 'application_menu', 'scope' => 'app'))));
    }

    /**
     * Gets the 'oro_config.provider.system_configuration.form_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider A Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider instance.
     */
    protected function getOroConfig_Provider_SystemConfiguration_FormProviderService()
    {
        return $this->services['oro_config.provider.system_configuration.form_provider'] = new \Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider(array('groups' => array('platform' => array('title' => 'System configuration', 'icon' => 'icon-hdd'), 'general_setup' => array('title' => 'General setup'), 'localization' => array('title' => 'Localization', 'icon' => 'icon-flag'), 'locale_settings' => array('title' => 'Localization options')), 'fields' => array('oro_locale.locale' => array('type' => 'oro_locale', 'priority' => 70, 'options' => array('label' => 'Locale', 'tooltip' => 'oro.locale.form.tooltip.locale', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'acl_resource' => 'other_oro_applications'), 'oro_locale.country' => array('type' => 'oro_locale_country', 'priority' => 60, 'options' => array('label' => 'Location', 'tooltip' => 'oro.locale.form.tooltip.location', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'acl_resource' => 'other_oro_applications'), 'oro_locale.format_address_by_address_country' => array('type' => 'oro_config_checkbox', 'priority' => 50, 'options' => array('label' => 'Format address by address country', 'tooltip' => 'oro.locale.form.tooltip.format_address_by_address_country', 'required' => true), 'acl_resource' => 'other_oro_applications'), 'oro_locale.language' => array('type' => 'oro_locale', 'priority' => 40, 'options' => array('label' => 'Language', 'tooltip' => 'oro.locale.form.tooltip.language', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL)))), 'oro_locale.timezone' => array('type' => 'oro_locale_timezone', 'priority' => 30, 'options' => array('label' => 'Timezone', 'tooltip' => 'oro.locale.form.tooltip.timezone', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'acl_resource' => 'other_oro_applications'), 'oro_locale.currency' => array('type' => 'oro_currency', 'priority' => 20, 'options' => array('label' => 'Currency', 'tooltip' => 'oro.locale.form.tooltip.currency', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'acl_resource' => 'other_oro_applications')), 'tree' => array('system_configuration' => array('platform' => array('priority' => 255, 'children' => array('general_setup' => array('priority' => 255, 'children' => array('localization' => array('priority' => 254, 'children' => array('locale_settings' => array('priority' => 100, 'children' => array(0 => 'oro_locale.locale', 1 => 'oro_locale.country', 2 => 'oro_locale.format_address_by_address_country', 3 => 'oro_locale.language', 4 => 'oro_locale.timezone', 5 => 'oro_locale.currency'))))))))))), $this->get('form.factory'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_config.twig.config_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Twig\ConfigExtension A Oro\Bundle\ConfigBundle\Twig\ConfigExtension instance.
     */
    protected function getOroConfig_Twig_ConfigExtensionService()
    {
        return $this->services['oro_config.twig.config_extension'] = new \Oro\Bundle\ConfigBundle\Twig\ConfigExtension($this->get('oro_config.global'), array('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'entity.email_template.name', 'description' => 'entity.email_template.description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'entity.email.name', 'description' => 'entity.email.description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'entity.business_unit.name', 'description' => 'entity.business_unit.description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'entity.user.name', 'description' => 'entity.user.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'entity.role.name', 'description' => 'entity.role.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'entity.group.name', 'description' => 'entity.group.description'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category' => array('icon_class' => 'icon-category', 'name' => 'Category', 'description' => 'Category allows to organize products'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product' => array('icon_class' => 'icon-product', 'name' => 'Product', 'description' => 'Product description')));
    }

    /**
     * Gets the 'oro_config.type.config_checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox A Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox instance.
     */
    protected function getOroConfig_Type_ConfigCheckboxService()
    {
        return $this->services['oro_config.type.config_checkbox'] = new \Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox();
    }

    /**
     * Gets the 'oro_config.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Form\Type\FormType A Oro\Bundle\ConfigBundle\Form\Type\FormType instance.
     */
    protected function getOroConfig_Type_FormService()
    {
        return $this->services['oro_config.type.form'] = new \Oro\Bundle\ConfigBundle\Form\Type\FormType($this->get('oro_config.form.config_subscriber'));
    }

    /**
     * Gets the 'oro_config.type.form_field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Form\Type\FormFieldType A Oro\Bundle\ConfigBundle\Form\Type\FormFieldType instance.
     */
    protected function getOroConfig_Type_FormFieldService()
    {
        return $this->services['oro_config.type.form_field'] = new \Oro\Bundle\ConfigBundle\Form\Type\FormFieldType();
    }

    /**
     * Gets the 'oro_config.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ConfigBundle\Config\UserConfigManager A Oro\Bundle\ConfigBundle\Config\UserConfigManager instance.
     */
    protected function getOroConfig_UserService()
    {
        $this->services['oro_config.user'] = $instance = new \Oro\Bundle\ConfigBundle\Config\UserConfigManager($this->get('doctrine.orm.default_entity_manager'), array('oro_ui' => array('application_name' => array('value' => 'Akeneo', 'scope' => 'app'), 'application_title' => array('value' => 'Akeneo', 'scope' => 'app')), 'oro_locale' => array('locale' => array('value' => 'en', 'scope' => 'app'), 'language' => array('value' => 'en', 'scope' => 'app'), 'country' => array('value' => 'US', 'scope' => 'app'), 'currency' => array('value' => 'USD', 'scope' => 'app'), 'timezone' => array('value' => 'Europe/Paris', 'scope' => 'app'), 'format_address_by_address_country' => array('value' => true, 'scope' => 'app'), 'qwerty' => array('scope' => 'app')), 'oro_navigation' => array('maxItems' => array('value' => 20, 'scope' => 'app'), 'title_suffix' => array('value' => '', 'scope' => 'app'), 'title_delimiter' => array('value' => '-', 'scope' => 'app'), 'breadcrumb_menu' => array('value' => 'application_menu', 'scope' => 'app'))));

        $instance->setSecurity($this->get('security.context'));

        return $instance;
    }

    /**
     * Gets the 'oro_dataaudit.dataaudit_grid_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener instance.
     */
    protected function getOroDataaudit_DataauditGridServiceService()
    {
        return $this->services['oro_dataaudit.dataaudit_grid_service'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_dataaudit.event_listener.dataaudit_history_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener instance.
     */
    protected function getOroDataaudit_EventListener_DataauditHistoryGridListenerService()
    {
        return $this->services['oro_dataaudit.event_listener.dataaudit_history_grid_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener($this->get('oro_datagrid.datagrid.request_params'), array(0 => 'objectClass', 1 => 'objectId'));
    }

    /**
     * Gets the 'oro_dataaudit.listener.entity_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber A Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber instance.
     */
    protected function getOroDataaudit_Listener_EntitySubscriberService()
    {
        return $this->services['oro_dataaudit.listener.entity_subscriber'] = new \Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber($this->get('oro_dataaudit.loggable.loggable_manager'), new \Oro\Bundle\DataAuditBundle\Metadata\ExtendMetadataFactory(new \Oro\Bundle\DataAuditBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'))));
    }

    /**
     * Gets the 'oro_dataaudit.listener.kernel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\EventListener\KernelListener A Oro\Bundle\DataAuditBundle\EventListener\KernelListener instance.
     */
    protected function getOroDataaudit_Listener_KernelListenerService()
    {
        return $this->services['oro_dataaudit.listener.kernel_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\KernelListener($this->get('oro_dataaudit.loggable.loggable_manager'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_dataaudit.loggable.loggable_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\Loggable\LoggableManager A Oro\Bundle\DataAuditBundle\Loggable\LoggableManager instance.
     */
    protected function getOroDataaudit_Loggable_LoggableManagerService()
    {
        return $this->services['oro_dataaudit.loggable.loggable_manager'] = new \Oro\Bundle\DataAuditBundle\Loggable\LoggableManager('Oro\\Bundle\\DataAuditBundle\\Entity\\Audit', $this->get('oro_entity_config.provider.dataaudit'));
    }

    /**
     * Gets the 'oro_datagrid.configuration.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider A Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider instance.
     */
    protected function getOroDatagrid_Configuration_ProviderService()
    {
        return $this->services['oro_datagrid.configuration.provider'] = new \Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider(array('pim-group-user-grid' => array('extend' => 'pim-user-relation-grid', 'source' => array('acl_resource' => 'oro_user_group_update', 'query' => array('select' => array(0 => '(CASE WHEN (:group_id IS NOT NULL) THEN   CASE WHEN (:group_id MEMBER OF u.groups OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_group'))), 'columns' => array('has_group' => array('label' => 'Has group', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'filters' => array('columns' => array('has_group' => array('type' => 'boolean', 'data_name' => 'has_group', 'filter_by_having' => true), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_group' => array('data_name' => 'has_group')), 'default' => array('has_group' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_group', 'selectors' => array('included' => '#groupAppendUsers', 'excluded' => '#groupRemoveUsers')))), 'pim-role-user-grid' => array('extend' => 'pim-user-relation-grid', 'source' => array('acl_resource' => 'oro_user_role_update', 'query' => array('select' => array(0 => '(CASE WHEN (:role_id IS NOT NULL) THEN   CASE WHEN (:role_id MEMBER OF u.roles OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_role'))), 'columns' => array('has_role' => array('label' => 'Has role', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'filters' => array('columns' => array('has_role' => array('type' => 'boolean', 'data_name' => 'has_role', 'filter_by_having' => true), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_role' => array('data_name' => 'has_role')), 'default' => array('has_role' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_role', 'selectors' => array('included' => '#roleAppendUsers', 'excluded' => '#roleRemoveUsers')))), 'pim-role-grid' => array('options' => array('entityHint' => 'role'), 'source' => array('acl_resource' => 'oro_user_role_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'r.id', 1 => 'r.role', 2 => 'r.label'), 'from' => array(0 => array('table' => 'OroUserBundle:Role', 'alias' => 'r')), 'where' => array('and' => array(0 => 'r.role <> \'Oro\\Bundle\\UserBundle\\Entity\\User::ROLE_ANONYMOUS\'')))), 'columns' => array('label' => array('label' => 'oro.user.grid.roles.columns.label')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_role_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_role', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_role_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_role_remove')), 'sorters' => array('columns' => array('label' => array('data_name' => 'r.label')), 'default' => array('label' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('label' => array('type' => 'string', 'data_name' => 'r.label')))), 'pim-user-grid' => array('extended_entity_name' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'options' => array('entityHint' => 'user'), 'source' => array('acl_resource' => 'oro_user_user_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName', 5 => 'u.createdAt', 6 => 'u.updatedAt', 7 => 'u.enabled'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'alias' => 'u')))), 'columns' => array('username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'createdAt' => array('label' => 'oro.user.grid.users.columns.createdAt', 'frontend_type' => 'datetime'), 'updatedAt' => array('label' => 'oro.user.grid.users.columns.updatedAt', 'frontend_type' => 'datetime'), 'enabled' => array('label' => 'oro.user.grid.users.columns.enabled', 'frontend_type' => 'select', 'choices' => array(0 => 'Inactive', 1 => 'Active'))), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_user_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_user', 'params' => array(0 => 'id'))), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName'), 'createdAt' => array('data_name' => 'u.createdAt'), 'updatedAt' => array('data_name' => 'u.updatedAt'), 'enabled' => array('data_name' => 'u.enabled')), 'default' => array('username' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'createdAt' => array('type' => 'datetime', 'data_name' => 'u.createdAt'), 'updatedAt' => array('type' => 'datetime', 'data_name' => 'u.updatedAt'), 'enabled' => array('type' => 'choice', 'data_name' => 'u.enabled', 'options' => array('field_options' => array('choices' => array(0 => 'Inactive', 1 => 'Active')))))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'link' => 'view_link', 'icon' => 'user', 'acl_resource' => 'oro_user_user_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_user_update'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_user_delete'))), 'pim-user-relation-grid' => array('source' => array('type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName'), 'from' => array(0 => array('table' => 'OroUserBundle:User', 'alias' => 'u')))), 'columns' => array(), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName')), 'default' => array('id' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array()), 'pim-user-group-grid' => array('options' => array('entityHint' => 'group'), 'source' => array('acl_resource' => 'oro_user_group_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'g.id', 1 => 'g.name'), 'from' => array(0 => array('table' => 'OroUserBundle:Group', 'alias' => 'g')), 'where' => array('and' => array(0 => 'g.name <> \'Oro\\Bundle\\UserBundle\\Entity\\User::GROUP_DEFAULT\'')))), 'columns' => array('name' => array('label' => 'oro.user.grid.groups.columns.name')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_group_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_group', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_group_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_group_remove')), 'sorters' => array('columns' => array('name' => array('data_name' => 'g.name')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'g.name')))), 'job-execution-grid' => array('source' => array('type' => 'pim_datasource_default', 'entity' => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code', 'data_name' => 'jobCode'), 'label' => array('label' => 'Label', 'data_name' => 'jobLabel'), 'alias' => array('label' => 'Job', 'type' => 'translateable', 'data_name' => 'jobAlias'), 'date' => array('label' => 'Date', 'data_name' => 'date', 'frontend_type' => 'datetime'), 'status' => array('label' => 'Status', 'type' => 'translateable', 'data_name' => 'statusLabel')), 'properties' => array('id' => NULL, 'show_link' => array('type' => 'url', 'params' => array(0 => 'id'))), 'actions' => array('show' => array('type' => 'navigate', 'label' => 'pim.grid.action.show.title', 'icon' => 'list-alt', 'link' => 'show_link', 'rowAction' => true)), 'sorters' => array('columns' => array('code' => array('data_name' => 'jobCode'), 'label' => array('data_name' => 'jobLabel'), 'alias' => array('data_name' => 'jobAlias'), 'date' => array('data_name' => 'date'), 'status' => array('data_name' => 'statusLabel')), 'default' => array('date' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'data_name' => 'jobCode'), 'label' => array('type' => 'string', 'data_name' => 'jobLabel'), 'alias' => array('type' => 'choice', 'data_name' => 'j.alias', 'options' => array('field_options' => array('multiple' => true))), 'date' => array('type' => 'datetime', 'data_name' => 'date', 'filter_by_having' => true), 'status' => array('type' => 'choice', 'data_name' => 'status', 'filter_by_having' => true, 'options' => array('field_options' => array('multiple' => true, 'choices' => 'Akeneo\\Bundle\\BatchBundle\\Job\\BatchStatus::getAllLabels()')))))), 'export-profile-grid' => array('extend' => 'job-profile-grid', 'options' => array('entityHint' => 'export profile'), 'source' => array('acl_resource' => 'pim_importexport_export_profile_index'), 'properties' => array('edit_link' => array('route' => 'pim_importexport_export_profile_edit'), 'delete_link' => array('route' => 'pim_importexport_export_profile_remove'), 'show_link' => array('route' => 'pim_importexport_export_profile_show')), 'filters' => array('columns' => array('alias' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getExportJobChoices'))), 'connector' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getExportConnectorChoices')))))), 'import-execution-grid' => array('extend' => 'job-execution-grid', 'options' => array('entityHint' => 'import report'), 'source' => array('acl_resource' => 'pim_importexport_import_execution_index'), 'properties' => array('show_link' => array('route' => 'pim_importexport_import_execution_show')), 'filters' => array('columns' => array('alias' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getImportJobChoices')))))), 'job-profile-grid' => array('source' => array('type' => 'pim_datasource_default', 'entity' => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'alias' => array('label' => 'Job', 'type' => 'job_name'), 'connector' => array('label' => 'Connector'), 'status' => array('label' => 'Status', 'type' => 'translateable', 'data_name' => 'statusLabel')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'params' => array(0 => 'id')), 'show_link' => array('type' => 'url', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'pim.grid.action.show.title', 'icon' => 'eye-open', 'link' => 'show_link', 'rowAction' => true), 'edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('code' => array('data_name' => 'j.code'), 'label' => array('data_name' => 'j.label'), 'alias' => array('data_name' => 'jobAlias'), 'connector' => array('data_name' => 'j.connector'), 'status' => array('data_name' => 'statusLabel')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'data_name' => 'j.code'), 'label' => array('type' => 'string', 'data_name' => 'j.label'), 'alias' => array('type' => 'choice', 'data_name' => 'j.alias', 'options' => array('field_options' => array('multiple' => true))), 'connector' => array('type' => 'choice', 'data_name' => 'j.connector', 'options' => array('field_options' => array('multiple' => true))), 'status' => array('type' => 'choice', 'data_name' => 'j.status', 'options' => array('field_options' => array('multiple' => true, 'choices' => array(0 => 'pim_import_export.status.0'))))))), 'export-execution-grid' => array('extend' => 'job-execution-grid', 'options' => array('entityHint' => 'export report'), 'source' => array('acl_resource' => 'pim_importexport_export_execution_index'), 'properties' => array('show_link' => array('route' => 'pim_importexport_export_execution_show')), 'filters' => array('columns' => array('alias' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getExportJobChoices')))))), 'import-profile-grid' => array('extend' => 'job-profile-grid', 'options' => array('entityHint' => 'import profile'), 'source' => array('acl_resource' => 'pim_importexport_import_profile_index'), 'properties' => array('edit_link' => array('route' => 'pim_importexport_import_profile_edit'), 'delete_link' => array('route' => 'pim_importexport_import_profile_remove'), 'show_link' => array('route' => 'pim_importexport_import_profile_show')), 'filters' => array('columns' => array('alias' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getImportJobChoices'))), 'connector' => array('options' => array('field_options' => array('choices' => '@pim_import_export.datagrid.provider.job->getImportConnectorChoices')))))), 'association-product-grid' => array('options' => array('entityHint' => 'product', 'requireJSModules' => array(0 => 'pim/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'is_checked')), 'source' => array('type' => 'pim_datasource_associated_product', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'repository_method' => 'createAssociationDatagridQueryBuilder', 'user_config_alias' => 'product-grid', 'repository_parameters' => array(0 => 'product')), 'columns' => array('is_checked' => array('frontend_type' => 'boolean', 'data_name' => 'is_checked', 'editable' => true), 'is_associated' => array('label' => 'Is associated', 'data_name' => 'is_associated', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:boolean.html.twig', 'frontend_type' => 'html', 'primary' => true), 'label' => array('label' => 'Label', 'data_name' => 'productLabel', 'selector' => 'product_label'), 'family' => array('label' => 'Family', 'data_name' => 'familyLabel', 'selector' => 'product_family'), 'enabled' => array('label' => 'Status', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:enabled.html.twig', 'frontend_type' => 'html'), 'completeness' => array('label' => 'Complete', 'type' => 'twig', 'data_name' => 'ratio', 'template' => 'PimDataGridBundle:Property:completeness.html.twig', 'frontend_type' => 'html', 'selector' => 'product_completeness'), 'created' => array('label' => 'Created', 'frontend_type' => 'date'), 'updated' => array('label' => 'Updated', 'frontend_type' => 'date')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('is_associated' => array('data_name' => 'is_associated', 'sorter' => 'product_is_associated'), 'family' => array('data_name' => 'familyLabel', 'sorter' => 'product_family'), 'enabled' => array('data_name' => 'enabled', 'sorter' => 'product_field'), 'completeness' => array('data_name' => 'ratio', 'sorter' => 'product_completeness'), 'created' => array('data_name' => 'created', 'sorter' => 'product_field'), 'updated' => array('data_name' => 'updated', 'sorter' => 'product_field')), 'default' => array('is_associated' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('is_associated' => array('type' => 'product_is_associated', 'ftype' => 'boolean', 'label' => 'Is associated', 'data_name' => 'is_associated'), 'family' => array('type' => 'product_family', 'label' => 'Family', 'data_name' => 'family', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.family->getChoices'))), 'enabled' => array('type' => 'product_enabled', 'ftype' => 'choice', 'label' => 'Status', 'data_name' => 'enabled', 'options' => array('field_options' => array('choices' => array(1 => 'Enabled', 0 => 'Disabled')))), 'completeness' => array('type' => 'product_completeness', 'label' => 'Complete', 'data_name' => 'ratio'), 'created' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'created', 'label' => 'Created At'), 'updated' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'updated', 'label' => 'Updated At'), 'scope' => array('type' => 'product_scope', 'label' => 'Scope', 'data_name' => 'values.scope', 'options' => array('field_options' => array('choices' => '@pim_catalog.manager.channel->getChannelChoices'))), 'category' => array('type' => 'product_category', 'label' => 'Category', 'data_name' => 'category')), 'default' => array('category' => array('value' => array('treeId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::UNKNOWN_TREE', 'categoryId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::ALL_CATEGORY'), 'type' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::DEFAULT_TYPE')))), 'history-grid' => array('source' => array('type' => 'pim_datasource_smart', 'entity' => 'Pim\\Bundle\\VersioningBundle\\Model\\Version', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('version' => array('label' => 'Version', 'type' => 'field', 'frontend_type' => 'integer'), 'author' => array('label' => 'Author', 'type' => 'field', 'frontend_type' => 'string'), 'loggedAt' => array('label' => 'Logged at', 'type' => 'field', 'frontend_type' => 'datetime'), 'old' => array('label' => 'Old values', 'type' => 'twig', 'template' => 'PimVersioningBundle:Datagrid:Property/old.html.twig', 'frontend_type' => 'html', 'data_name' => 'changeset'), 'new' => array('label' => 'New values', 'type' => 'twig', 'template' => 'PimVersioningBundle:Datagrid:Property/new.html.twig', 'frontend_type' => 'html', 'data_name' => 'changeset')), 'sorters' => array('columns' => array('version' => array('data_name' => 'version'), 'author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'loggedAt')), 'default' => array('loggedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC'))), 'group-type-grid' => array('extend' => 'translatable-entity-grid', 'options' => array('entityHint' => 'group type'), 'source' => array('acl_resource' => 'pim_enrich_group_type_index', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\GroupType'), 'properties' => array('edit_link' => array('route' => 'pim_enrich_group_type_edit'), 'delete_link' => array('route' => 'pim_enrich_group_type_remove')), 'sorters' => array('columns' => array('code' => array('data_name' => 'g.code'))), 'filters' => array('columns' => array('code' => array('data_name' => 'g.code')))), 'group-grid' => array('options' => array('entityHint' => 'group'), 'source' => array('acl_resource' => 'pim_enrich_group_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'type' => array('label' => 'Type')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'route' => 'pim_enrich_group_edit', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'pim_enrich_group_remove', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('code' => array('data_name' => 'g.code'), 'label' => array('data_name' => 'groupLabel'), 'type' => array('data_name' => 'typeLabel')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'g.code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'translation.label'), 'type' => array('type' => 'choice', 'label' => 'Type', 'data_name' => 'g.type', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.group->getTypeChoices')))))), 'association-group-grid' => array('options' => array('entityHint' => 'group', 'requireJSModules' => array(0 => 'pim/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'is_checked')), 'source' => array('type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'repository_method' => 'createAssociationDatagridQueryBuilder'), 'columns' => array('is_checked' => array('frontend_type' => 'boolean', 'data_name' => 'is_checked', 'editable' => true), 'is_associated' => array('label' => 'Is associated', 'data_name' => 'is_associated', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:boolean.html.twig', 'frontend_type' => 'html', 'primary' => true), 'code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'type' => array('label' => 'Type')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('is_associated' => array('data_name' => 'is_associated'), 'code' => array('data_name' => 'g.code'), 'label' => array('data_name' => 'groupLabel'), 'type' => array('data_name' => 'typeLabel')), 'default' => array('is_associated' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('is_associated' => array('type' => 'boolean', 'label' => 'Is associated', 'data_name' => 'is_associated', 'filter_by_having' => true), 'code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'g.code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'translation.label'), 'type' => array('type' => 'choice', 'label' => 'Type', 'data_name' => 'g.type', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.group->getTypeChoices')))))), 'variant-group-grid' => array('options' => array('entityHint' => 'group'), 'source' => array('acl_resource' => 'pim_enrich_variant_group_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'attributes' => array('label' => 'Axis', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:options.html.twig', 'frontend_type' => 'html')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'route' => 'pim_enrich_variant_group_edit', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'pim_enrich_variant_group_remove', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('code' => array('data_name' => 'g.code'), 'label' => array('data_name' => 'groupLabel')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'g.code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'translation.label'), 'attributes' => array('type' => 'choice', 'label' => 'Axis', 'data_name' => 'attribute', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.group->getAvailableAxisChoices')))))), 'translatable-entity-grid' => array('options' => array('locale_parameter' => 'localeCode'), 'source' => array('type' => 'pim_datasource_default', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('label' => array('data_name' => 'label')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'translation.label')))), 'attribute-grid' => array('extend' => 'translatable-entity-grid', 'options' => array('entityHint' => 'attribute'), 'source' => array('acl_resource' => 'pim_enrich_attribute_index', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute'), 'columns' => array('attributeType' => array('label' => 'Type', 'type' => 'translateable'), 'scopable' => array('label' => 'Scopable', 'frontend_type' => 'boolean'), 'localizable' => array('label' => 'Localizable', 'frontend_type' => 'boolean'), 'group' => array('label' => 'Group', 'data_name' => 'groupLabel')), 'properties' => array('edit_link' => array('route' => 'pim_enrich_attribute_edit'), 'delete_link' => array('route' => 'pim_enrich_attribute_remove')), 'sorters' => array('columns' => array('code' => array('data_name' => 'a.code'), 'scopable' => array('data_name' => 'a.scopable'), 'localizable' => array('data_name' => 'a.localizable'), 'group' => array('data_name' => 'groupLabel'))), 'filters' => array('columns' => array('code' => array('data_name' => 'a.code'), 'attributeType' => array('type' => 'choice', 'data_name' => 'a.attributeType', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.attribute->getAttributeTypes'))), 'scopable' => array('type' => 'boolean', 'data_name' => 'a.scopable'), 'localizable' => array('type' => 'boolean', 'data_name' => 'a.localizable'), 'group' => array('type' => 'choice', 'data_name' => 'attributeGroup.code', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.repository.attribute_group->getAttributeGroupChoices')))))), 'product-group-grid' => array('options' => array('entityHint' => 'product', 'requireJSModules' => array(0 => 'pim/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'is_checked', 'selectors' => array('included' => '#appendProducts', 'excluded' => '#removeProducts'))), 'source' => array('acl_resource' => 'pim_enrich_product_index', 'type' => 'pim_datasource_product', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'repository_method' => 'createGroupDatagridQueryBuilder', 'user_config_alias' => 'product-grid'), 'columns' => array('is_checked' => array('frontend_type' => 'boolean', 'data_name' => 'is_checked', 'editable' => true), 'in_group' => array('label' => 'In group', 'data_name' => 'in_group', 'selector' => 'product_in_group', 'type' => 'twig', 'primary' => true, 'template' => 'PimDataGridBundle:Property:boolean.html.twig', 'frontend_type' => 'html'), 'label' => array('label' => 'Label', 'data_name' => 'productLabel', 'selector' => 'product_label'), 'family' => array('label' => 'Family', 'data_name' => 'familyLabel', 'selector' => 'product_family'), 'enabled' => array('label' => 'Status', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:enabled.html.twig', 'frontend_type' => 'html'), 'completeness' => array('label' => 'Complete', 'type' => 'twig', 'data_name' => 'ratio', 'template' => 'PimDataGridBundle:Property:completeness.html.twig', 'frontend_type' => 'html', 'selector' => 'product_completeness'), 'created' => array('label' => 'Created At', 'frontend_type' => 'date'), 'updated' => array('label' => 'Updated At', 'frontend_type' => 'date')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('in_group' => array('data_name' => 'in_group', 'sorter' => 'product_in_group'), 'family' => array('data_name' => 'familyLabel', 'sorter' => 'product_family'), 'enabled' => array('data_name' => 'enabled', 'sorter' => 'product_field'), 'completeness' => array('data_name' => 'ratio', 'sorter' => 'product_completeness'), 'created' => array('data_name' => 'created', 'sorter' => 'product_field'), 'updated' => array('data_name' => 'updated', 'sorter' => 'product_field')), 'default' => array('in_group' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('in_group' => array('type' => 'product_in_group', 'ftype' => 'boolean', 'label' => 'In group', 'data_name' => 'in_group'), 'family' => array('type' => 'product_family', 'label' => 'Family', 'data_name' => 'family', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.family->getChoices'))), 'enabled' => array('type' => 'product_enabled', 'ftype' => 'choice', 'label' => 'Status', 'data_name' => 'enabled', 'options' => array('field_options' => array('choices' => array(1 => 'Enabled', 0 => 'Disabled')))), 'completeness' => array('type' => 'product_completeness', 'label' => 'Complete', 'data_name' => 'ratio'), 'created' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'created', 'label' => 'Created At'), 'updated' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'updated', 'label' => 'Updated At'), 'scope' => array('type' => 'product_scope', 'label' => 'Scope', 'data_name' => 'values.scope', 'options' => array('field_options' => array('choices' => '@pim_catalog.manager.channel->getChannelChoices'))), 'category' => array('type' => 'product_category', 'label' => 'Category', 'data_name' => 'category')), 'default' => array('category' => array('value' => array('treeId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::UNKNOWN_TREE', 'categoryId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::ALL_CATEGORY'), 'type' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::DEFAULT_TYPE')))), 'family-grid' => array('options' => array('entityHint' => 'family', 'locale_parameter' => 'localeCode'), 'source' => array('acl_resource' => 'pim_enrich_family_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Family', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'attributeAsLabel' => array('label' => 'Attribute as label')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'route' => 'pim_enrich_family_edit', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'pim_enrich_family_remove', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('code' => array('data_name' => 'f.code'), 'label' => array('data_name' => 'familyLabel'), 'attributeAsLabel' => array('data_name' => 'f.attributeAsLabel')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'f.code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'translation.label'), 'attributeAsLabel' => array('type' => 'choice', 'label' => 'Attribute as label', 'data_name' => 'f.attributeAsLabel', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.repository.attribute->getAvailableAttributesAsLabelChoice'))))), 'mass_actions' => array('mass_edit' => array('type' => 'edit', 'label' => 'pim.grid.mass_action.mass_edit', 'route' => 'pim_enrich_mass_edit_action_choose', 'acl_resource' => 'pim_enrich_family_edit_attributes', 'icon' => 'edit'))), 'channel-grid' => array('options' => array('entityHint' => 'channel', 'locale_parameter' => 'localeCode'), 'source' => array('acl_resource' => 'pim_enrich_channel_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'label' => array('label' => 'Label'), 'category' => array('label' => 'Category tree', 'data_name' => 'categoryLabel')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'route' => 'pim_enrich_channel_edit', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'pim_enrich_channel_remove', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => array('columns' => array('code' => array('data_name' => 'c.code'), 'label' => array('data_name' => 'c.label'), 'category' => array('data_name' => 'categoryLabel')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'c.code'), 'label' => array('type' => 'string', 'label' => 'Label', 'data_name' => 'c.label'), 'category' => array('type' => 'choice', 'label' => 'Category tree', 'data_name' => 'category.id', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.category->getTreeChoices')))))), 'product-variant-group-grid' => array('options' => array('entityHint' => 'product', 'requireJSModules' => array(0 => 'pim/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'is_checked', 'selectors' => array('included' => '#appendProducts', 'excluded' => '#removeProducts'))), 'source' => array('acl_resource' => 'pim_enrich_product_index', 'type' => 'pim_datasource_product', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'repository_method' => 'createVariantGroupDatagridQueryBuilder', 'repository_parameters' => array(0 => 'currentGroup')), 'columns' => array('is_checked' => array('frontend_type' => 'boolean', 'data_name' => 'is_checked', 'editable' => true), 'in_group' => array('label' => 'In group', 'data_name' => 'in_group', 'selector' => 'product_in_group', 'type' => 'twig', 'primary' => true, 'template' => 'PimDataGridBundle:Property:boolean.html.twig', 'frontend_type' => 'html'), 'label' => array('label' => 'Label', 'data_name' => 'productLabel', 'selector' => 'product_label'), 'family' => array('label' => 'Family', 'data_name' => 'familyLabel', 'selector' => 'product_family'), 'enabled' => array('label' => 'Status', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:enabled.html.twig', 'frontend_type' => 'html'), 'completeness' => array('label' => 'Complete', 'type' => 'twig', 'data_name' => 'ratio', 'template' => 'PimDataGridBundle:Property:completeness.html.twig', 'frontend_type' => 'html', 'selector' => 'product_completeness'), 'created' => array('label' => 'Created At', 'frontend_type' => 'date'), 'updated' => array('label' => 'Updated At', 'frontend_type' => 'date')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('in_group' => array('data_name' => 'in_group', 'sorter' => 'product_in_group'), 'family' => array('data_name' => 'familyLabel', 'sorter' => 'product_family'), 'enabled' => array('data_name' => 'enabled', 'sorter' => 'product_field'), 'completeness' => array('data_name' => 'ratio', 'sorter' => 'product_completeness'), 'created' => array('data_name' => 'created', 'sorter' => 'product_field'), 'updated' => array('data_name' => 'updated', 'sorter' => 'product_field')), 'default' => array('in_group' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('in_group' => array('type' => 'product_in_group', 'ftype' => 'boolean', 'label' => 'In group', 'data_name' => 'in_group'), 'family' => array('type' => 'product_family', 'label' => 'Family', 'data_name' => 'family', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@pim_catalog.manager.family->getChoices'))), 'enabled' => array('type' => 'product_enabled', 'ftype' => 'choice', 'label' => 'Status', 'data_name' => 'enabled', 'options' => array('field_options' => array('choices' => array(1 => 'Enabled', 0 => 'Disabled')))), 'completeness' => array('type' => 'product_completeness', 'label' => 'Complete', 'data_name' => 'ratio'), 'created' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'created', 'label' => 'Created At'), 'updated' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'updated', 'label' => 'Updated At'), 'scope' => array('type' => 'product_scope', 'label' => 'Scope', 'data_name' => 'values.scope', 'options' => array('field_options' => array('choices' => '@pim_catalog.manager.channel->getChannelChoices'))), 'category' => array('type' => 'product_category', 'label' => 'Category', 'data_name' => 'category')), 'default' => array('category' => array('value' => array('treeId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::UNKNOWN_TREE', 'categoryId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::ALL_CATEGORY'), 'type' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::DEFAULT_TYPE')))), 'product-grid' => array('options' => array('entityHint' => 'product', 'requireJSModules' => array(0 => 'pim/datagrid/export-action', 1 => 'pim/datagrid/configure-columns-action')), 'source' => array('acl_resource' => 'pim_enrich_product_index', 'type' => 'pim_datasource_product', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('label' => array('label' => 'Label', 'data_name' => 'productLabel', 'selector' => 'product_label'), 'family' => array('label' => 'Family', 'data_name' => 'familyLabel', 'selector' => 'product_family'), 'enabled' => array('label' => 'Status', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:enabled.html.twig', 'frontend_type' => 'html'), 'completeness' => array('label' => 'Complete', 'type' => 'twig', 'data_name' => 'ratio', 'template' => 'PimDataGridBundle:Property:completeness.html.twig', 'frontend_type' => 'html', 'selector' => 'product_completeness'), 'created' => array('label' => 'Created At', 'frontend_type' => 'date'), 'updated' => array('label' => 'Updated At', 'frontend_type' => 'date'), 'groups' => array('label' => 'Groups', 'type' => 'product_groups', 'selector' => 'product_groups')), 'properties' => array('id' => NULL, 'edit_link' => array('type' => 'url', 'route' => 'pim_enrich_product_edit', 'params' => array(0 => 'id', 1 => 'dataLocale')), 'delete_link' => array('type' => 'url', 'route' => 'pim_enrich_product_remove', 'params' => array(0 => 'id')), 'toggle_status_link' => array('type' => 'url', 'route' => 'pim_enrich_product_toggle_status', 'params' => array(0 => 'id'))), 'actions' => array('edit' => array('type' => 'tab-redirect', 'label' => 'Edit attributes of the product', 'tab' => 'pim_enrich-product-tab-attribute', 'icon' => 'edit', 'link' => 'edit_link', 'rowAction' => true), 'edit_categories' => array('type' => 'tab-redirect', 'label' => 'Classify the product', 'tab' => 'pim_enrich-product-tab-category', 'icon' => 'folder-close', 'link' => 'edit_link'), 'delete' => array('type' => 'delete', 'label' => 'Delete the product', 'icon' => 'trash', 'link' => 'delete_link', 'acl_resource' => 'pim_enrich_product_remove'), 'toggle_status' => array('type' => 'ajax', 'label' => 'Toggle status', 'icon' => 'retweet', 'link' => 'toggle_status_link')), 'mass_actions' => array('delete' => array('type' => 'delete', 'label' => 'pim.grid.mass_action.delete', 'entity_name' => 'product', 'acl_resource' => 'pim_enrich_product_remove', 'handler' => 'product_mass_delete', 'messages' => array('confirm_title' => 'pim_datagrid.mass_action.delete.confirm_title', 'confirm_content' => 'pim_datagrid.mass_action.delete.confirm_content', 'confirm_ok' => 'pim_datagrid.mass_action.delete.confirm_ok', 'success' => 'pim_datagrid.mass_action.delete.success', 'error' => 'pim_datagrid.mass_action.delete.error', 'empty_selection' => 'pim_datagrid.mass_action.delete.empty_selection'), 'launcherOptions' => array('icon' => 'trash')), 'quick_export_csv' => array('type' => 'export', 'label' => 'pim.grid.mass_action.quick_export.csv_all', 'icon' => 'download', 'handler' => 'product_quick_export', 'route' => 'pim_datagrid_export_product_index', 'route_parameters' => array('_format' => 'csv', '_contentType' => 'text/csv'), 'context' => array('withHeader' => true), 'messages' => array('empty_selection' => 'No products selected')), 'mass_edit' => array('type' => 'edit', 'acl_resource' => 'pim_enrich_mass_edit', 'label' => 'pim.grid.mass_action.mass_edit', 'handler' => 'product_mass_edit', 'route' => 'pim_enrich_mass_edit_action_choose', 'icon' => 'edit'), 'sequential_edit' => array('type' => 'edit', 'acl_resource' => 'pim_enrich_product_edit_attributes', 'label' => 'pim.grid.mass_action.sequential_edit', 'handler' => 'sequential_edit', 'route' => 'pim_enrich_mass_edit_action_sequential_edit', 'icon' => 'sort-by-attributes')), 'sorters' => array('columns' => array('family' => array('data_name' => 'familyLabel', 'sorter' => 'product_family'), 'enabled' => array('data_name' => 'enabled', 'sorter' => 'product_field'), 'completeness' => array('data_name' => 'ratio', 'sorter' => 'product_completeness'), 'created' => array('data_name' => 'created', 'sorter' => 'product_field'), 'updated' => array('data_name' => 'updated', 'sorter' => 'product_field')), 'default' => array('updated' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('family' => array('type' => 'product_family', 'label' => 'Family', 'data_name' => 'family', 'options' => array('field_options' => array('attr' => array('empty_choice' => true), 'multiple' => true, 'choices' => '@pim_catalog.manager.family->getChoices'))), 'groups' => array('type' => 'product_groups', 'label' => 'Groups', 'data_name' => 'groups', 'options' => array('field_options' => array('multiple' => true))), 'enabled' => array('type' => 'product_enabled', 'ftype' => 'choice', 'label' => 'Status', 'data_name' => 'enabled', 'options' => array('field_options' => array('choices' => array(1 => 'Enabled', 0 => 'Disabled')))), 'scope' => array('type' => 'product_scope', 'label' => 'Scope', 'data_name' => 'values.scope', 'options' => array('field_options' => array('choices' => '@pim_catalog.manager.channel->getChannelChoices'))), 'category' => array('type' => 'product_category', 'label' => 'Category', 'data_name' => 'category'), 'completeness' => array('type' => 'product_completeness', 'label' => 'Complete', 'data_name' => 'ratio'), 'created' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'created', 'label' => 'Created At'), 'updated' => array('type' => 'product_date', 'ftype' => 'date', 'data_name' => 'updated', 'label' => 'Updated At')), 'default' => array('category' => array('value' => array('treeId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::UNKNOWN_TREE', 'categoryId' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::ALL_CATEGORY'), 'type' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter::DEFAULT_TYPE')))), 'association-type-grid' => array('extend' => 'translatable-entity-grid', 'options' => array('entityHint' => 'association type'), 'source' => array('acl_resource' => 'pim_enrich_association_type_index', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType'), 'properties' => array('edit_link' => array('route' => 'pim_enrich_association_type_edit'), 'delete_link' => array('route' => 'pim_enrich_association_type_remove')), 'sorters' => array('columns' => array('code' => array('data_name' => 'a.code'))), 'filters' => array('columns' => array('code' => array('data_name' => 'a.code')))), 'locale-grid' => array('options' => array('entityHint' => 'locale'), 'source' => array('acl_resource' => 'pim_enrich_locale_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code'), 'activated' => array('label' => 'Activated', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:activated.html.twig', 'frontend_type' => 'html')), 'properties' => NULL, 'actions' => NULL, 'sorters' => array('columns' => array('code' => array('data_name' => 'l.code'), 'activated' => array('data_name' => 'l.activated')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'l.code'), 'activated' => array('type' => 'boolean', 'label' => 'Activated', 'data_name' => 'l.activated')))), 'product-history-grid' => array('extend' => 'history-grid'), 'currency-grid' => array('options' => array('entityHint' => 'currency'), 'source' => array('acl_resource' => 'pim_enrich_currency_index', 'type' => 'pim_datasource_default', 'entity' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Currency', 'repository_method' => 'createDatagridQueryBuilder'), 'columns' => array('code' => array('label' => 'Code', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:currency_label.html.twig', 'frontend_type' => 'html'), 'activated' => array('label' => 'Activated', 'type' => 'twig', 'template' => 'PimDataGridBundle:Property:activated.html.twig', 'frontend_type' => 'html')), 'properties' => array('id' => NULL, 'toggle_link' => array('type' => 'url', 'route' => 'pim_enrich_currency_toggle', 'params' => array(0 => 'id'))), 'actions' => array('toggle' => array('type' => 'navigate', 'label' => 'Change status', 'icon' => 'random', 'link' => 'toggle_link', 'acl_resource' => 'pim_enrich_currency_toggle')), 'sorters' => array('columns' => array('code' => array('data_name' => 'c.code'), 'activated' => array('data_name' => 'c.activated')), 'default' => array('code' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('code' => array('type' => 'string', 'label' => 'Code', 'data_name' => 'c.code'), 'activated' => array('type' => 'boolean', 'label' => 'Activated', 'data_name' => 'c.activated')))), 'email-grid' => array('source' => array('acl_resource' => 'oro_email_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'e', 1 => '@oro_email.datagrid_query_factory->getFromEmailExpression()'), 'from' => array(0 => array('table' => 'OroEmailBundle:Email', 'alias' => 'e')), 'join' => array('inner' => array('from_email_address' => array('join' => 'e.fromEmailAddress', 'alias' => 'a'))))), 'columns' => array('fromEmailAddress' => array('type' => 'twig', 'label' => 'oro.email.datagrid.email.from_name', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/from.html.twig'), 'subject' => array('type' => 'twig', 'label' => 'oro.email.datagrid.email.subject', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/subject.html.twig'), 'sentAt' => array('label' => 'oro.email.datagrid.email.sentAt', 'frontend_type' => 'datetime'), 'recipients' => array('type' => 'twig', 'label' => 'oro.email.datagrid.email.recipients', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/recipients.html.twig')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('subject' => array('data_name' => 'e.subject'), 'sentAt' => array('data_name' => 'e.sentAt')), 'default' => array('sentAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('fromEmailAddress' => array('type' => 'string', 'data_name' => 'a.email'), 'subject' => array('type' => 'string', 'data_name' => 'e.subject'), 'sentAt' => array('type' => 'datetime', 'data_name' => 'e.sentAt'))), 'options' => array('entityHint' => 'email')), 'email-templates' => array('source' => array('type' => 'orm', 'acl_resource' => 'oro_email_emailtemplate_index', 'query' => array('select' => array(0 => 't.id', 1 => 't.entityName', 2 => 't.name', 3 => 't.type', 4 => 't.isSystem'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate', 'alias' => 't')))), 'columns' => array('entityName' => array('type' => 'twig', 'frontend_type' => 'html', 'label' => 'oro.email.datagrid.emailtemplate.column.entity_name', 'template' => 'OroNotificationBundle:EmailNotification:Datagrid/Property/entityName.html.twig'), 'name' => array('label' => 'oro.email.datagrid.emailtemplate.column.name'), 'type' => array('frontend_type' => 'select', 'label' => 'oro.email.datagrid.emailtemplate.column.type', 'choices' => '@oro_email.emailtemplate.datagrid_helper->getTypeChoices'), 'isSystem' => array('frontend_type' => 'select', 'label' => 'oro.email.datagrid.emailtemplate.column.isSystem', 'choices' => '@oro_email.emailtemplate.datagrid_helper->getSystemChoices')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_email_emailtemplate_update', 'params' => array(0 => 'id')), 'clone_link' => array('type' => 'url', 'route' => 'oro_email_emailtemplate_clone', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_emailtemplate', 'params' => array(0 => 'id'))), 'filters' => array('columns' => array('entityName' => array('type' => 'choice', 'label' => 'oro.email.datagrid.emailtemplate.column.entity_name', 'data_name' => 't.entityName', 'options' => array('translation_domain' => 'config', 'field_options' => array('multiple' => true, 'choices' => '@oro_email.emailtemplate.datagrid_helper->getEntityNameChoices'))), 'name' => array('type' => 'string', 'data_name' => 't.name', 'label' => 'oro.email.datagrid.emailtemplate.column.name'), 'type' => array('type' => 'choice', 'label' => 'oro.email.datagrid.emailtemplate.column.type', 'data_name' => 't.type', 'options' => array('field_options' => array('choices' => '@oro_email.emailtemplate.datagrid_helper->getTypeChoices'))), 'isSystem' => array('type' => 'boolean', 'label' => 'oro.email.datagrid.emailtemplate.column.isSystem', 'data_name' => 't.isSystem'))), 'sorters' => array('columns' => array('name' => array('data_name' => 't.name'), 'type' => array('data_name' => 't.type'), 'isSystem' => array('data_name' => 't.isSystem'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'oro.email.datagrid.emailtemplate.action.update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_email_emailtemplate_update', 'rowAction' => true), 'clone' => array('type' => 'navigate', 'label' => 'oro.email.datagrid.emailtemplate.action.clone', 'link' => 'clone_link', 'icon' => 'share', 'acl_resource' => 'oro_email_emailtemplate_create'), 'delete' => array('type' => 'delete', 'label' => 'oro.email.datagrid.emailtemplate.action.delete', 'acl_resource' => 'oro_email_emailtemplate_remove', 'icon' => 'trash', 'link' => 'delete_link')), 'action_configuration' => '@oro_email.emailtemplate.datagrid_helper->getActionConfigurationClosure', 'views_list' => '@oro_email.emailtemplate.datagrid_view_list', 'options' => array('entityHint' => 'email template')), 'custom-entity-grid' => array('options' => array('entityHint' => 'entity'), 'source' => array('acl_resource' => NULL, 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')))), 'columns' => NULL, 'properties' => array('id' => NULL, 'update_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_delete', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'icon' => 'book', 'link' => 'view_link', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'icon' => 'edit', 'link' => 'update_link'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => NULL, 'filters' => NULL), 'entity-relation-grid' => array('options' => array('entityHint' => 'entity', 'requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'assigned', 'selectors' => array('included' => '#appendRelation', 'excluded' => '#removeRelation'))), 'source' => array('acl_resource' => NULL, 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')))), 'columns' => array('assigned' => array('frontend_type' => 'boolean', 'label' => 'Assigned', 'editable' => true)), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('assigned' => array('data_name' => 'assigned')), 'default' => array('assigned' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('assigned' => array('type' => 'boolean', 'data_name' => 'assigned')))), 'entityconfig-grid' => array('options' => array('entityHint' => 'entity', 'toolbarOptions' => array('pageSize' => array('default_per_page' => 50))), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id', 1 => 'ce.className', 2 => 'ce.updated', 3 => 'ce.mode'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')))), 'columns' => array('name' => array('label' => 'Name', 'data_name' => 'className', 'frontend_type' => 'select', 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesName'), 'module' => array('label' => 'Module', 'data_name' => 'className', 'frontend_type' => 'select', 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesModule'), 'updated' => array('label' => 'Update at', 'frontend_type' => 'datetime')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_entityconfig_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_entityconfig_view', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'icon' => 'book', 'link' => 'view_link', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'icon' => 'edit', 'link' => 'update_link')), 'sorters' => array('columns' => array('name' => array('data_name' => 'ce.className'), 'module' => array('data_name' => 'ce.className'), 'updated' => array('data_name' => 'ce.updated'))), 'filters' => array('columns' => array('name' => array('type' => 'choice', 'data_name' => 'ce.className', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesName'))), 'module' => array('type' => 'choice', 'data_name' => 'ce.className', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesModule'))), 'updated' => array('type' => 'datetime', 'data_name' => 'ce.updated')))), 'entityfields-grid' => array('options' => array('entityHint' => 'fields', 'toolbarOptions' => array('pageSize' => array('default_per_page' => 50))), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'cf.id', 1 => 'ce.className', 2 => 'cf.fieldName', 3 => 'cf.type', 4 => 'cf.mode'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:FieldConfigModel', 'alias' => 'cf')))), 'columns' => array('fieldName' => array('label' => 'Name', 'frontend_type' => 'string'), 'type' => array('label' => 'Data Type', 'frontend_type' => 'string')), 'properties' => array('update_link' => array('type' => 'url', 'route' => 'oro_entityconfig_field_update', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'update_link', 'rowAction' => true)), 'sorters' => array('columns' => array('fieldName' => array('data_name' => 'cf.fieldName'), 'type' => array('data_name' => 'cf.type'))), 'filters' => NULL), 'entity-audit-grid' => array('options' => array('entityHint' => 'history'), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'log', 1 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:ConfigLog', 'alias' => 'log')), 'join' => array('left' => array('user' => array('join' => 'log.user', 'alias' => 'u')), 'inner' => array('diffs' => array('join' => 'log.diffs', 'alias' => 'diff', 'conditionType' => 'WITH'))))), 'columns' => array('author' => array('label' => 'Author', 'type' => 'field', 'frontend_type' => 'string'), 'diffs' => array('label' => 'Diffs', 'type' => 'twig', 'template' => 'OroEntityConfigBundle:Audit:data.html.twig', 'frontend_type' => 'html', 'context' => array('config_manager' => '@oro_entity_config.config_manager')), 'loggedAt' => array('label' => 'Logged at', 'type' => 'field', 'frontend_type' => 'datetime')), 'sorters' => array('columns' => array('author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'log.loggedAt')), 'default' => array('loggedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC'))), 'audit-log-grid' => array('extend' => 'entity-audit-grid', 'source' => array('query' => array('join' => array('inner' => array('diffs' => array('condition' => 'diff.className = :objectClass AND diff.fieldName IS NULL'))))), 'columns' => array('diffs' => array('context' => array('is_entity' => true)))), 'auditfield-log-grid' => array('extend' => 'entity-audit-grid', 'source' => array('query' => array('join' => array('inner' => array('diffs' => array('condition' => 'diff.className = :objectClass AND diff.fieldName = :fieldName'))))), 'columns' => array('diffs' => array('context' => array('is_entity' => false, 'field_name' => NULL)))), 'business-unit-grid' => array('options' => array('entityHint' => 'business unit'), 'source' => array('acl_resource' => 'oro_business_unit_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.name', 2 => 'u.email', 3 => 'u.phone', 4 => 'u.createdAt', 5 => 'owner.name as ownerName', 6 => 'organization.name as organizationName'), 'from' => array(0 => array('table' => 'OroOrganizationBundle:BusinessUnit', 'alias' => 'u')), 'join' => array('left' => array('organization' => array('join' => 'u.organization', 'alias' => 'organization'), 'owner' => array('join' => 'u.owner', 'alias' => 'owner'))))), 'columns' => array('name' => array('label' => 'oro.business_unit.datagrid.name'), 'email' => array('label' => 'oro.business_unit.datagrid.email'), 'phone' => array('label' => 'oro.business_unit.datagrid.phone'), 'ownerName' => array('label' => 'oro.business_unit.datagrid.owner'), 'organizationName' => array('label' => 'oro.business_unit.datagrid.organization'), 'createdAt' => array('label' => 'oro.business_unit.datagrid.created_at', 'frontend_type' => 'datetime')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_business_unit_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_business_unit_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_businessunit', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'oro.business_unit.datagrid.action.view', 'link' => 'view_link', 'icon' => 'user', 'acl_resource' => 'oro_business_unit_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'oro.business_unit.datagrid.action.update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_business_unit_update'), 'delete' => array('type' => 'delete', 'label' => 'oro.business_unit.datagrid.action.delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_business_unit_delete')), 'sorters' => array('columns' => array('name' => array('data_name' => 'u.name'), 'email' => array('data_name' => 'u.email'), 'phone' => array('data_name' => 'u.phone'), 'ownerName' => array('data_name' => 'owner.name'), 'organizationName' => array('data_name' => 'organization.name'), 'createdAt' => array('data_name' => 'u.createdAt')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'u.name'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'phone' => array('type' => 'string', 'data_name' => 'u.phone'), 'ownerName' => array('type' => 'choice', 'data_name' => 'ownerName', 'filter_by_having' => true, 'options' => array('field_options' => array('choices' => '@oro_organization.provider.business_units_grid->getOwnerChoices'))), 'organizationName' => array('type' => 'choice', 'data_name' => 'organizationName', 'filter_by_having' => true, 'options' => array('field_options' => array('choices' => '@oro_organization.provider.business_units_grid->getOrganizationChoices'))), 'createdAt' => array('type' => 'datetime', 'data_name' => 'u.createdAt')))), 'bu-update-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_business_unit_update', 'query' => array('select' => array(0 => '(CASE WHEN (:business_unit_id IS NOT NULL) THEN   CASE WHEN (:business_unit_id MEMBER OF u.businessUnits OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as hasCurrentBusinessUnit'))), 'columns' => array('hasCurrentBusinessUnit' => array('label' => 'Has business unit', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'filters' => array('columns' => array('hasCurrentBusinessUnit' => array('type' => 'boolean', 'data_name' => 'hasCurrentBusinessUnit', 'filter_by_having' => true), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'))), 'sorters' => array('columns' => array('hasCurrentBusinessUnit' => array('data_name' => 'hasCurrentBusinessUnit')), 'default' => array('hasCurrentBusinessUnit' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('entityHint' => 'user', 'requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'hasCurrentBusinessUnit', 'selectors' => array('included' => '#businessUnitAppendUsers', 'excluded' => '#businessUnitRemoveUsers')))), 'bu-view-users-grid' => array('extend' => 'user-relation-grid', 'options' => array('entityHint' => 'user'), 'source' => array('acl_resource' => 'oro_business_unit_view', 'query' => array('where' => array('and' => array(0 => ':business_unit_id MEMBER OF u.businessUnits')))), 'columns' => array('firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'sorters' => array('default' => array('lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email')))), 'users-grid' => array('extended_entity_name' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'options' => array('entityHint' => 'user'), 'source' => array('acl_resource' => 'oro_user_user_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName', 5 => 'u.createdAt', 6 => 'u.updatedAt', 7 => 'u.enabled'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'alias' => 'u')))), 'columns' => array('username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'createdAt' => array('label' => 'oro.user.grid.users.columns.createdAt', 'frontend_type' => 'datetime'), 'updatedAt' => array('label' => 'oro.user.grid.users.columns.updatedAt', 'frontend_type' => 'datetime'), 'enabled' => array('label' => 'oro.user.grid.users.columns.enabled', 'frontend_type' => 'select', 'choices' => array(0 => 'Inactive', 1 => 'Active'))), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_user_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_user', 'params' => array(0 => 'id'))), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName'), 'createdAt' => array('data_name' => 'u.createdAt'), 'updatedAt' => array('data_name' => 'u.updatedAt'), 'enabled' => array('data_name' => 'u.enabled')), 'default' => array('username' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'createdAt' => array('type' => 'datetime', 'data_name' => 'u.createdAt'), 'updatedAt' => array('type' => 'datetime', 'data_name' => 'u.updatedAt'), 'enabled' => array('type' => 'choice', 'data_name' => 'u.enabled', 'options' => array('field_options' => array('choices' => array(0 => 'Inactive', 1 => 'Active')))))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'link' => 'view_link', 'icon' => 'user', 'acl_resource' => 'oro_user_user_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_user_update'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_user_delete'))), 'groups-grid' => array('options' => array('entityHint' => 'group'), 'source' => array('acl_resource' => 'oro_user_group_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'g.id', 1 => 'g.name'), 'from' => array(0 => array('table' => 'OroUserBundle:Group', 'alias' => 'g')), 'where' => array('and' => array(0 => 'g.name <> \'Oro\\Bundle\\UserBundle\\Entity\\User::GROUP_DEFAULT\'')))), 'columns' => array('name' => array('label' => 'oro.user.grid.groups.columns.name')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_group_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_group', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_group_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_group_remove')), 'sorters' => array('columns' => array('name' => array('data_name' => 'g.name')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'g.name')))), 'roles-grid' => array('options' => array('entityHint' => 'role'), 'source' => array('acl_resource' => 'oro_user_role_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'r.id', 1 => 'r.role', 2 => 'r.label'), 'from' => array(0 => array('table' => 'OroUserBundle:Role', 'alias' => 'r')), 'where' => array('and' => array(0 => 'r.role <> \'Oro\\Bundle\\UserBundle\\Entity\\User::ROLE_ANONYMOUS\'')))), 'columns' => array('label' => array('label' => 'oro.user.grid.roles.columns.label')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_role_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_role', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_role_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_role_remove')), 'sorters' => array('columns' => array('label' => array('data_name' => 'r.label')), 'default' => array('label' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('label' => array('type' => 'string', 'data_name' => 'r.label')))), 'users-email-grid' => array('extend' => 'email-grid', 'source' => array('query' => array('join' => array('inner' => array('folder' => array('join' => 'e.folder', 'alias' => 'f'), 'origin' => array('join' => 'f.origin', 'alias' => 'o'))), 'where' => array('and' => array(0 => 'o.id = :origin_id'))))), 'user-relation-grid' => array('source' => array('type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName'), 'from' => array(0 => array('table' => 'OroUserBundle:User', 'alias' => 'u')))), 'columns' => array(), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName')), 'default' => array('id' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array()), 'role-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_user_role_update', 'query' => array('select' => array(0 => '(CASE WHEN (:role_id IS NOT NULL) THEN   CASE WHEN (:role_id MEMBER OF u.roles OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_role'))), 'columns' => array('has_role' => array('label' => 'Has role', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'filters' => array('columns' => array('has_role' => array('type' => 'boolean', 'data_name' => 'has_role', 'filter_by_having' => true), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_role' => array('data_name' => 'has_role')), 'default' => array('has_role' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_role', 'selectors' => array('included' => '#roleAppendUsers', 'excluded' => '#roleRemoveUsers')))), 'group-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_user_group_update', 'query' => array('select' => array(0 => '(CASE WHEN (:group_id IS NOT NULL) THEN   CASE WHEN (:group_id MEMBER OF u.groups OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_group'))), 'columns' => array('has_group' => array('label' => 'Has group', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.grid.users.columns.firstName'), 'lastName' => array('label' => 'oro.user.grid.users.columns.lastName'), 'username' => array('label' => 'oro.user.grid.users.columns.username'), 'email' => array('label' => 'oro.user.grid.users.columns.email')), 'filters' => array('columns' => array('has_group' => array('type' => 'boolean', 'data_name' => 'has_group', 'filter_by_having' => true), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_group' => array('data_name' => 'has_group')), 'default' => array('has_group' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_group', 'selectors' => array('included' => '#groupAppendUsers', 'excluded' => '#groupRemoveUsers')))), 'audit-grid' => array('options' => array('entityHint' => 'audit'), 'source' => array('acl_resource' => 'oro_dataaudit_history', 'type' => 'orm', 'query' => array('select' => array(0 => 'a.id', 1 => 'a.action', 2 => 'a.version', 3 => 'a.objectClass', 4 => 'a.objectName', 5 => 'a.objectId', 6 => 'a.data', 7 => 'a.loggedAt', 8 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroDataAuditBundle:Audit', 'alias' => 'a')), 'join' => array('left' => array('user' => array('join' => 'a.user', 'alias' => 'u'))))), 'columns' => array('action' => array('label' => 'Action'), 'version' => array('label' => 'Version'), 'objectClass' => array('label' => 'Entity type', 'frontend_type' => 'select', 'choices' => '@oro_dataaudit.dataaudit_grid_service->getObjectClassOptions'), 'objectName' => array('label' => 'Entity name'), 'objectId' => array('label' => 'Entity id', 'frontend_type' => 'integer'), 'data' => array('label' => 'Data', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/data.html.twig', 'frontend_type' => 'html'), 'author' => array('label' => 'Author'), 'loggedAt' => array('label' => 'Logged at', 'frontend_type' => 'datetime')), 'properties' => NULL, 'sorters' => array('columns' => array('action' => array('data_name' => 'a.action'), 'version' => array('data_name' => 'a.version'), 'objectClass' => array('data_name' => 'a.objectClass'), 'objectName' => array('data_name' => 'a.objectName'), 'objectId' => array('data_name' => 'a.objectId'), 'data' => array('data_name' => 'a.data'), 'author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'a.loggedAt')), 'default' => NULL), 'filters' => array('columns' => array('action' => array('type' => 'choice', 'data_name' => 'a.action', 'options' => array('field_options' => array('choices' => array('update' => 'Updated', 'create' => 'Created', 'remove' => 'Deleted')))), 'version' => array('type' => 'number', 'data_name' => 'a.version', 'enabled' => false), 'objectClass' => array('type' => 'choice', 'data_name' => 'a.objectClass', 'options' => array('field_options' => array('choices' => '@oro_dataaudit.dataaudit_grid_service->getObjectClassOptions'))), 'objectName' => array('type' => 'string', 'data_name' => 'a.objectName'), 'objectId' => array('type' => 'number', 'data_name' => 'a.objectId'), 'data' => array('type' => 'string', 'data_name' => 'a.data'), 'author' => array('type' => 'string', 'data_name' => 'author', 'filter_by_having' => true), 'loggedAt' => array('type' => 'datetime', 'data_name' => 'a.loggedAt', 'enabled' => false)))), 'audit-history-grid' => array('source' => array('acl_resource' => 'oro_dataaudit_history', 'type' => 'orm', 'query' => array('select' => array(0 => 'a.id', 1 => 'a.data as data', 2 => 'a.loggedAt', 3 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroDataAuditBundle:Audit', 'alias' => 'a')), 'join' => array('left' => array('user' => array('join' => 'a.user', 'alias' => 'u'))), 'where' => array('and' => array(0 => 'a.objectClass = :objectClass AND a.objectId = :objectId')))), 'columns' => array('author' => array('label' => 'Author', 'type' => 'field', 'frontend_type' => 'string'), 'loggedAt' => array('label' => 'Logged at', 'type' => 'field', 'frontend_type' => 'datetime'), 'old' => array('label' => 'Old values', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/old.html.twig', 'frontend_type' => 'html', 'data_name' => 'data'), 'new' => array('label' => 'New values', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/new.html.twig', 'frontend_type' => 'html', 'data_name' => 'data')), 'properties' => NULL, 'sorters' => array('columns' => array('author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'a.loggedAt')), 'default' => array('loggedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => NULL)), $this->get('oro_datagrid.provider.resolver'));
    }

    /**
     * Gets the 'oro_datagrid.configuration.provider.chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider A Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider instance.
     */
    protected function getOroDatagrid_Configuration_Provider_ChainService()
    {
        $this->services['oro_datagrid.configuration.provider.chain'] = $instance = new \Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider();

        $instance->addProvider($this->get('oro_datagrid.configuration.provider'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datagrid.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Datagrid\Builder A Oro\Bundle\DataGridBundle\Datagrid\Builder instance.
     */
    protected function getOroDatagrid_Datagrid_BuilderService()
    {
        $this->services['oro_datagrid.datagrid.builder'] = $instance = new \Oro\Bundle\DataGridBundle\Datagrid\Builder('Oro\\Bundle\\DataGridBundle\\Datagrid\\Datagrid', 'Oro\\Bundle\\DataGridBundle\\Extension\\Acceptor', $this->get('event_dispatcher'), $this->get('oro_security.security_facade'));

        $instance->registerDatasource('orm', $this->get('oro_datagrid.datasource.orm'));
        $instance->registerDatasource('pim_datasource_default', $this->get('pim_datagrid.datasource.default'));
        $instance->registerDatasource('pim_datasource_smart', $this->get('pim_datagrid.datasource.smart'));
        $instance->registerDatasource('pim_datasource_product', $this->get('pim_datagrid.datasource.product'));
        $instance->registerDatasource('pim_datasource_associated_product', $this->get('pim_datagrid.datasource.associated_product'));
        $instance->registerExtension($this->get('oro_datagrid.extension.formatter'));
        $instance->registerExtension($this->get('oro_datagrid.extension.orm_pager'));
        $instance->registerExtension($this->get('oro_datagrid.extension.orm_sorter'));
        $instance->registerExtension($this->get('oro_datagrid.extension.action'));
        $instance->registerExtension($this->get('oro_datagrid.extension.mass_action'));
        $instance->registerExtension($this->get('oro_datagrid.extension.toolbar'));
        $instance->registerExtension($this->get('oro_datagrid.extension.views'));
        $instance->registerExtension($this->get('oro_entity.datagrid.extension'));
        $instance->registerExtension($this->get('oro_filter.extension.orm_filter'));
        $instance->registerExtension($this->get('pim_datagrid.extension.filter'));
        $instance->registerExtension($this->get('pim_datagrid.extension.sorter'));
        $instance->registerExtension($this->get('pim_datagrid.extension.pager'));
        $instance->registerExtension($this->get('pim_datagrid.extension.selector.orm_selector'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datagrid.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Datagrid\Manager A Oro\Bundle\DataGridBundle\Datagrid\Manager instance.
     */
    protected function getOroDatagrid_Datagrid_ManagerService()
    {
        return $this->services['oro_datagrid.datagrid.manager'] = new \Oro\Bundle\DataGridBundle\Datagrid\Manager($this->get('oro_datagrid.configuration.provider.chain'), $this->get('oro_datagrid.datagrid.builder'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.datagrid.request_params' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Datagrid\RequestParameters A Oro\Bundle\DataGridBundle\Datagrid\RequestParameters instance.
     */
    protected function getOroDatagrid_Datagrid_RequestParamsService()
    {
        $this->services['oro_datagrid.datagrid.request_params'] = $instance = new \Oro\Bundle\DataGridBundle\Datagrid\RequestParameters();

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datasource.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource A Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource instance.
     */
    protected function getOroDatagrid_Datasource_OrmService()
    {
        return $this->services['oro_datagrid.datasource.orm'] = new \Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_security.acl_helper'));
    }

    /**
     * Gets the 'oro_datagrid.extension.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension A Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension instance.
     */
    protected function getOroDatagrid_Extension_ActionService()
    {
        $this->services['oro_datagrid.extension.action'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension($this, $this->get('oro_security.security_facade'), $this->get('translator.default'));

        $instance->registerAction('navigate', 'oro_datagrid.extension.action.type.navigate');
        $instance->registerAction('ajax', 'oro_datagrid.extension.action.type.ajax');
        $instance->registerAction('delete', 'oro_datagrid.extension.action.type.delete');
        $instance->registerAction('tab-redirect', 'pim_datagrid.extension.action.type.tab_redirect');

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.ajax' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_AjaxService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.delete' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_DeleteService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.navigate' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_NavigateService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension A Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension instance.
     */
    protected function getOroDatagrid_Extension_FormatterService()
    {
        $this->services['oro_datagrid.extension.formatter'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension($this->get('translator.default'));

        $instance->registerProperty('field', $this->get('oro_datagrid.extension.formatter.field_property'));
        $instance->registerProperty('url', $this->get('oro_datagrid.extension.formatter.property.url_property'));
        $instance->registerProperty('twig', $this->get('oro_datagrid.extension.formatter.property.twig_property'));
        $instance->registerProperty('translateable', $this->get('oro_datagrid.extension.formatter.property.translateable_property'));
        $instance->registerProperty('callback', $this->get('oro_datagrid.extension.formatter.property.callback_property'));
        $instance->registerProperty('product_value_field', $this->get('pim_datagrid.extension.formatter.property.product_value.field_property'));
        $instance->registerProperty('product_value_options', $this->get('pim_datagrid.extension.formatter.property.product_value.attribute_options_property'));
        $instance->registerProperty('product_value_option', $this->get('pim_datagrid.extension.formatter.property.product_value.attribute_option_property'));
        $instance->registerProperty('product_value_price', $this->get('pim_datagrid.extension.formatter.property.product_value.price_property'));
        $instance->registerProperty('product_value_image', $this->get('pim_datagrid.extension.formatter.property.product_value.image_property'));
        $instance->registerProperty('product_value_file', $this->get('pim_datagrid.extension.formatter.property.product_value.file_property'));
        $instance->registerProperty('product_value_metric', $this->get('pim_datagrid.extension.formatter.property.product_value.metric_property'));
        $instance->registerProperty('product_value_boolean', $this->get('pim_datagrid.extension.formatter.property.product_value.boolean_property'));
        $instance->registerProperty('product_value_date', $this->get('pim_datagrid.extension.formatter.property.product_value.date_property'));
        $instance->registerProperty('product_value_twig', $this->get('pim_datagrid.extension.formatter.property.product_value.twig_property'));
        $instance->registerProperty('product_groups', $this->get('pim_datagrid.extension.formatter.property.product.groups_property'));
        $instance->registerProperty('job_name', $this->get('pim_datagrid.extension.formatter.property.job.name_property'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.field_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_FieldPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.field_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.callback_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_CallbackPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.callback_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty();
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.translateable_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslateableProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslateableProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_TranslateablePropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.translateable_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslateableProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.twig_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_TwigPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.twig_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty($this->get('twig'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.url_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_UrlPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.url_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty($this->get('router'));
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension instance.
     */
    protected function getOroDatagrid_Extension_MassActionService()
    {
        $this->services['oro_datagrid.extension.mass_action'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension($this, $this->get('oro_security.security_facade'), $this->get('translator.default'));

        $instance->registerAction('ajax', 'oro_datagrid.extension.mass_action.type.ajax');
        $instance->registerAction('delete', 'oro_datagrid.extension.mass_action.type.delete');
        $instance->registerAction('redirect', 'oro_datagrid.extension.mass_action.type.redirect');
        $instance->registerAction('widget', 'oro_datagrid.extension.mass_action.type.widget');
        $instance->registerAction('window', 'oro_datagrid.extension.mass_action.type.window');
        $instance->registerAction('export', 'pim_datagrid.extension.mass_action.type.export');
        $instance->registerAction('edit', 'pim_datagrid.extension.mass_action.type.edit');
        $instance->registerAction('delete', 'pim_datagrid.extension.mass_action.type.delete');

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.handler.delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler A Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Handler_DeleteService()
    {
        return $this->services['oro_datagrid.extension.mass_action.handler.delete'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.ajax' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_AjaxService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.delete' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_DeleteService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.redirect' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_RedirectService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.widget' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_WidgetService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.window' service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_WindowService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.orm_pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension A Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension instance.
     */
    protected function getOroDatagrid_Extension_OrmPagerService()
    {
        return $this->services['oro_datagrid.extension.orm_pager'] = new \Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension($this->get('oro_datagrid.extension.pager.orm.pager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.extension.orm_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension A Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension instance.
     */
    protected function getOroDatagrid_Extension_OrmSorterService()
    {
        return $this->services['oro_datagrid.extension.orm_sorter'] = new \Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.extension.pager.orm.pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager A Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager instance.
     */
    protected function getOroDatagrid_Extension_Pager_Orm_PagerService()
    {
        return $this->services['oro_datagrid.extension.pager.orm.pager'] = new \Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager($this->get('oro_security.acl_helper'));
    }

    /**
     * Gets the 'oro_datagrid.extension.toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension A Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension instance.
     */
    protected function getOroDatagrid_Extension_ToolbarService()
    {
        return $this->services['oro_datagrid.extension.toolbar'] = new \Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension();
    }

    /**
     * Gets the 'oro_datagrid.extension.views' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension A Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension instance.
     */
    protected function getOroDatagrid_Extension_ViewsService()
    {
        return $this->services['oro_datagrid.extension.views'] = new \Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.mass_action.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher instance.
     */
    protected function getOroDatagrid_MassAction_DispatcherService()
    {
        return $this->services['oro_datagrid.mass_action.dispatcher'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher($this, $this->get('oro_datagrid.datagrid.manager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.mass_action.parameters_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser instance.
     */
    protected function getOroDatagrid_MassAction_ParametersParserService()
    {
        return $this->services['oro_datagrid.mass_action.parameters_parser'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser();
    }

    /**
     * Gets the 'oro_datagrid.provider.resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver A Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver instance.
     */
    protected function getOroDatagrid_Provider_ResolverService()
    {
        return $this->services['oro_datagrid.provider.resolver'] = new \Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver($this);
    }

    /**
     * Gets the 'oro_datagrid.twig.metadata' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\Twig\MetadataExtension A Oro\Bundle\DataGridBundle\Twig\MetadataExtension instance.
     */
    protected function getOroDatagrid_Twig_MetadataService()
    {
        return $this->services['oro_datagrid.twig.metadata'] = new \Oro\Bundle\DataGridBundle\Twig\MetadataExtension($this->get('oro_datagrid.datagrid.manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('router'));
    }

    /**
     * Gets the 'oro_distribution.routing_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DistributionBundle\Routing\OroAutoLoader A Oro\Bundle\DistributionBundle\Routing\OroAutoLoader instance.
     */
    protected function getOroDistribution_RoutingLoaderService()
    {
        return $this->services['oro_distribution.routing_loader'] = new \Oro\Bundle\DistributionBundle\Routing\OroAutoLoader($this->get('file_locator'), $this->get('kernel'));
    }

    /**
     * Gets the 'oro_email.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroEmail_CacheService()
    {
        $this->services['oro_email.cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_email.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_email.datagrid_query_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory A Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory instance.
     */
    protected function getOroEmail_DatagridQueryFactoryService()
    {
        return $this->services['oro_email.datagrid_query_factory'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory($this->get('doctrine'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email', $this->get('oro_email.email.owner.provider.storage'), $this->get('oro_config.user'));
    }

    /**
     * Gets the 'oro_email.direct_mailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Mailer\DirectMailer A Oro\Bundle\EmailBundle\Mailer\DirectMailer instance.
     */
    protected function getOroEmail_DirectMailerService()
    {
        return $this->services['oro_email.direct_mailer'] = new \Oro\Bundle\EmailBundle\Mailer\DirectMailer($this->get('swiftmailer.mailer.default'), $this);
    }

    /**
     * Gets the 'oro_email.email.address.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager A Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager instance.
     */
    protected function getOroEmail_Email_Address_ManagerService()
    {
        return $this->services['oro_email.email.address.manager'] = new \Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager('OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy');
    }

    /**
     * Gets the 'oro_email.email.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Cache\EmailCacheManager A Oro\Bundle\EmailBundle\Cache\EmailCacheManager instance.
     */
    protected function getOroEmail_Email_Cache_ManagerService()
    {
        $a = new \Oro\Bundle\EmailBundle\Provider\EmailBodyLoaderSelector();
        $a->addLoader(new \Oro\Bundle\ImapBundle\Provider\ImapEmailBodyLoader($this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt')));

        return $this->services['oro_email.email.cache.manager'] = new \Oro\Bundle\EmailBundle\Cache\EmailCacheManager($a, $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.email.entity.builder' service.
     *
     * @return \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder A Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder instance.
     */
    protected function getOroEmail_Email_Entity_BuilderService()
    {
        $a = $this->get('oro_email.email.address.manager');

        return new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a);
    }

    /**
     * Gets the 'oro_email.email_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Provider\EmailRenderer A Oro\Bundle\EmailBundle\Provider\EmailRenderer instance.
     */
    protected function getOroEmail_EmailRendererService()
    {
        $this->services['oro_email.email_renderer'] = $instance = new \Oro\Bundle\EmailBundle\Provider\EmailRenderer($this->get('oro_email.twig.string_loader'), array('strict_variables' => true), $this->get('oro_entity_config.provider.email'), $this->get('oro_email.cache'), 'oro_email.available_in_template_fields', $this->get('security.context'), $this->get('oro_email.twig.email_sandbox'));

        $instance->addExtension($this->get('oro_locale.twig.date_time'));
        $instance->addExtension($this->get('twig.extension.intl'));

        return $instance;
    }

    /**
     * Gets the 'oro_email.emailtemplate.datagrid_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper A Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper instance.
     */
    protected function getOroEmail_Emailtemplate_DatagridHelperService()
    {
        return $this->services['oro_email.emailtemplate.datagrid_helper'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper(array('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'entity.email_template.name', 'description' => 'entity.email_template.description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'entity.email.name', 'description' => 'entity.email.description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'entity.business_unit.name', 'description' => 'entity.business_unit.description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'entity.user.name', 'description' => 'entity.user.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'entity.role.name', 'description' => 'entity.role.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'entity.group.name', 'description' => 'entity.group.description'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category' => array('icon_class' => 'icon-category', 'name' => 'Category', 'description' => 'Category allows to organize products'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product' => array('icon_class' => 'icon-product', 'name' => 'Product', 'description' => 'Product description')));
    }

    /**
     * Gets the 'oro_email.emailtemplate.datagrid_view_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList A Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList instance.
     */
    protected function getOroEmail_Emailtemplate_DatagridViewListService()
    {
        return $this->services['oro_email.emailtemplate.datagrid_view_list'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.form.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_EmailService()
    {
        return $this->services['oro_email.form.email'] = $this->get('form.factory')->createNamed('oro_email_email', 'oro_email_email', NULL);
    }

    /**
     * Gets the 'oro_email.form.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_EmailtemplateService()
    {
        return $this->services['oro_email.form.emailtemplate'] = $this->get('form.factory')->createNamed('oro_email_emailtemplate', 'oro_email_emailtemplate', NULL);
    }

    /**
     * Gets the 'oro_email.form.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.form.emailtemplate.api'] = $this->get('form.factory')->createNamed('oro_email_emailtemplate_api', 'oro_email_emailtemplate_api', NULL);
    }

    /**
     * Gets the 'oro_email.form.handler.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Handler\EmailHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.email' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_EmailService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.email', 'request');
        }

        $a = $this->get('oro_email.email.address.manager');

        return $this->services['oro_email.form.handler.email'] = $this->scopedServices['request']['oro_email.form.handler.email'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailHandler($this->get('oro_email.form.email'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'), $this->get('security.context'), $a, new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a), $this->get('oro_email.direct_mailer'), $this->get('logger'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_email.form.handler.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.emailtemplate' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_EmailtemplateService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.emailtemplate', 'request');
        }

        return $this->services['oro_email.form.handler.emailtemplate'] = $this->scopedServices['request']['oro_email.form.handler.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler($this->get('oro_email.form.emailtemplate'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.form.handler.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.emailtemplate.api' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_Emailtemplate_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.emailtemplate.api', 'request');
        }

        return $this->services['oro_email.form.handler.emailtemplate.api'] = $this->scopedServices['request']['oro_email.form.handler.emailtemplate.api'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler($this->get('oro_email.form.emailtemplate.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.form.subscriber.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber A Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber instance.
     */
    protected function getOroEmail_Form_Subscriber_EmailtemplateService()
    {
        return $this->services['oro_email.form.subscriber.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'));
    }

    /**
     * Gets the 'oro_email.form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailType A Oro\Bundle\EmailBundle\Form\Type\EmailType instance.
     */
    protected function getOroEmail_Form_Type_EmailService()
    {
        return $this->services['oro_email.form.type.email'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailType();
    }

    /**
     * Gets the 'oro_email.form.type.email_address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailAddressType A Oro\Bundle\EmailBundle\Form\Type\EmailAddressType instance.
     */
    protected function getOroEmail_Form_Type_EmailAddressService()
    {
        return $this->services['oro_email.form.type.email_address'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailAddressType();
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateService()
    {
        return $this->services['oro_email.form.type.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType(array('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'entity.email_template.name', 'description' => 'entity.email_template.description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'entity.email.name', 'description' => 'entity.email.description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'entity.business_unit.name', 'description' => 'entity.business_unit.description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'entity.user.name', 'description' => 'entity.user.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'entity.role.name', 'description' => 'entity.role.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'entity.group.name', 'description' => 'entity.group.description'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category' => array('icon_class' => 'icon-category', 'name' => 'Category', 'description' => 'Category allows to organize products'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product' => array('icon_class' => 'icon-product', 'name' => 'Product', 'description' => 'Product description')));
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType instance.
     */
    protected function getOroEmail_Form_Type_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.form.type.emailtemplate.api'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType(array('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'entity.email_template.name', 'description' => 'entity.email_template.description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'entity.email.name', 'description' => 'entity.email.description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'entity.business_unit.name', 'description' => 'entity.business_unit.description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'entity.user.name', 'description' => 'entity.user.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'entity.role.name', 'description' => 'entity.role.description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'entity.group.name', 'description' => 'entity.group.description'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category' => array('icon_class' => 'icon-category', 'name' => 'Category', 'description' => 'Category allows to organize products'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product' => array('icon_class' => 'icon-product', 'name' => 'Product', 'description' => 'Product description')));
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateSelectService()
    {
        return $this->services['oro_email.form.type.emailtemplate_select'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType();
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateTranslationService()
    {
        return $this->services['oro_email.form.type.emailtemplate_translation'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType();
    }

    /**
     * Gets the 'oro_email.listener.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber A Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber instance.
     */
    protected function getOroEmail_Listener_ConfigSubscriberService()
    {
        return $this->services['oro_email.listener.config_subscriber'] = new \Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber($this->get('oro_email.cache'), 'oro_email.available_in_template_fields');
    }

    /**
     * Gets the 'oro_email.manager.email.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager A Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager instance.
     */
    protected function getOroEmail_Manager_Email_ApiService()
    {
        return $this->services['oro_email.manager.email.api'] = new \Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager('Oro\\Bundle\\EmailBundle\\Entity\\Email', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.manager.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroEmail_Manager_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.manager.emailtemplate.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.provider.variable_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Provider\VariablesProvider A Oro\Bundle\EmailBundle\Provider\VariablesProvider instance.
     */
    protected function getOroEmail_Provider_VariableProviderService()
    {
        return $this->services['oro_email.provider.variable_provider'] = new \Oro\Bundle\EmailBundle\Provider\VariablesProvider($this->get('security.context'), $this->get('oro_entity_config.provider.email'));
    }

    /**
     * Gets the 'oro_email.twig.email_sandbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extension_Sandbox A Twig_Extension_Sandbox instance.
     */
    protected function getOroEmail_Twig_EmailSandboxService()
    {
        return $this->services['oro_email.twig.email_sandbox'] = new \Twig_Extension_Sandbox($this->get('oro_email.twig.email_security_policy'), true);
    }

    /**
     * Gets the 'oro_email.twig.email_security_policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Sandbox_SecurityPolicy A Twig_Sandbox_SecurityPolicy instance.
     */
    protected function getOroEmail_Twig_EmailSecurityPolicyService()
    {
        return $this->services['oro_email.twig.email_security_policy'] = new \Twig_Sandbox_SecurityPolicy(array(0 => 'app', 1 => 'for', 2 => 'if', 3 => 'spaceless'), array(0 => 'default', 1 => 'date', 2 => 'escape', 3 => 'format', 4 => 'length', 5 => 'lower', 6 => 'nl2br', 7 => 'number_format', 8 => 'title', 9 => 'trim', 10 => 'upper', 11 => 'oro_format_date', 12 => 'oro_format_time', 13 => 'oro_format_datetime'), array(), array(), array(0 => 'date'));
    }

    /**
     * Gets the 'oro_email.twig.string_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Loader_String A Twig_Loader_String instance.
     */
    protected function getOroEmail_Twig_StringLoaderService()
    {
        return $this->services['oro_email.twig.string_loader'] = new \Twig_Loader_String();
    }

    /**
     * Gets the 'oro_email.validator.variables_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EmailBundle\Validator\VariablesValidator A Oro\Bundle\EmailBundle\Validator\VariablesValidator instance.
     */
    protected function getOroEmail_Validator_VariablesValidatorService()
    {
        return $this->services['oro_email.validator.variables_validator'] = new \Oro\Bundle\EmailBundle\Validator\VariablesValidator($this->get('oro_email.email_renderer'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_entity.datagrid.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Grid\ExtendExtension A Oro\Bundle\EntityBundle\Grid\ExtendExtension instance.
     */
    protected function getOroEntity_Datagrid_ExtensionService()
    {
        return $this->services['oro_entity.datagrid.extension'] = new \Oro\Bundle\EntityBundle\Grid\ExtendExtension($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity.entity_field_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider A Oro\Bundle\EntityBundle\Provider\EntityFieldProvider instance.
     */
    protected function getOroEntity_EntityFieldProviderService()
    {
        return $this->services['oro_entity.entity_field_provider'] = new \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider($this->get('oro_entity_config.provider.entity'), $this->get('oro_entity.orm.entity_class_resolver'), $this->get('doctrine'), $this->get('oro_entity.entity_provider'));
    }

    /**
     * Gets the 'oro_entity.entity_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Provider\EntityProvider A Oro\Bundle\EntityBundle\Provider\EntityProvider instance.
     */
    protected function getOroEntity_EntityProviderService()
    {
        return $this->services['oro_entity.entity_provider'] = new \Oro\Bundle\EntityBundle\Provider\EntityProvider($this->get('oro_entity_config.provider.entity'), $this->get('oro_entity.orm.entity_class_resolver'));
    }

    /**
     * Gets the 'oro_entity.event_listener.custom_entity_grid_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener A Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener instance.
     */
    protected function getOroEntity_EventListener_CustomEntityGridSubscriberService()
    {
        $this->services['oro_entity.event_listener.custom_entity_grid_subscriber'] = $instance = new \Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('router'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_entity.event_listener.relation_entity_grid_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener A Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener instance.
     */
    protected function getOroEntity_EventListener_RelationEntityGridSubscriberService()
    {
        $this->services['oro_entity.event_listener.relation_entity_grid_subscriber'] = $instance = new \Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('router'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_entity.form.handler.entity_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler A Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler instance.
     */
    protected function getOroEntity_Form_Handler_EntitySelectService()
    {
        return $this->services['oro_entity.form.handler.entity_select'] = new \Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.form.type.custom_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Type\CustomEntityType A Oro\Bundle\EntityBundle\Form\Type\CustomEntityType instance.
     */
    protected function getOroEntity_Form_Type_CustomEntityService()
    {
        return $this->services['oro_entity.form.type.custom_entity'] = new \Oro\Bundle\EntityBundle\Form\Type\CustomEntityType($this->get('oro_entity_config.config_manager'), $this->get('router'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType A Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType instance.
     */
    protected function getOroEntity_Form_Type_EntityChoiceService()
    {
        return $this->services['oro_entity.form.type.entity_choice'] = new \Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType($this->get('oro_entity.entity_provider'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_field_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType A Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType instance.
     */
    protected function getOroEntity_Form_Type_EntityFieldChoiceService()
    {
        return $this->services['oro_entity.form.type.entity_field_choice'] = new \Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType($this->get('oro_entity.entity_field_provider'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Type\EntitySelectType A Oro\Bundle\EntityBundle\Form\Type\EntitySelectType instance.
     */
    protected function getOroEntity_Form_Type_EntitySelectService()
    {
        return $this->services['oro_entity.form.type.entity_select'] = new \Oro\Bundle\EntityBundle\Form\Type\EntitySelectType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.form.type.option_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\Form\Type\OptionSelectType A Oro\Bundle\EntityBundle\Form\Type\OptionSelectType instance.
     */
    protected function getOroEntity_Form_Type_OptionSelectService()
    {
        return $this->services['oro_entity.form.type.option_select'] = new \Oro\Bundle\EntityBundle\Form\Type\OptionSelectType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity.listener.navigation_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\EventListener\NavigationListener A Oro\Bundle\EntityBundle\EventListener\NavigationListener instance.
     */
    protected function getOroEntity_Listener_NavigationListenerService()
    {
        return $this->services['oro_entity.listener.navigation_listener'] = new \Oro\Bundle\EntityBundle\EventListener\NavigationListener($this->get('oro_security.security_facade'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_entity_config.provider.entity'), $this->get('oro_entity_config.provider.extend'));
    }

    /**
     * Gets the 'oro_entity.orm.entity_class_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\ORM\EntityClassAccessor A Oro\Bundle\EntityBundle\ORM\EntityClassAccessor instance.
     */
    protected function getOroEntity_Orm_EntityClassAccessorService()
    {
        return $this->services['oro_entity.orm.entity_class_accessor'] = new \Oro\Bundle\EntityBundle\ORM\EntityClassAccessor();
    }

    /**
     * Gets the 'oro_entity.orm.entity_class_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EntityBundle\ORM\EntityClassResolver A Pim\Bundle\EntityBundle\ORM\EntityClassResolver instance.
     */
    protected function getOroEntity_Orm_EntityClassResolverService()
    {
        return $this->services['oro_entity.orm.entity_class_resolver'] = new \Pim\Bundle\EntityBundle\ORM\EntityClassResolver($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'oro_entity.orm.sql_filter_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\ORM\Query\FilterCollection A Oro\Bundle\EntityBundle\ORM\Query\FilterCollection instance.
     */
    protected function getOroEntity_Orm_SqlFilterCollectionService()
    {
        return $this->services['oro_entity.orm.sql_filter_collection'] = new \Oro\Bundle\EntityBundle\ORM\Query\FilterCollection($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.owner.entity_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber A Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber instance.
     */
    protected function getOroEntity_Owner_EntityConfigSubscriberService()
    {
        return $this->services['oro_entity.owner.entity_config_subscriber'] = new \Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber();
    }

    /**
     * Gets the 'oro_entity_config.cache.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Config\ConfigCache A Oro\Bundle\EntityConfigBundle\Config\ConfigCache instance.
     */
    protected function getOroEntityConfig_Cache_CacheService()
    {
        return $this->services['oro_entity_config.cache.cache'] = new \Oro\Bundle\EntityConfigBundle\Config\ConfigCache($this->get('oro_entity_config.cache.file_cache'), $this->get('oro_entity_config.model.file_cache'));
    }

    /**
     * Gets the 'oro_entity_config.cache.file_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroEntityConfig_Cache_FileCacheService()
    {
        $this->services['oro_entity_config.cache.file_cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_entity_config.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Config\ConfigManager A Oro\Bundle\EntityConfigBundle\Config\ConfigManager instance.
     */
    protected function getOroEntityConfig_ConfigManagerService()
    {
        $this->services['oro_entity_config.config_manager'] = $instance = new \Oro\Bundle\EntityConfigBundle\Config\ConfigManager(new \Metadata\MetadataFactory(new \Oro\Bundle\EntityConfigBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'))), $this->get('event_dispatcher'), $this->get('oro_entity_config.link.provider_bag'), new \Oro\Bundle\EntityConfigBundle\Config\ConfigModelManager($this->get('oro_entity_config.link.entity_manager')), new \Oro\Bundle\EntityConfigBundle\Audit\AuditManager($this->get('oro_entity_config.link.config_manager'), $this->get('oro_entity_config.link.security_context')));

        $instance->setCache($this->get('oro_entity_config.cache.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.event_listener.audit_log_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_AuditLogGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.audit_log_grid_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener($this->get('oro_datagrid.datagrid.request_params'), array(0 => 'objectClass', 1 => 'fieldName'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.entityconfig_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener A Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_EntityconfigGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.entityconfig_grid_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.entityfields_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener A Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_EntityfieldsGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.entityfields_grid_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.option_set_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener A Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener instance.
     */
    protected function getOroEntityConfig_EventListener_OptionSetListenerService()
    {
        return $this->services['oro_entity_config.event_listener.option_set_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener();
    }

    /**
     * Gets the 'oro_entity_config.extension.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension A Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension instance.
     */
    protected function getOroEntityConfig_Extension_ConfigService()
    {
        return $this->services['oro_entity_config.extension.config'] = new \Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension();
    }

    /**
     * Gets the 'oro_entity_config.link.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_ConfigManagerService()
    {
        return $this->services['oro_entity_config.link.config_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_entity_config.config_manager', false);
    }

    /**
     * Gets the 'oro_entity_config.link.entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_EntityManagerService()
    {
        return $this->services['oro_entity_config.link.entity_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'doctrine.orm.default_entity_manager', false);
    }

    /**
     * Gets the 'oro_entity_config.link.provider_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_ProviderBagService()
    {
        return $this->services['oro_entity_config.link.provider_bag'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_entity_config.provider_bag', false);
    }

    /**
     * Gets the 'oro_entity_config.link.security_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_SecurityContextService()
    {
        return $this->services['oro_entity_config.link.security_context'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'security.context', false);
    }

    /**
     * Gets the 'oro_entity_config.model.file_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroEntityConfig_Model_FileCacheService()
    {
        $this->services['oro_entity_config.model.file_cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_entity_config.model');

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.provider.dataaudit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_DataauditService()
    {
        return $this->services['oro_entity_config.provider.dataaudit'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'dataaudit', array('entity' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))), 'field' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.datagrid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_DatagridService()
    {
        return $this->services['oro_entity_config.provider.datagrid'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'datagrid', array('field' => array('items' => array('is_visible' => array('options' => array('default_value' => true, 'allowed_type' => array(0 => 'string', 1 => 'integer', 2 => 'smallint', 3 => 'bigint', 4 => 'boolean', 5 => 'decimal', 6 => 'date', 7 => 'text', 8 => 'float'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on grid')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_EmailService()
    {
        return $this->services['oro_entity_config.provider.email'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'email', array('field' => array('items' => array('available_in_template' => array('options' => array('default_value' => false, 'is_bool' => true), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Available in email templates')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_EntityService()
    {
        return $this->services['oro_entity_config.provider.entity'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'entity', array('entity' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('icon' => array('options' => array('priority' => 10), 'form' => array('type' => 'oro_icon_select', 'options' => array('block' => 'entity'))), 'label' => array('options' => array('priority' => 20), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'plural_label' => array('options' => array('priority' => 35), 'constraints' => array(0 => array('Length' => array('min' => 2, 'max' => 50))), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('priority' => 50), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))), 'field' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('label' => array('options' => array('priority' => 10), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'string', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('priority' => 30), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false)))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.extend' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_ExtendService()
    {
        return $this->services['oro_entity_config.provider.extend'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'extend', array('entity' => array('require_js' => array(0 => 'oro/init-entity-extend-apply', 1 => 'oro/init-entity-extend-relation'), 'grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_entity_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_entity_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Create Entity', 'route' => 'oro_entityextend_entity_create')), 'items' => array('owner' => array('options' => array('priority' => 40, 'auditable' => false, 'default_value' => 'System'), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true), 'form' => array('type' => 'text', 'block' => 'entity', 'options' => array('read_only' => true, 'required' => false, 'label' => 'Type'))), 'is_extend' => array('options' => array('priority' => 27, 'default_value' => false, 'auditable' => false), 'grid' => array('type' => 'boolean', 'label' => 'Is Extend', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('system' => '', 'new' => 'New', 'active' => 'Active', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'unique_key' => array('options' => array('auditable' => false, 'serializable' => true)), 'index' => array('options' => array('auditable' => false, 'serializable' => true)), 'upgradeable' => array('options' => array('auditable' => false, 'default_value' => true)), 'relation' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())), 'schema' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())))), 'field' => array('grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_field_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_field_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Manage unique keys', 'route' => 'oro_entityextend_entity_unique_key', 'entity_id' => true, 'filter' => array('is_extend' => true, 'upgradeable' => true)), 1 => array('name' => 'Create field', 'route' => 'oro_entityextend_field_create', 'entity_id' => true, 'filter' => array('is_extend' => true)), 2 => array('name' => 'Update schema', 'route' => 'oro_entityextend_update', 'entity_id' => true, 'aClass' => 'btn-danger entity-extend-apply', 'void' => true, 'filter' => array('state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Deleted'), 'upgradeable' => true))), 'items' => array('owner' => array('options' => array('priority' => 20, 'default_value' => 'System', 'auditable' => false), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('new' => 'New', 'applied' => 'Applied', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'length' => array('options' => array('default_value' => 255, 'allowed_type' => array(0 => 'string'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 1, 'max' => 255))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Length', 'block' => 'entity', 'subblock' => 'properties'))), 'precision' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Precision', 'block' => 'entity', 'subblock' => 'properties'))), 'scale' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Scale', 'block' => 'entity', 'subblock' => 'properties'))), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'is_inverse' => array('options' => array('default_value' => false, 'auditable' => false)), 'relation' => array('options' => array('allowed_type' => array(0 => 'oneToMany', 1 => 'manyToOne', 2 => 'manyToMany'), 'required_property' => array('config_id' => array('field_name' => NULL, 'scope' => 'extend'), 'code' => 'is_extend', 'value' => true)), 'form' => array('type' => 'oro_entity_relation_type', 'options' => array('block' => 'entity', 'subblock' => 'properties'))), 'target_entity' => array('options' => array('auditable' => false)), 'target_field' => array('options' => array('auditable' => false)), 'target_grid' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_title' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_detailed' => array('options' => array('auditable' => false, 'serializable' => true)), 'set_expanded' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'create_only' => true), 'form' => array('type' => 'choice', 'options' => array('required' => false, 'choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'label' => 'Expanded', 'attr' => array('class' => 'is-option-set-expanded'), 'block' => 'entity', 'subblock' => 'properties'))), 'set_options' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'auditable' => false), 'form' => array('type' => 'oro_entity_option_set_collection', 'options' => array('required' => false, 'label' => 'Options', 'block' => 'entity', 'subblock' => 'properties', 'type' => 'oro_entity_option_set', 'tooltip' => 'Deleting an option will remove these values from related records.')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_FormService()
    {
        return $this->services['oro_entity_config.provider.form'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'form', array('field' => array('items' => array('is_enabled' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on form')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.ownership' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_OwnershipService()
    {
        return $this->services['oro_entity_config.provider.ownership'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'ownership', array('entity' => array('items' => array('owner_type' => array('options' => array('required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'System'), 'priority' => 100), 'constraints' => array(0 => array('NotBlank' => NULL)), 'grid' => array('type' => 'select', 'label' => 'Ownership Type', 'filter_type' => 'choice', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'choices' => 'oro_organization.method.get_ownership_type'), 'form' => array('type' => 'oro_type_choice_ownership_type', 'options' => array('block' => 'other', 'required' => true, 'label' => 'Ownership Type')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_SecurityService()
    {
        return $this->services['oro_entity_config.provider.security'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'security', array('entity' => array('items' => array('type' => array('options' => array('auditable' => false)), 'permissions' => NULL, 'group_name' => NULL))));
    }

    /**
     * Gets the 'oro_entity_config.provider.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_ViewService()
    {
        return $this->services['oro_entity_config.provider.view'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'view', array('field' => array('items' => array('is_displayable' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on view')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag A Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag instance.
     */
    protected function getOroEntityConfig_ProviderBagService()
    {
        $a = $this->get('oro_entity_config.config_manager');

        $this->services['oro_entity_config.provider_bag'] = $instance = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag();

        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'email', array('field' => array('items' => array('available_in_template' => array('options' => array('default_value' => false, 'is_bool' => true), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Available in email templates'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'entity', array('entity' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('icon' => array('options' => array('priority' => 10), 'form' => array('type' => 'oro_icon_select', 'options' => array('block' => 'entity'))), 'label' => array('options' => array('priority' => 20), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'plural_label' => array('options' => array('priority' => 35), 'constraints' => array(0 => array('Length' => array('min' => 2, 'max' => 50))), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('priority' => 50), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))), 'field' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('label' => array('options' => array('priority' => 10), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'string', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('priority' => 30), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'datagrid', array('field' => array('items' => array('is_visible' => array('options' => array('default_value' => true, 'allowed_type' => array(0 => 'string', 1 => 'integer', 2 => 'smallint', 3 => 'bigint', 4 => 'boolean', 5 => 'decimal', 6 => 'date', 7 => 'text', 8 => 'float'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on grid'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'form', array('field' => array('items' => array('is_enabled' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on form'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'view', array('field' => array('items' => array('is_displayable' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on view'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'extend', array('entity' => array('require_js' => array(0 => 'oro/init-entity-extend-apply', 1 => 'oro/init-entity-extend-relation'), 'grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_entity_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_entity_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Create Entity', 'route' => 'oro_entityextend_entity_create')), 'items' => array('owner' => array('options' => array('priority' => 40, 'auditable' => false, 'default_value' => 'System'), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true), 'form' => array('type' => 'text', 'block' => 'entity', 'options' => array('read_only' => true, 'required' => false, 'label' => 'Type'))), 'is_extend' => array('options' => array('priority' => 27, 'default_value' => false, 'auditable' => false), 'grid' => array('type' => 'boolean', 'label' => 'Is Extend', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('system' => '', 'new' => 'New', 'active' => 'Active', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'unique_key' => array('options' => array('auditable' => false, 'serializable' => true)), 'index' => array('options' => array('auditable' => false, 'serializable' => true)), 'upgradeable' => array('options' => array('auditable' => false, 'default_value' => true)), 'relation' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())), 'schema' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())))), 'field' => array('grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_field_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_field_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Manage unique keys', 'route' => 'oro_entityextend_entity_unique_key', 'entity_id' => true, 'filter' => array('is_extend' => true, 'upgradeable' => true)), 1 => array('name' => 'Create field', 'route' => 'oro_entityextend_field_create', 'entity_id' => true, 'filter' => array('is_extend' => true)), 2 => array('name' => 'Update schema', 'route' => 'oro_entityextend_update', 'entity_id' => true, 'aClass' => 'btn-danger entity-extend-apply', 'void' => true, 'filter' => array('state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Deleted'), 'upgradeable' => true))), 'items' => array('owner' => array('options' => array('priority' => 20, 'default_value' => 'System', 'auditable' => false), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('new' => 'New', 'applied' => 'Applied', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'length' => array('options' => array('default_value' => 255, 'allowed_type' => array(0 => 'string'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 1, 'max' => 255))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Length', 'block' => 'entity', 'subblock' => 'properties'))), 'precision' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Precision', 'block' => 'entity', 'subblock' => 'properties'))), 'scale' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Scale', 'block' => 'entity', 'subblock' => 'properties'))), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'is_inverse' => array('options' => array('default_value' => false, 'auditable' => false)), 'relation' => array('options' => array('allowed_type' => array(0 => 'oneToMany', 1 => 'manyToOne', 2 => 'manyToMany'), 'required_property' => array('config_id' => array('field_name' => NULL, 'scope' => 'extend'), 'code' => 'is_extend', 'value' => true)), 'form' => array('type' => 'oro_entity_relation_type', 'options' => array('block' => 'entity', 'subblock' => 'properties'))), 'target_entity' => array('options' => array('auditable' => false)), 'target_field' => array('options' => array('auditable' => false)), 'target_grid' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_title' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_detailed' => array('options' => array('auditable' => false, 'serializable' => true)), 'set_expanded' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'create_only' => true), 'form' => array('type' => 'choice', 'options' => array('required' => false, 'choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'label' => 'Expanded', 'attr' => array('class' => 'is-option-set-expanded'), 'block' => 'entity', 'subblock' => 'properties'))), 'set_options' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'auditable' => false), 'form' => array('type' => 'oro_entity_option_set_collection', 'options' => array('required' => false, 'label' => 'Options', 'block' => 'entity', 'subblock' => 'properties', 'type' => 'oro_entity_option_set', 'tooltip' => 'Deleting an option will remove these values from related records.'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'ownership', array('entity' => array('items' => array('owner_type' => array('options' => array('required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'System'), 'priority' => 100), 'constraints' => array(0 => array('NotBlank' => NULL)), 'grid' => array('type' => 'select', 'label' => 'Ownership Type', 'filter_type' => 'choice', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'choices' => 'oro_organization.method.get_ownership_type'), 'form' => array('type' => 'oro_type_choice_ownership_type', 'options' => array('block' => 'other', 'required' => true, 'label' => 'Ownership Type'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'security', array('entity' => array('items' => array('type' => array('options' => array('auditable' => false)), 'permissions' => NULL, 'group_name' => NULL)))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'dataaudit', array('entity' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))), 'field' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))))));

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.type.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType A Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType instance.
     */
    protected function getOroEntityConfig_Type_ConfigService()
    {
        return $this->services['oro_entity_config.type.config'] = new \Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.extend.extend_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Extend\ExtendManager A Oro\Bundle\EntityExtendBundle\Extend\ExtendManager instance.
     */
    protected function getOroEntityExtend_Extend_ExtendManagerService()
    {
        return $this->services['oro_entity_extend.extend.extend_manager'] = new \Oro\Bundle\EntityExtendBundle\Extend\ExtendManager($this->get('oro_entity_config.provider.extend'));
    }

    /**
     * Gets the 'oro_entity_extend.extension.extend_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension A Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension instance.
     */
    protected function getOroEntityExtend_Extension_ExtendEntityService()
    {
        return $this->services['oro_entity_extend.extension.extend_entity'] = new \Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension($this->get('oro_entity_extend.extend.extend_manager'), $this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.listener.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber A Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber instance.
     */
    protected function getOroEntityExtend_Listener_ConfigSubscriberService()
    {
        return $this->services['oro_entity_extend.listener.config_subscriber'] = new \Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber($this->get('oro_entity_extend.extend.extend_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.listener.entity_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber A Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber instance.
     */
    protected function getOroEntityExtend_Listener_EntitySubscriberService()
    {
        return $this->services['oro_entity_extend.listener.entity_subscriber'] = new \Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber();
    }

    /**
     * Gets the 'oro_entity_extend.tools.dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper A Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper instance.
     */
    protected function getOroEntityExtend_Tools_DumperService()
    {
        return $this->services['oro_entity_extend.tools.dumper'] = new \Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper($this->get('doctrine.orm.default_entity_manager'), __DIR__);
    }

    /**
     * Gets the 'oro_entity_extend.twig.view_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Twig\ViewExtension A Oro\Bundle\EntityExtendBundle\Twig\ViewExtension instance.
     */
    protected function getOroEntityExtend_Twig_ViewExtensionService()
    {
        return $this->services['oro_entity_extend.twig.view_extension'] = new \Oro\Bundle\EntityExtendBundle\Twig\ViewExtension($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.type.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Form\Type\FieldType A Oro\Bundle\EntityExtendBundle\Form\Type\FieldType instance.
     */
    protected function getOroEntityExtend_Type_FieldService()
    {
        return $this->services['oro_entity_extend.type.field'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\FieldType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.type.option_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType A Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType instance.
     */
    protected function getOroEntityExtend_Type_OptionSetService()
    {
        return $this->services['oro_entity_extend.type.option_set'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType();
    }

    /**
     * Gets the 'oro_entity_extend.type.option_set_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType A Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType instance.
     */
    protected function getOroEntityExtend_Type_OptionSetCollectionService()
    {
        return $this->services['oro_entity_extend.type.option_set_collection'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.type.relation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityExtendBundle\Form\Type\RelationType A Oro\Bundle\EntityExtendBundle\Form\Type\RelationType instance.
     */
    protected function getOroEntityExtend_Type_RelationService()
    {
        return $this->services['oro_entity_extend.type.relation'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\RelationType($this->get('oro_entity_config.provider.extend'));
    }

    /**
     * Gets the 'oro_filter.boolean_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\BooleanFilter A Oro\Bundle\FilterBundle\Filter\BooleanFilter instance.
     */
    protected function getOroFilter_BooleanFilterService()
    {
        return $this->services['oro_filter.boolean_filter'] = new \Oro\Bundle\FilterBundle\Filter\BooleanFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.choice_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\ChoiceFilter A Oro\Bundle\FilterBundle\Filter\ChoiceFilter instance.
     */
    protected function getOroFilter_ChoiceFilterService()
    {
        return $this->services['oro_filter.choice_filter'] = new \Oro\Bundle\FilterBundle\Filter\ChoiceFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.date_range_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\DateRangeFilter A Oro\Bundle\FilterBundle\Filter\DateRangeFilter instance.
     */
    protected function getOroFilter_DateRangeFilterService()
    {
        return $this->services['oro_filter.date_range_filter'] = new \Oro\Bundle\FilterBundle\Filter\DateRangeFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.datetime_range_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter A Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter instance.
     */
    protected function getOroFilter_DatetimeRangeFilterService()
    {
        return $this->services['oro_filter.datetime_range_filter'] = new \Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.entity_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\EntityFilter A Oro\Bundle\FilterBundle\Filter\EntityFilter instance.
     */
    protected function getOroFilter_EntityFilterService()
    {
        return $this->services['oro_filter.entity_filter'] = new \Oro\Bundle\FilterBundle\Filter\EntityFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.extension.orm_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension A Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension instance.
     */
    protected function getOroFilter_Extension_OrmFilterService()
    {
        $this->services['oro_filter.extension.orm_filter'] = $instance = new \Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension($this->get('oro_datagrid.datagrid.request_params'), $this->get('translator.default'));

        $instance->addFilter('string', $this->get('oro_filter.string_filter'));
        $instance->addFilter('selectrow', $this->get('oro_filter.select_row_filter'));
        $instance->addFilter('number', $this->get('oro_filter.number_filter'));
        $instance->addFilter('percent', $this->get('oro_filter.percent_filter'));
        $instance->addFilter('choice', $this->get('oro_filter.choice_filter'));
        $instance->addFilter('entity', $this->get('oro_filter.entity_filter'));
        $instance->addFilter('boolean', $this->get('oro_filter.boolean_filter'));
        $instance->addFilter('date', $this->get('oro_filter.date_range_filter'));
        $instance->addFilter('datetime', $this->get('oro_filter.datetime_range_filter'));
        $instance->addFilter('ajax_choice', $this->get('pim_filter.ajax_choice_filter'));
        $instance->addFilter('product_scope', $this->get('pim_filter.product_scope_filter'));
        $instance->addFilter('product_category', $this->get('pim_filter.product_category_filter'));
        $instance->addFilter('product_groups', $this->get('pim_filter.product_groups_filter'));
        $instance->addFilter('product_family', $this->get('pim_filter.product_family_filter'));
        $instance->addFilter('product_completeness', $this->get('pim_filter.product_completeness_filter'));
        $instance->addFilter('product_date', $this->get('pim_filter.product_date_filter'));
        $instance->addFilter('product_enabled', $this->get('pim_filter.product_enabled_filter'));
        $instance->addFilter('product_in_group', $this->get('pim_filter.product_in_group_filter'));
        $instance->addFilter('product_is_associated', $this->get('pim_filter.product_is_associated_filter'));
        $instance->addFilter('product_value_string', $this->get('pim_filter.product_value_string'));
        $instance->addFilter('product_value_choice', $this->get('pim_filter.product_value_choice'));
        $instance->addFilter('product_value_number', $this->get('pim_filter.product_value_number'));
        $instance->addFilter('product_value_date', $this->get('pim_filter.product_value_date'));
        $instance->addFilter('product_value_datetime', $this->get('pim_filter.product_value_datetime'));
        $instance->addFilter('product_value_boolean', $this->get('pim_filter.product_value_boolean'));
        $instance->addFilter('product_value_metric', $this->get('pim_filter.product_value_metric'));
        $instance->addFilter('product_value_price', $this->get('pim_filter.product_value_price'));

        return $instance;
    }

    /**
     * Gets the 'oro_filter.filter_utility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\FilterUtility A Oro\Bundle\FilterBundle\Filter\FilterUtility instance.
     */
    protected function getOroFilter_FilterUtilityService()
    {
        return $this->services['oro_filter.filter_utility'] = new \Oro\Bundle\FilterBundle\Filter\FilterUtility();
    }

    /**
     * Gets the 'oro_filter.form.type.date_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\DateRangeType A Oro\Bundle\FilterBundle\Form\Type\DateRangeType instance.
     */
    protected function getOroFilter_Form_Type_DateRangeService()
    {
        return $this->services['oro_filter.form.type.date_range'] = new \Oro\Bundle\FilterBundle\Form\Type\DateRangeType();
    }

    /**
     * Gets the 'oro_filter.form.type.datetime_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType A Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType instance.
     */
    protected function getOroFilter_Form_Type_DatetimeRangeService()
    {
        return $this->services['oro_filter.form.type.datetime_range'] = new \Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType instance.
     */
    protected function getOroFilter_Form_Type_FilterService()
    {
        return $this->services['oro_filter.form.type.filter'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_BooleanService()
    {
        return $this->services['oro_filter.form.type.filter.boolean'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_ChoiceService()
    {
        return $this->services['oro_filter.form.type.filter.choice'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.date_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_DateRangeService()
    {
        return $this->services['oro_filter.form.type.filter.date_range'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.datetime_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_DatetimeRangeService()
    {
        return $this->services['oro_filter.form.type.filter.datetime_range'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_EntityService()
    {
        return $this->services['oro_filter.form.type.filter.entity'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_NumberService()
    {
        return $this->services['oro_filter.form.type.filter.number'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.selectrow' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_SelectrowService()
    {
        return $this->services['oro_filter.form.type.filter.selectrow'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_TextService()
    {
        return $this->services['oro_filter.form.type.filter.text'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.number_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\NumberFilter A Oro\Bundle\FilterBundle\Filter\NumberFilter instance.
     */
    protected function getOroFilter_NumberFilterService()
    {
        return $this->services['oro_filter.number_filter'] = new \Oro\Bundle\FilterBundle\Filter\NumberFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.percent_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\PercentFilter A Oro\Bundle\FilterBundle\Filter\PercentFilter instance.
     */
    protected function getOroFilter_PercentFilterService()
    {
        return $this->services['oro_filter.percent_filter'] = new \Oro\Bundle\FilterBundle\Filter\PercentFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.select_row_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\SelectRowFilter A Oro\Bundle\FilterBundle\Filter\SelectRowFilter instance.
     */
    protected function getOroFilter_SelectRowFilterService()
    {
        return $this->services['oro_filter.select_row_filter'] = new \Oro\Bundle\FilterBundle\Filter\SelectRowFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.string_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Filter\StringFilter A Oro\Bundle\FilterBundle\Filter\StringFilter instance.
     */
    protected function getOroFilter_StringFilterService()
    {
        return $this->services['oro_filter.string_filter'] = new \Oro\Bundle\FilterBundle\Filter\StringFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.twig.extension.render_header' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Twig\RenderHeaderExtension A Oro\Bundle\FilterBundle\Twig\RenderHeaderExtension instance.
     */
    protected function getOroFilter_Twig_Extension_RenderHeaderService()
    {
        return $this->services['oro_filter.twig.extension.render_header'] = new \Oro\Bundle\FilterBundle\Twig\RenderHeaderExtension('OroFilterBundle:Filter:header.html.twig');
    }

    /**
     * Gets the 'oro_filter.twig.extension.render_layout' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FilterBundle\Twig\RenderLayoutExtension A Oro\Bundle\FilterBundle\Twig\RenderLayoutExtension instance.
     */
    protected function getOroFilter_Twig_Extension_RenderLayoutService()
    {
        return $this->services['oro_filter.twig.extension.render_layout'] = new \Oro\Bundle\FilterBundle\Twig\RenderLayoutExtension('PimFilterBundle:Filter:pim-layout.js.twig');
    }

    /**
     * Gets the 'oro_form.autocomplete.search_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Autocomplete\SearchRegistry A Oro\Bundle\FormBundle\Autocomplete\SearchRegistry instance.
     */
    protected function getOroForm_Autocomplete_SearchRegistryService()
    {
        $this->services['oro_form.autocomplete.search_registry'] = $instance = new \Oro\Bundle\FormBundle\Autocomplete\SearchRegistry();

        $instance->addSearchHandler('entity_select', $this->get('oro_entity.form.handler.entity_select'));
        $instance->addSearchHandler('users', $this->get('oro_user.autocomplete.user.search_handler'));

        return $instance;
    }

    /**
     * Gets the 'oro_form.autocomplete.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Autocomplete\Security A Oro\Bundle\FormBundle\Autocomplete\Security instance.
     */
    protected function getOroForm_Autocomplete_SecurityService()
    {
        $this->services['oro_form.autocomplete.security'] = $instance = new \Oro\Bundle\FormBundle\Autocomplete\Security($this->get('oro_security.security_facade'));

        $instance->setAutocompleteAclResource('entity_select', 'oro_search');
        $instance->setAutocompleteAclResource('users', 'oro_user_user_view');

        return $instance;
    }

    /**
     * Gets the 'oro_form.extension.client_validation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension A Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension instance.
     */
    protected function getOroForm_Extension_ClientValidationService()
    {
        return $this->services['oro_form.extension.client_validation'] = new \Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension();
    }

    /**
     * Gets the 'oro_form.extension.constraint_as_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension A Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension instance.
     */
    protected function getOroForm_Extension_ConstraintAsOptionService()
    {
        return $this->services['oro_form.extension.constraint_as_option'] = new \Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension($this->get('oro_form.validator.constraint_factory'));
    }

    /**
     * Gets the 'oro_form.extension.data_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension A Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension instance.
     */
    protected function getOroForm_Extension_DataBlockService()
    {
        return $this->services['oro_form.extension.data_block'] = new \Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension();
    }

    /**
     * Gets the 'oro_form.extension.js_validation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension A Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension instance.
     */
    protected function getOroForm_Extension_JsValidationService()
    {
        return $this->services['oro_form.extension.js_validation'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension($this->get('oro_form.extension.js_validation.constraints_provider'));
    }

    /**
     * Gets the 'oro_form.extension.js_validation.constraints_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider A Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider instance.
     */
    protected function getOroForm_Extension_JsValidation_ConstraintsProviderService()
    {
        return $this->services['oro_form.extension.js_validation.constraints_provider'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'oro_form.extension.js_validation.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension A Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension instance.
     */
    protected function getOroForm_Extension_JsValidation_RepeatedService()
    {
        return $this->services['oro_form.extension.js_validation.repeated'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension();
    }

    /**
     * Gets the 'oro_form.importexport.primary_item_collection_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer A Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer instance.
     */
    protected function getOroForm_Importexport_PrimaryItemCollectionNormalizerService()
    {
        return $this->services['oro_form.importexport.primary_item_collection_normalizer'] = new \Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer();
    }

    /**
     * Gets the 'oro_form.twig.form_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Twig\FormExtension A Oro\Bundle\FormBundle\Twig\FormExtension instance.
     */
    protected function getOroForm_Twig_FormExtensionService()
    {
        return $this->services['oro_form.twig.form_extension'] = new \Oro\Bundle\FormBundle\Twig\FormExtension();
    }

    /**
     * Gets the 'oro_form.twig.js_validation_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Twig\JsValidationExtension A Oro\Bundle\FormBundle\Twig\JsValidationExtension instance.
     */
    protected function getOroForm_Twig_JsValidationExtensionService()
    {
        return $this->services['oro_form.twig.js_validation_extension'] = new \Oro\Bundle\FormBundle\Twig\JsValidationExtension();
    }

    /**
     * Gets the 'oro_form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\CollectionType A Oro\Bundle\FormBundle\Form\Type\CollectionType instance.
     */
    protected function getOroForm_Type_CollectionService()
    {
        return $this->services['oro_form.type.collection'] = new \Oro\Bundle\FormBundle\Form\Type\CollectionType();
    }

    /**
     * Gets the 'oro_form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\OroDateType A Oro\Bundle\FormBundle\Form\Type\OroDateType instance.
     */
    protected function getOroForm_Type_DateService()
    {
        return $this->services['oro_form.type.date'] = new \Oro\Bundle\FormBundle\Form\Type\OroDateType();
    }

    /**
     * Gets the 'oro_form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\OroDateTimeType A Oro\Bundle\FormBundle\Form\Type\OroDateTimeType instance.
     */
    protected function getOroForm_Type_DatetimeService()
    {
        return $this->services['oro_form.type.datetime'] = new \Oro\Bundle\FormBundle\Form\Type\OroDateTimeType($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_form.type.entity_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType A Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType instance.
     */
    protected function getOroForm_Type_EntityIdentifierService()
    {
        return $this->services['oro_form.type.entity_identifier'] = new \Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_form.type.icon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\OroIconType A Oro\Bundle\FormBundle\Form\Type\OroIconType instance.
     */
    protected function getOroForm_Type_IconService()
    {
        return $this->services['oro_form.type.icon'] = new \Oro\Bundle\FormBundle\Form\Type\OroIconType();
    }

    /**
     * Gets the 'oro_form.type.jqueryselect2_hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType A Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType instance.
     */
    protected function getOroForm_Type_Jqueryselect2HiddenService()
    {
        return $this->services['oro_form.type.jqueryselect2_hidden'] = new \Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_form.autocomplete.search_registry'));
    }

    /**
     * Gets the 'oro_form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\OroMoneyType A Oro\Bundle\FormBundle\Form\Type\OroMoneyType instance.
     */
    protected function getOroForm_Type_MoneyService()
    {
        return $this->services['oro_form.type.money'] = new \Oro\Bundle\FormBundle\Form\Type\OroMoneyType($this->get('oro_locale.settings'), $this->get('oro_locale.formatter.number'));
    }

    /**
     * Gets the 'oro_form.type.multiple_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Type\MultipleEntityType A Oro\Bundle\FormBundle\Form\Type\MultipleEntityType instance.
     */
    protected function getOroForm_Type_MultipleEntityService()
    {
        return $this->services['oro_form.type.multiple_entity'] = new \Oro\Bundle\FormBundle\Form\Type\MultipleEntityType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_form.validator.constraint_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Validator\ConstraintFactory A Oro\Bundle\FormBundle\Validator\ConstraintFactory instance.
     */
    protected function getOroForm_Validator_ConstraintFactoryService()
    {
        return $this->services['oro_form.validator.constraint_factory'] = new \Oro\Bundle\FormBundle\Validator\ConstraintFactory();
    }

    /**
     * Gets the 'oro_help.form.tooltip_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension A Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension instance.
     */
    protected function getOroHelp_Form_TooltipExtensionService()
    {
        return $this->services['oro_help.form.tooltip_extension'] = new \Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension();
    }

    /**
     * Gets the 'oro_help.listener.help_link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener A Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener instance.
     */
    protected function getOroHelp_Listener_HelpLinkService()
    {
        return $this->services['oro_help.listener.help_link'] = new \Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener($this, $this->get('oro_help.model.help_link_provider'));
    }

    /**
     * Gets the 'oro_help.model.help_link_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\HelpBundle\Model\HelpLinkProvider A Oro\Bundle\HelpBundle\Model\HelpLinkProvider instance.
     */
    protected function getOroHelp_Model_HelpLinkProviderService()
    {
        $this->services['oro_help.model.help_link_provider'] = $instance = new \Oro\Bundle\HelpBundle\Model\HelpLinkProvider($this->get('controller_name_converter'), $this);

        $instance->setConfiguration(array('resources' => array(), 'vendors' => array('Oro' => array('prefix' => NULL, 'alias' => 'Platform'), 'OroCRM' => array('prefix' => NULL, 'alias' => 'CRM')), 'routes' => array('oro_default' => array('uri' => 'CRM/OroCRMDashboardBundle')), 'defaults' => array('server' => 'http://help.orocrm.com/', 'prefix' => 'Third_Party')));

        return $instance;
    }

    /**
     * Gets the 'oro_help.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\HelpBundle\Twig\HelpExtension A Oro\Bundle\HelpBundle\Twig\HelpExtension instance.
     */
    protected function getOroHelp_Twig_ExtensionService()
    {
        return $this->services['oro_help.twig.extension'] = new \Oro\Bundle\HelpBundle\Twig\HelpExtension($this->get('oro_help.model.help_link_provider'));
    }

    /**
     * Gets the 'oro_imap.connector.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory A Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory instance.
     */
    protected function getOroImap_Connector_FactoryService()
    {
        return $this->services['oro_imap.connector.factory'] = new \Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory(new \Oro\Bundle\ImapBundle\Connector\ImapServicesFactory(array('' => array(0 => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\Imap', 1 => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\SearchStringManager'), 'X-GM-EXT-1' => array(0 => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\GmailImap', 1 => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\GmailSearchStringManager'))), 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnector');
    }

    /**
     * Gets the 'oro_imap.email_synchronizer' service.
     *
     * @return \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer A Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer instance.
     */
    protected function getOroImap_EmailSynchronizerService()
    {
        $a = $this->get('oro_email.email.address.manager');

        return new \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer($this->get('doctrine.orm.default_entity_manager'), new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a), $a, $this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt'));
    }

    /**
     * Gets the 'oro_imap.form.type.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\ImapBundle\Form\Type\ConfigurationType A Oro\Bundle\ImapBundle\Form\Type\ConfigurationType instance.
     */
    protected function getOroImap_Form_Type_ConfigurationService()
    {
        return $this->services['oro_imap.form.type.configuration'] = new \Oro\Bundle\ImapBundle\Form\Type\ConfigurationType($this->get('oro_security.encoder.mcrypt'));
    }

    /**
     * Gets the 'oro_installer.form.type.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType A Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType instance.
     */
    protected function getOroInstaller_Form_Type_ConfigurationService()
    {
        return $this->services['oro_installer.form.type.configuration'] = new \Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.database' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_DatabaseService()
    {
        return $this->services['oro_installer.form.type.configuration.database'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.mailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_MailerService()
    {
        return $this->services['oro_installer.form.type.configuration.mailer'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.system' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_SystemService()
    {
        return $this->services['oro_installer.form.type.configuration.system'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.websocket' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_WebsocketService()
    {
        return $this->services['oro_installer.form.type.configuration.websocket'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType();
    }

    /**
     * Gets the 'oro_installer.form.type.setup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Form\Type\SetupType A Oro\Bundle\InstallerBundle\Form\Type\SetupType instance.
     */
    protected function getOroInstaller_Form_Type_SetupService()
    {
        return $this->services['oro_installer.form.type.setup'] = new \Oro\Bundle\InstallerBundle\Form\Type\SetupType('Oro\\Bundle\\UserBundle\\Entity\\User');
    }

    /**
     * Gets the 'oro_installer.scenario' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Process\InstallerScenario A Oro\Bundle\InstallerBundle\Process\InstallerScenario instance.
     */
    protected function getOroInstaller_ScenarioService()
    {
        $this->services['oro_installer.scenario'] = $instance = new \Oro\Bundle\InstallerBundle\Process\InstallerScenario();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'oro_installer.yaml_persister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\InstallerBundle\Persister\YamlPersister A Oro\Bundle\InstallerBundle\Persister\YamlPersister instance.
     */
    protected function getOroInstaller_YamlPersisterService()
    {
        return $this->services['oro_installer.yaml_persister'] = new \Oro\Bundle\InstallerBundle\Persister\YamlPersister((dirname(dirname(__DIR__)).'/config'), 'dev');
    }

    /**
     * Gets the 'oro_locale.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroLocale_CacheService()
    {
        $this->services['oro_locale.cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_locale.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_locale.calendar' service.
     *
     * @return \Oro\Bundle\LocaleBundle\Model\Calendar A Oro\Bundle\LocaleBundle\Model\Calendar instance.
     */
    protected function getOroLocale_CalendarService()
    {
        return new \Oro\Bundle\LocaleBundle\Model\Calendar();
    }

    /**
     * Gets the 'oro_locale.calendar_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Model\CalendarFactory A Oro\Bundle\LocaleBundle\Model\CalendarFactory instance.
     */
    protected function getOroLocale_CalendarFactoryService()
    {
        return $this->services['oro_locale.calendar_factory'] = new \Oro\Bundle\LocaleBundle\Model\CalendarFactory($this);
    }

    /**
     * Gets the 'oro_locale.form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Form\Type\CountryType A Oro\Bundle\LocaleBundle\Form\Type\CountryType instance.
     */
    protected function getOroLocale_Form_Type_CountryService()
    {
        return $this->services['oro_locale.form.type.country'] = new \Oro\Bundle\LocaleBundle\Form\Type\CountryType();
    }

    /**
     * Gets the 'oro_locale.form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Form\Type\CurrencyType A Oro\Bundle\LocaleBundle\Form\Type\CurrencyType instance.
     */
    protected function getOroLocale_Form_Type_CurrencyService()
    {
        return $this->services['oro_locale.form.type.currency'] = new \Oro\Bundle\LocaleBundle\Form\Type\CurrencyType();
    }

    /**
     * Gets the 'oro_locale.form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Form\Type\LocaleType A Oro\Bundle\LocaleBundle\Form\Type\LocaleType instance.
     */
    protected function getOroLocale_Form_Type_LocaleService()
    {
        return $this->services['oro_locale.form.type.locale'] = new \Oro\Bundle\LocaleBundle\Form\Type\LocaleType();
    }

    /**
     * Gets the 'oro_locale.form.type.name_format' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Form\Type\NameFormatType A Oro\Bundle\LocaleBundle\Form\Type\NameFormatType instance.
     */
    protected function getOroLocale_Form_Type_NameFormatService()
    {
        return $this->services['oro_locale.form.type.name_format'] = new \Oro\Bundle\LocaleBundle\Form\Type\NameFormatType($this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Form\Type\TimezoneType A Oro\Bundle\LocaleBundle\Form\Type\TimezoneType instance.
     */
    protected function getOroLocale_Form_Type_TimezoneService()
    {
        return $this->services['oro_locale.form.type.timezone'] = new \Oro\Bundle\LocaleBundle\Form\Type\TimezoneType($this->get('oro_locale.cache'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter A Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_IntlService()
    {
        return $this->services['oro_locale.format_converter.date_time.intl'] = new \Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.moment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter A Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_MomentService()
    {
        return $this->services['oro_locale.format_converter.date_time.moment'] = new \Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry A Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_RegistryService()
    {
        $a = $this->get('oro_locale.formatter.date_time');

        $this->services['oro_locale.format_converter.date_time.registry'] = $instance = new \Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry();

        $instance->addFormatConverter('jquery_ui', new \Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter($a));
        $instance->addFormatConverter('intl', new \Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter($a));
        $instance->addFormatConverter('moment', new \Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter($a));

        return $instance;
    }

    /**
     * Gets the 'oro_locale.formatter.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Formatter\AddressFormatter A Oro\Bundle\LocaleBundle\Formatter\AddressFormatter instance.
     */
    protected function getOroLocale_Formatter_AddressService()
    {
        return $this->services['oro_locale.formatter.address'] = new \Oro\Bundle\LocaleBundle\Formatter\AddressFormatter($this->get('oro_locale.settings'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.formatter.date_time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter A Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter instance.
     */
    protected function getOroLocale_Formatter_DateTimeService()
    {
        return $this->services['oro_locale.formatter.date_time'] = new \Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.formatter.name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Formatter\NameFormatter A Oro\Bundle\LocaleBundle\Formatter\NameFormatter instance.
     */
    protected function getOroLocale_Formatter_NameService()
    {
        return $this->services['oro_locale.formatter.name'] = new \Oro\Bundle\LocaleBundle\Formatter\NameFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.formatter.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Formatter\NumberFormatter A Oro\Bundle\LocaleBundle\Formatter\NumberFormatter instance.
     */
    protected function getOroLocale_Formatter_NumberService()
    {
        return $this->services['oro_locale.formatter.number'] = new \Oro\Bundle\LocaleBundle\Formatter\NumberFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\EventListener\LocaleListener A Oro\Bundle\LocaleBundle\EventListener\LocaleListener instance.
     */
    protected function getOroLocale_LocaleListenerService()
    {
        $this->services['oro_locale.locale_listener'] = $instance = new \Oro\Bundle\LocaleBundle\EventListener\LocaleListener($this->get('oro_locale.settings'), '2015-09-15T11:41:37+02:00');

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_locale.settings' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Model\LocaleSettings A Oro\Bundle\LocaleBundle\Model\LocaleSettings instance.
     */
    protected function getOroLocale_SettingsService()
    {
        $this->services['oro_locale.settings'] = $instance = new \Oro\Bundle\LocaleBundle\Model\LocaleSettings($this->get('oro_config.global'), $this->get('oro_locale.calendar_factory'));

        $instance->addNameFormats(array('en' => '%prefix% %first_name% %middle_name% %last_name% %suffix%', 'en_US' => '%prefix% %first_name% %middle_name% %last_name% %suffix%', 'ru' => '%last_name% %first_name% %middle_name%', 'ru_RU' => '%last_name% %first_name% %middle_name%'));
        $instance->addAddressFormats(array('AD' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'parish', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AG' => array('require' => array(0 => 'street'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AR' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%POSTAL_CODE% %CITY%\\n%region%\\n%country%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AS' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AT' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AU' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AX' => array('format' => '%organization%\\n%name%\\n%street%\\nAX-%postal_code% %city%\\n%country%\\nÅLAND', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'AX-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AZ' => array('format' => '%name%\\n%organization%\\n%street%\\nAZ %postal_code% %city%\\n%country%', 'postprefix' => 'AZ ', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BB' => array('region_name_type' => 'parish', 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BD' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% - %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BE' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BF' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BG' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BL' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BM' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BR' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY%-%REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'region', 2 => 'city', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BS' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BY' => array('format' => '%country%\\n%region%\\n%postal_code% %city% %street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CA' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION%, %COUNTRY% %POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CC' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CD' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CH' => array('format' => '%organization%\\n%name%\\n%street%\\nCH-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'CH-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CI' => array('format' => '%name%\\n%organization% %street% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CN' => array('format' => '%postal_code%\\n%COUNTRY%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%, %city%\\n%REGION%, %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'has_disputed' => true, 'format_charset' => 'GB2312', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL), 'CO' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CV' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CX' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DK' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DO' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EC' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EG' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\n%postal_code%', 'direction' => 'rtl', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ES' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ET' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FI' => array('format' => '%organization%\\n%name%\\n%street%\\nFI-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'FI-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FK' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FM' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FO' => array('format' => '%name%\\n%organization%\\n%street%\\nFO%postal_code% %city%\\n%country%', 'postprefix' => 'FO', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FR' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GB' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%region%\\n%country%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'county', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GG' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nGUERNSEY\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GI' => array('format' => '%name%\\n%organization%\\n%street%\\n%country%', 'require' => array(0 => 'street'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GN' => array('format' => '%name%\\n%organization%\\n%postal_code% %street% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GP' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GS' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%- %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GU' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GW' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HK' => array('format' => '%REGION%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'area', 'format_charset' => 'Big5', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'HM' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HR' => array('format' => '%name%\\n%organization%\\n%street%\\nHR-%postal_code% %city%\\n%country%', 'postprefix' => 'HR-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HT' => array('format' => '%name%\\n%organization%\\n%street%\\nHT%postal_code% %city%\\n%country%', 'postprefix' => 'HT', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HU' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%CITY%\\n%STREET%\\n%COUNTRY%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ID' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'region_name_type' => 'county', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IL' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'direction' => 'rtl', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IM' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IO' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IQ' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY%, %REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JE' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nJERSEY\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JM' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'region_name_type' => 'parish', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JO' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JP' => array('format' => '〒%postal_code%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'prefecture', 'format_charset' => 'ISO-2022-JP', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'KE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KG' => array('format' => '%postal_code% %country% %city% %street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KI' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%REGION%\\n%CITY%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KR' => array('format' => '%country%\\n%region% %city%\\n%street%\\n%organization%\\n%name%\\nSEOUL %POSTAL_CODE%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\nSEOUL %POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'do_si', 'format_charset' => 'EUC-KR', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'KW' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KY' => array('format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KZ' => array('format' => '%postal_code%\\n%country%\\n%region%\\n%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LB' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LI' => array('format' => '%organization%\\n%name%\\n%street%\\nFL-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'FL-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LS' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LT' => array('format' => '%organization%\\n%name%\\n%street%\\nLT-%postal_code% %city%\\n%country%', 'postprefix' => 'LT-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LU' => array('format' => '%organization%\\n%name%\\n%street%\\nL-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'L-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LV' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %country%, %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MC' => array('format' => '%name%\\n%organization%\\n%street%\\nMC-%postal_code% %city%\\n%country%', 'postprefix' => 'MC-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MD' => array('format' => '%name%\\n%organization%\\n%street%\\nMD-%postal_code% %city%\\n%country%', 'postprefix' => 'MD-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ME' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MG' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MH' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MK' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MN' => array('format' => '%name%\\n%organization%\\n%street%\\n%region% %city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MO' => array('format' => '%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%', 'require' => array(0 => 'street'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MP' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MQ' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MT' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %POSTAL_CODE%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MU' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MV' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MW' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MX' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE% %CITY%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NC' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NF' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NG' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NI' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%CITY%, %REGION%\\n%COUNTRY%', 'region_name_type' => 'department', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NL' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NO' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NP' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NR' => array('format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'district', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'OM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PA' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PF' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PG' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code% %region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PH' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%-%postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PM' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PN' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PR' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% PR %postal_code%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'zip_name_type' => 'zip', 'postprefix' => 'PR', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PW' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RE' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RO' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RU' => array('format' => '%postal_code% %COUNTRY% %CITY%\\n%STREET%\\n%organization%\\n%name%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SA' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SC' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SE' => array('format' => '%organization%\\n%name%\\n%street%\\nSE-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'SE-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SG' => array('format' => '%name%\\n%organization%\\n%street%\\nSINGAPORE %postal_code%', 'require' => array(0 => 'street', 1 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SH' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SI' => array('format' => '%name%\\n%organization%\\n%street%\\nSI- %postal_code% %city%\\n%country%', 'postprefix' => 'SI-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SJ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SK' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SN' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SO' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%, %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SR' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%city% %REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ST' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SV' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%-%CITY%\\n%REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SZ' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TC' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%', 'format_charset' => 'TIS-620', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'TJ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TN' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%/%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TV' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TW' => array('format' => '%postal_code%\\n%country%\\n%region%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %region% %country% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'county', 'format_charset' => 'Big5', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'UA' => array('format' => '%postal_code% %country% %city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UM' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'US' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %REGION_CODE% %COUNTRY_ISO2% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%\\n%REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VE' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VG' => array('require' => array(0 => 'street'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VI' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'WF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'YE' => array('require' => array(0 => 'street', 1 => 'city'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'YT' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ZA' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ZM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8')));
        $instance->addLocaleData(array('AD' => array('currency_code' => 'EUR', 'phone_prefix' => '376', 'default_locale' => 'ca'), 'AE' => array('currency_code' => 'AED', 'phone_prefix' => '971', 'default_locale' => 'ar_AE'), 'AF' => array('currency_code' => 'AFN', 'phone_prefix' => '93', 'default_locale' => 'fa_AF'), 'AG' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-268', 'default_locale' => 'en_AG'), 'AI' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-264', 'default_locale' => 'en'), 'AL' => array('currency_code' => 'ALL', 'phone_prefix' => '355', 'default_locale' => 'sq'), 'AM' => array('currency_code' => 'AMD', 'phone_prefix' => '374', 'default_locale' => 'hy'), 'AO' => array('currency_code' => 'AOA', 'phone_prefix' => '244', 'default_locale' => 'pt_AO'), 'AR' => array('currency_code' => 'ARS', 'phone_prefix' => '54', 'default_locale' => 'es_AR'), 'AS' => array('currency_code' => 'USD', 'phone_prefix' => '+1-684', 'default_locale' => 'en_AS'), 'AT' => array('currency_code' => 'EUR', 'phone_prefix' => '43', 'default_locale' => 'de_AT'), 'AU' => array('currency_code' => 'AUD', 'phone_prefix' => '61', 'default_locale' => 'en_AU'), 'AW' => array('currency_code' => 'AWG', 'phone_prefix' => '297', 'default_locale' => 'nl_AW'), 'AX' => array('currency_code' => 'EUR', 'phone_prefix' => '+358-18', 'default_locale' => 'sv_AX'), 'AZ' => array('currency_code' => 'AZN', 'phone_prefix' => '994', 'default_locale' => 'az'), 'BA' => array('currency_code' => 'BAM', 'phone_prefix' => '387', 'default_locale' => 'bs'), 'BB' => array('currency_code' => 'BBD', 'phone_prefix' => '+1-246', 'default_locale' => 'en_BB'), 'BD' => array('currency_code' => 'BDT', 'phone_prefix' => '880', 'default_locale' => 'bn_BD'), 'BE' => array('currency_code' => 'EUR', 'phone_prefix' => '32', 'default_locale' => 'nl_BE'), 'BF' => array('currency_code' => 'XOF', 'phone_prefix' => '226', 'default_locale' => 'fr_BF'), 'BG' => array('currency_code' => 'BGN', 'phone_prefix' => '359', 'default_locale' => 'bg'), 'BH' => array('currency_code' => 'BHD', 'phone_prefix' => '973', 'default_locale' => 'ar_BH'), 'BI' => array('currency_code' => 'BIF', 'phone_prefix' => '257', 'default_locale' => 'fr_BI'), 'BJ' => array('currency_code' => 'XOF', 'phone_prefix' => '229', 'default_locale' => 'fr_BJ'), 'BL' => array('currency_code' => 'EUR', 'phone_prefix' => '590', 'default_locale' => 'fr'), 'BM' => array('currency_code' => 'BMD', 'phone_prefix' => '+1-441', 'default_locale' => 'en_BM'), 'BN' => array('currency_code' => 'BND', 'phone_prefix' => '673', 'default_locale' => 'ms_BN'), 'BO' => array('currency_code' => 'BOB', 'phone_prefix' => '591', 'default_locale' => 'es_BO'), 'BQ' => array('currency_code' => 'USD', 'phone_prefix' => '599', 'default_locale' => 'nl'), 'BR' => array('currency_code' => 'BRL', 'phone_prefix' => '55', 'default_locale' => 'pt_BR'), 'BS' => array('currency_code' => 'BSD', 'phone_prefix' => '+1-242', 'default_locale' => 'en_BS'), 'BT' => array('currency_code' => 'BTN', 'phone_prefix' => '975', 'default_locale' => 'dz'), 'BW' => array('currency_code' => 'BWP', 'phone_prefix' => '267', 'default_locale' => 'en_BW'), 'BY' => array('currency_code' => 'BYR', 'phone_prefix' => '375', 'default_locale' => 'be'), 'BZ' => array('currency_code' => 'BZD', 'phone_prefix' => '501', 'default_locale' => 'en_BZ'), 'CA' => array('currency_code' => 'CAD', 'phone_prefix' => '1', 'default_locale' => 'en_CA'), 'CC' => array('currency_code' => 'AUD', 'phone_prefix' => '61', 'default_locale' => 'ms'), 'CD' => array('currency_code' => 'CDF', 'phone_prefix' => '243', 'default_locale' => 'fr_CD'), 'CF' => array('currency_code' => 'XAF', 'phone_prefix' => '236', 'default_locale' => 'fr_CF'), 'CG' => array('currency_code' => 'XAF', 'phone_prefix' => '242', 'default_locale' => 'fr_CG'), 'CH' => array('currency_code' => 'CHF', 'phone_prefix' => '41', 'default_locale' => 'de_CH'), 'CI' => array('currency_code' => 'XOF', 'phone_prefix' => '225', 'default_locale' => 'fr_CI'), 'CK' => array('currency_code' => 'NZD', 'phone_prefix' => '682', 'default_locale' => 'en'), 'CL' => array('currency_code' => 'CLP', 'phone_prefix' => '56', 'default_locale' => 'es_CL'), 'CM' => array('currency_code' => 'XAF', 'phone_prefix' => '237', 'default_locale' => 'en_CM'), 'CN' => array('currency_code' => 'CNY', 'phone_prefix' => '86', 'default_locale' => 'zh_CN'), 'CO' => array('currency_code' => 'COP', 'phone_prefix' => '57', 'default_locale' => 'es_CO'), 'CR' => array('currency_code' => 'CRC', 'phone_prefix' => '506', 'default_locale' => 'es_CR'), 'CU' => array('currency_code' => 'CUP', 'phone_prefix' => '53', 'default_locale' => 'es_CU'), 'CV' => array('currency_code' => 'CVE', 'phone_prefix' => '238', 'default_locale' => 'pt_CV'), 'CW' => array('currency_code' => 'ANG', 'phone_prefix' => '599', 'default_locale' => 'nl'), 'CX' => array('currency_code' => 'AUD', 'phone_prefix' => '61', 'default_locale' => 'en'), 'CY' => array('currency_code' => 'EUR', 'phone_prefix' => '357', 'default_locale' => 'el_CY'), 'CZ' => array('currency_code' => 'CZK', 'phone_prefix' => '420', 'default_locale' => 'cs'), 'DE' => array('currency_code' => 'EUR', 'phone_prefix' => '49', 'default_locale' => 'de'), 'DJ' => array('currency_code' => 'DJF', 'phone_prefix' => '253', 'default_locale' => 'fr_DJ'), 'DK' => array('currency_code' => 'DKK', 'phone_prefix' => '45', 'default_locale' => 'da_DK'), 'DM' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-767', 'default_locale' => 'en_DM'), 'DO' => array('currency_code' => 'DOP', 'phone_prefix' => '+1-809', 'default_locale' => 'es_DO'), 'DZ' => array('currency_code' => 'DZD', 'phone_prefix' => '213', 'default_locale' => 'ar_DZ'), 'EC' => array('currency_code' => 'USD', 'phone_prefix' => '593', 'default_locale' => 'es_EC'), 'EE' => array('currency_code' => 'EUR', 'phone_prefix' => '372', 'default_locale' => 'et'), 'EG' => array('currency_code' => 'EGP', 'phone_prefix' => '20', 'default_locale' => 'ar_EG'), 'EH' => array('currency_code' => 'MAD', 'phone_prefix' => '212', 'default_locale' => 'ar'), 'ER' => array('currency_code' => 'ERN', 'phone_prefix' => '291', 'default_locale' => 'ti_ER'), 'ES' => array('currency_code' => 'EUR', 'phone_prefix' => '34', 'default_locale' => 'es_ES'), 'ET' => array('currency_code' => 'ETB', 'phone_prefix' => '251', 'default_locale' => 'am'), 'FI' => array('currency_code' => 'EUR', 'phone_prefix' => '358', 'default_locale' => 'fi_FI'), 'FJ' => array('currency_code' => 'FJD', 'phone_prefix' => '679', 'default_locale' => 'en_FJ'), 'FK' => array('currency_code' => 'FKP', 'phone_prefix' => '500', 'default_locale' => 'en'), 'FM' => array('currency_code' => 'USD', 'phone_prefix' => '691', 'default_locale' => 'en_FM'), 'FO' => array('currency_code' => 'DKK', 'phone_prefix' => '298', 'default_locale' => 'fo'), 'FR' => array('currency_code' => 'EUR', 'phone_prefix' => '33', 'default_locale' => 'fr_FR'), 'GA' => array('currency_code' => 'XAF', 'phone_prefix' => '241', 'default_locale' => 'fr_GA'), 'GB' => array('currency_code' => 'GBP', 'phone_prefix' => '44', 'default_locale' => 'en_GB'), 'GD' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-473', 'default_locale' => 'en_GD'), 'GE' => array('currency_code' => 'GEL', 'phone_prefix' => '995', 'default_locale' => 'ka'), 'GF' => array('currency_code' => 'EUR', 'phone_prefix' => '594', 'default_locale' => 'fr_GF'), 'GG' => array('currency_code' => 'GBP', 'phone_prefix' => '+44-1481', 'default_locale' => 'en'), 'GH' => array('currency_code' => 'GHS', 'phone_prefix' => '233', 'default_locale' => 'en_GH'), 'GI' => array('currency_code' => 'GIP', 'phone_prefix' => '350', 'default_locale' => 'en_GI'), 'GL' => array('currency_code' => 'DKK', 'phone_prefix' => '299', 'default_locale' => 'kl'), 'GM' => array('currency_code' => 'GMD', 'phone_prefix' => '220', 'default_locale' => 'en_GM'), 'GN' => array('currency_code' => 'GNF', 'phone_prefix' => '224', 'default_locale' => 'fr_GN'), 'GP' => array('currency_code' => 'EUR', 'phone_prefix' => '590', 'default_locale' => 'fr_GP'), 'GQ' => array('currency_code' => 'XAF', 'phone_prefix' => '240', 'default_locale' => 'es_GQ'), 'GR' => array('currency_code' => 'EUR', 'phone_prefix' => '30', 'default_locale' => 'el_GR'), 'GS' => array('currency_code' => 'GBP', 'default_locale' => 'en'), 'GT' => array('currency_code' => 'GTQ', 'phone_prefix' => '502', 'default_locale' => 'es_GT'), 'GU' => array('currency_code' => 'USD', 'phone_prefix' => '+1-671', 'default_locale' => 'en_GU'), 'GW' => array('currency_code' => 'XOF', 'phone_prefix' => '245', 'default_locale' => 'pt_GW'), 'GY' => array('currency_code' => 'GYD', 'phone_prefix' => '592', 'default_locale' => 'en_GY'), 'HK' => array('currency_code' => 'HKD', 'phone_prefix' => '852', 'default_locale' => 'zh_HK'), 'HN' => array('currency_code' => 'HNL', 'phone_prefix' => '504', 'default_locale' => 'es_HN'), 'HR' => array('currency_code' => 'HRK', 'phone_prefix' => '385', 'default_locale' => 'hr_HR'), 'HT' => array('currency_code' => 'HTG', 'phone_prefix' => '509', 'default_locale' => 'fr'), 'HU' => array('currency_code' => 'HUF', 'phone_prefix' => '36', 'default_locale' => 'hu_HU'), 'ID' => array('currency_code' => 'IDR', 'phone_prefix' => '62', 'default_locale' => 'id'), 'IE' => array('currency_code' => 'EUR', 'phone_prefix' => '353', 'default_locale' => 'en_IE'), 'IL' => array('currency_code' => 'ILS', 'phone_prefix' => '972', 'default_locale' => 'he'), 'IM' => array('currency_code' => 'GBP', 'phone_prefix' => '+44-1624', 'default_locale' => 'en'), 'IN' => array('currency_code' => 'INR', 'phone_prefix' => '91', 'default_locale' => 'en_IN'), 'IO' => array('currency_code' => 'USD', 'phone_prefix' => '246', 'default_locale' => 'en'), 'IQ' => array('currency_code' => 'IQD', 'phone_prefix' => '964', 'default_locale' => 'ar_IQ'), 'IR' => array('currency_code' => 'IRR', 'phone_prefix' => '98', 'default_locale' => 'fa_IR'), 'IS' => array('currency_code' => 'ISK', 'phone_prefix' => '354', 'default_locale' => 'is'), 'IT' => array('currency_code' => 'EUR', 'phone_prefix' => '39', 'default_locale' => 'it_IT'), 'JE' => array('currency_code' => 'GBP', 'phone_prefix' => '+44-1534', 'default_locale' => 'en'), 'JM' => array('currency_code' => 'JMD', 'phone_prefix' => '+1-876', 'default_locale' => 'en_JM'), 'JO' => array('currency_code' => 'JOD', 'phone_prefix' => '962', 'default_locale' => 'ar_JO'), 'JP' => array('currency_code' => 'JPY', 'phone_prefix' => '81', 'default_locale' => 'ja'), 'KE' => array('currency_code' => 'KES', 'phone_prefix' => '254', 'default_locale' => 'en_KE'), 'KG' => array('currency_code' => 'KGS', 'phone_prefix' => '996', 'default_locale' => 'ru'), 'KH' => array('currency_code' => 'KHR', 'phone_prefix' => '855', 'default_locale' => 'km'), 'KI' => array('currency_code' => 'AUD', 'phone_prefix' => '686', 'default_locale' => 'en_KI'), 'KM' => array('currency_code' => 'KMF', 'phone_prefix' => '269', 'default_locale' => 'ar'), 'KN' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-869', 'default_locale' => 'en_KN'), 'KP' => array('currency_code' => 'KPW', 'phone_prefix' => '850', 'default_locale' => 'ko_KP'), 'KR' => array('currency_code' => 'KRW', 'phone_prefix' => '82', 'default_locale' => 'ko_KR'), 'XK' => array('currency_code' => 'EUR', 'default_locale' => 'sq'), 'KW' => array('currency_code' => 'KWD', 'phone_prefix' => '965', 'default_locale' => 'ar_KW'), 'KY' => array('currency_code' => 'KYD', 'phone_prefix' => '+1-345', 'default_locale' => 'en_KY'), 'KZ' => array('currency_code' => 'KZT', 'phone_prefix' => '7', 'default_locale' => 'kk'), 'LA' => array('currency_code' => 'LAK', 'phone_prefix' => '856', 'default_locale' => 'lo'), 'LB' => array('currency_code' => 'LBP', 'phone_prefix' => '961', 'default_locale' => 'ar_LB'), 'LC' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-758', 'default_locale' => 'en_LC'), 'LI' => array('currency_code' => 'CHF', 'phone_prefix' => '423', 'default_locale' => 'de_LI'), 'LK' => array('currency_code' => 'LKR', 'phone_prefix' => '94', 'default_locale' => 'si'), 'LR' => array('currency_code' => 'LRD', 'phone_prefix' => '231', 'default_locale' => 'en_LR'), 'LS' => array('currency_code' => 'LSL', 'phone_prefix' => '266', 'default_locale' => 'en_LS'), 'LT' => array('currency_code' => 'LTL', 'phone_prefix' => '370', 'default_locale' => 'lt'), 'LU' => array('currency_code' => 'EUR', 'phone_prefix' => '352', 'default_locale' => 'fr'), 'LV' => array('currency_code' => 'LVL', 'phone_prefix' => '371', 'default_locale' => 'lv'), 'LY' => array('currency_code' => 'LYD', 'phone_prefix' => '218', 'default_locale' => 'ar_LY'), 'MA' => array('currency_code' => 'MAD', 'phone_prefix' => '212', 'default_locale' => 'ar_MA'), 'MC' => array('currency_code' => 'EUR', 'phone_prefix' => '377', 'default_locale' => 'fr_MC'), 'MD' => array('currency_code' => 'MDL', 'phone_prefix' => '373', 'default_locale' => 'ro'), 'ME' => array('currency_code' => 'EUR', 'phone_prefix' => '382', 'default_locale' => 'sr'), 'MF' => array('currency_code' => 'EUR', 'phone_prefix' => '590', 'default_locale' => 'fr'), 'MG' => array('currency_code' => 'MGA', 'phone_prefix' => '261', 'default_locale' => 'fr_MG'), 'MH' => array('currency_code' => 'USD', 'phone_prefix' => '692', 'default_locale' => 'en'), 'MK' => array('currency_code' => 'MKD', 'phone_prefix' => '389', 'default_locale' => 'mk'), 'ML' => array('currency_code' => 'XOF', 'phone_prefix' => '223', 'default_locale' => 'fr_ML'), 'MM' => array('currency_code' => 'MMK', 'phone_prefix' => '95', 'default_locale' => 'my'), 'MN' => array('currency_code' => 'MNT', 'phone_prefix' => '976', 'default_locale' => 'mn'), 'MO' => array('currency_code' => 'MOP', 'phone_prefix' => '853', 'default_locale' => 'zh'), 'MP' => array('currency_code' => 'USD', 'phone_prefix' => '+1-670', 'default_locale' => 'fil'), 'MQ' => array('currency_code' => 'EUR', 'phone_prefix' => '596', 'default_locale' => 'fr_MQ'), 'MR' => array('currency_code' => 'MRO', 'phone_prefix' => '222', 'default_locale' => 'ar_MR'), 'MS' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-664', 'default_locale' => 'en'), 'MT' => array('currency_code' => 'EUR', 'phone_prefix' => '356', 'default_locale' => 'mt'), 'MU' => array('currency_code' => 'MUR', 'phone_prefix' => '230', 'default_locale' => 'en_MU'), 'MV' => array('currency_code' => 'MVR', 'phone_prefix' => '960', 'default_locale' => 'en'), 'MW' => array('currency_code' => 'MWK', 'phone_prefix' => '265', 'default_locale' => 'en'), 'MX' => array('currency_code' => 'MXN', 'phone_prefix' => '52', 'default_locale' => 'es_MX'), 'MY' => array('currency_code' => 'MYR', 'phone_prefix' => '60', 'default_locale' => 'ms_MY'), 'MZ' => array('currency_code' => 'MZN', 'phone_prefix' => '258', 'default_locale' => 'pt_MZ'), 'NA' => array('currency_code' => 'NAD', 'phone_prefix' => '264', 'default_locale' => 'en_NA'), 'NC' => array('currency_code' => 'XPF', 'phone_prefix' => '687', 'default_locale' => 'fr_NC'), 'NE' => array('currency_code' => 'XOF', 'phone_prefix' => '227', 'default_locale' => 'fr_NE'), 'NF' => array('currency_code' => 'AUD', 'phone_prefix' => '672', 'default_locale' => 'en'), 'NG' => array('currency_code' => 'NGN', 'phone_prefix' => '234', 'default_locale' => 'en_NG'), 'NI' => array('currency_code' => 'NIO', 'phone_prefix' => '505', 'default_locale' => 'es_NI'), 'NL' => array('currency_code' => 'EUR', 'phone_prefix' => '31', 'default_locale' => 'nl_NL'), 'NO' => array('currency_code' => 'NOK', 'phone_prefix' => '47', 'default_locale' => 'no'), 'NP' => array('currency_code' => 'NPR', 'phone_prefix' => '977', 'default_locale' => 'ne'), 'NR' => array('currency_code' => 'AUD', 'phone_prefix' => '674', 'default_locale' => 'en'), 'NU' => array('currency_code' => 'NZD', 'phone_prefix' => '683', 'default_locale' => 'en'), 'NZ' => array('currency_code' => 'NZD', 'phone_prefix' => '64', 'default_locale' => 'en_NZ'), 'OM' => array('currency_code' => 'OMR', 'phone_prefix' => '968', 'default_locale' => 'ar_OM'), 'PA' => array('currency_code' => 'PAB', 'phone_prefix' => '507', 'default_locale' => 'es_PA'), 'PE' => array('currency_code' => 'PEN', 'phone_prefix' => '51', 'default_locale' => 'es_PE'), 'PF' => array('currency_code' => 'XPF', 'phone_prefix' => '689', 'default_locale' => 'fr_PF'), 'PG' => array('currency_code' => 'PGK', 'phone_prefix' => '675', 'default_locale' => 'en_PG'), 'PH' => array('currency_code' => 'PHP', 'phone_prefix' => '63', 'default_locale' => 'tl'), 'PK' => array('currency_code' => 'PKR', 'phone_prefix' => '92', 'default_locale' => 'ur_PK'), 'PL' => array('currency_code' => 'PLN', 'phone_prefix' => '48', 'default_locale' => 'pl'), 'PM' => array('currency_code' => 'EUR', 'phone_prefix' => '508', 'default_locale' => 'fr'), 'PN' => array('currency_code' => 'NZD', 'phone_prefix' => '870', 'default_locale' => 'en'), 'PR' => array('currency_code' => 'USD', 'phone_prefix' => '+1-787', 'default_locale' => 'en_PR'), 'PS' => array('currency_code' => 'ILS', 'phone_prefix' => '970', 'default_locale' => 'ar_PS'), 'PT' => array('currency_code' => 'EUR', 'phone_prefix' => '351', 'default_locale' => 'pt_PT'), 'PW' => array('currency_code' => 'USD', 'phone_prefix' => '680', 'default_locale' => 'en'), 'PY' => array('currency_code' => 'PYG', 'phone_prefix' => '595', 'default_locale' => 'es_PY'), 'QA' => array('currency_code' => 'QAR', 'phone_prefix' => '974', 'default_locale' => 'ar_QA'), 'RE' => array('currency_code' => 'EUR', 'phone_prefix' => '262', 'default_locale' => 'fr_RE'), 'RO' => array('currency_code' => 'RON', 'phone_prefix' => '40', 'default_locale' => 'ro'), 'RS' => array('currency_code' => 'RSD', 'phone_prefix' => '381', 'default_locale' => 'sr'), 'RU' => array('currency_code' => 'RUB', 'phone_prefix' => '7', 'default_locale' => 'ru'), 'RW' => array('currency_code' => 'RWF', 'phone_prefix' => '250', 'default_locale' => 'rw'), 'SA' => array('currency_code' => 'SAR', 'phone_prefix' => '966', 'default_locale' => 'ar_SA'), 'SB' => array('currency_code' => 'SBD', 'phone_prefix' => '677', 'default_locale' => 'en_SB'), 'SC' => array('currency_code' => 'SCR', 'phone_prefix' => '248', 'default_locale' => 'en_SC'), 'SD' => array('currency_code' => 'SDG', 'phone_prefix' => '249', 'default_locale' => 'ar_SD'), 'SS' => array('currency_code' => 'SSP', 'phone_prefix' => '211', 'default_locale' => 'en'), 'SE' => array('currency_code' => 'SEK', 'phone_prefix' => '46', 'default_locale' => 'sv_SE'), 'SG' => array('currency_code' => 'SGD', 'phone_prefix' => '65', 'default_locale' => 'en'), 'SH' => array('currency_code' => 'SHP', 'phone_prefix' => '290', 'default_locale' => 'en'), 'SI' => array('currency_code' => 'EUR', 'phone_prefix' => '386', 'default_locale' => 'sl'), 'SJ' => array('currency_code' => 'NOK', 'phone_prefix' => '47', 'default_locale' => 'no'), 'SK' => array('currency_code' => 'EUR', 'phone_prefix' => '421', 'default_locale' => 'sk'), 'SL' => array('currency_code' => 'SLL', 'phone_prefix' => '232', 'default_locale' => 'en_SL'), 'SM' => array('currency_code' => 'EUR', 'phone_prefix' => '378', 'default_locale' => 'it_SM'), 'SN' => array('currency_code' => 'XOF', 'phone_prefix' => '221', 'default_locale' => 'fr_SN'), 'SO' => array('currency_code' => 'SOS', 'phone_prefix' => '252', 'default_locale' => 'so_SO'), 'SR' => array('currency_code' => 'SRD', 'phone_prefix' => '597', 'default_locale' => 'nl_SR'), 'ST' => array('currency_code' => 'STD', 'phone_prefix' => '239', 'default_locale' => 'pt_ST'), 'SV' => array('currency_code' => 'USD', 'phone_prefix' => '503', 'default_locale' => 'es_SV'), 'SX' => array('currency_code' => 'ANG', 'phone_prefix' => '599', 'default_locale' => 'nl'), 'SY' => array('currency_code' => 'SYP', 'phone_prefix' => '963', 'default_locale' => 'ar_SY'), 'SZ' => array('currency_code' => 'SZL', 'phone_prefix' => '268', 'default_locale' => 'en_SZ'), 'TC' => array('currency_code' => 'USD', 'phone_prefix' => '+1-649', 'default_locale' => 'en_TC'), 'TD' => array('currency_code' => 'XAF', 'phone_prefix' => '235', 'default_locale' => 'fr_TD'), 'TF' => array('currency_code' => 'EUR', 'default_locale' => 'fr'), 'TG' => array('currency_code' => 'XOF', 'phone_prefix' => '228', 'default_locale' => 'fr_TG'), 'TH' => array('currency_code' => 'THB', 'phone_prefix' => '66', 'default_locale' => 'th'), 'TJ' => array('currency_code' => 'TJS', 'phone_prefix' => '992', 'default_locale' => 'fr'), 'TK' => array('currency_code' => 'NZD', 'phone_prefix' => '690', 'default_locale' => 'en'), 'TL' => array('currency_code' => 'USD', 'phone_prefix' => '670', 'default_locale' => 'pt'), 'TM' => array('currency_code' => 'TMT', 'phone_prefix' => '993', 'default_locale' => 'ru'), 'TN' => array('currency_code' => 'TND', 'phone_prefix' => '216', 'default_locale' => 'ar_TN'), 'TO' => array('currency_code' => 'TOP', 'phone_prefix' => '676', 'default_locale' => 'to'), 'TR' => array('currency_code' => 'TRY', 'phone_prefix' => '90', 'default_locale' => 'tr_TR'), 'TT' => array('currency_code' => 'TTD', 'phone_prefix' => '+1-868', 'default_locale' => 'en_TT'), 'TV' => array('currency_code' => 'AUD', 'phone_prefix' => '688', 'default_locale' => 'en'), 'TW' => array('currency_code' => 'TWD', 'phone_prefix' => '886', 'default_locale' => 'zh_TW'), 'TZ' => array('currency_code' => 'TZS', 'phone_prefix' => '255', 'default_locale' => 'sw_TZ'), 'UA' => array('currency_code' => 'UAH', 'phone_prefix' => '380', 'default_locale' => 'uk'), 'UG' => array('currency_code' => 'UGX', 'phone_prefix' => '256', 'default_locale' => 'en_UG'), 'UM' => array('currency_code' => 'USD', 'phone_prefix' => '1', 'default_locale' => 'en_UM'), 'US' => array('currency_code' => 'USD', 'phone_prefix' => '1', 'default_locale' => 'en_US'), 'UY' => array('currency_code' => 'UYU', 'phone_prefix' => '598', 'default_locale' => 'es_UY'), 'UZ' => array('currency_code' => 'UZS', 'phone_prefix' => '998', 'default_locale' => 'uz'), 'VA' => array('currency_code' => 'EUR', 'phone_prefix' => '379', 'default_locale' => 'it'), 'VC' => array('currency_code' => 'XCD', 'phone_prefix' => '+1-784', 'default_locale' => 'en_VC'), 'VE' => array('currency_code' => 'VEF', 'phone_prefix' => '58', 'default_locale' => 'es_VE'), 'VG' => array('currency_code' => 'USD', 'phone_prefix' => '+1-284', 'default_locale' => 'en_VG'), 'VI' => array('currency_code' => 'USD', 'phone_prefix' => '+1-340', 'default_locale' => 'en_VI'), 'VN' => array('currency_code' => 'VND', 'phone_prefix' => '84', 'default_locale' => 'vi'), 'VU' => array('currency_code' => 'VUV', 'phone_prefix' => '678', 'default_locale' => 'fr'), 'WF' => array('currency_code' => 'XPF', 'phone_prefix' => '681', 'default_locale' => 'fr'), 'WS' => array('currency_code' => 'WST', 'phone_prefix' => '685', 'default_locale' => 'en'), 'YE' => array('currency_code' => 'YER', 'phone_prefix' => '967', 'default_locale' => 'ar_YE'), 'YT' => array('currency_code' => 'EUR', 'phone_prefix' => '262', 'default_locale' => 'fr_YT'), 'ZA' => array('currency_code' => 'ZAR', 'phone_prefix' => '27', 'default_locale' => 'zu'), 'ZM' => array('currency_code' => 'ZMK', 'phone_prefix' => '260', 'default_locale' => 'en_ZM'), 'ZW' => array('currency_code' => 'ZWL', 'phone_prefix' => '263', 'default_locale' => 'en_ZW'), 'CS' => array('currency_code' => 'RSD', 'phone_prefix' => '381', 'default_locale' => 'sr'), 'AN' => array('currency_code' => 'ANG', 'phone_prefix' => '599', 'default_locale' => 'nl')));
        $instance->addCurrencyData(array('AED' => array('symbol' => 'د.إ.‏'), 'AFN' => array('symbol' => '؋'), 'ALL' => array('symbol' => 'Lek'), 'AMD' => array('symbol' => 'դր.'), 'ANG' => array('symbol' => 'ANG'), 'AOA' => array('symbol' => 'Kz'), 'ARS' => array('symbol' => '$'), 'AUD' => array('symbol' => 'AU$'), 'AWG' => array('symbol' => 'Afl.'), 'AZN' => array('symbol' => 'man.'), 'BAM' => array('symbol' => 'KM'), 'BBD' => array('symbol' => '$'), 'BDT' => array('symbol' => '৳'), 'BGN' => array('symbol' => 'лв.'), 'BHD' => array('symbol' => 'د.ب.‏'), 'BIF' => array('symbol' => 'FBu'), 'BMD' => array('symbol' => '$'), 'BND' => array('symbol' => '$'), 'BOB' => array('symbol' => 'Bs'), 'BRL' => array('symbol' => 'R$'), 'BSD' => array('symbol' => 'BSD'), 'BTN' => array('symbol' => 'BTN'), 'BWP' => array('symbol' => 'P'), 'BYR' => array('symbol' => 'BYR'), 'BZD' => array('symbol' => '$'), 'CAD' => array('symbol' => '$'), 'CDF' => array('symbol' => 'FrCD'), 'CHF' => array('symbol' => 'CHF'), 'CLP' => array('symbol' => '$'), 'CNY' => array('symbol' => '￥'), 'COP' => array('symbol' => '$'), 'CRC' => array('symbol' => '₡'), 'CUP' => array('symbol' => 'CUP'), 'CVE' => array('symbol' => 'CVE'), 'CZK' => array('symbol' => 'Kč'), 'DJF' => array('symbol' => 'Fdj'), 'DKK' => array('symbol' => 'kr'), 'DOP' => array('symbol' => '$'), 'DZD' => array('symbol' => 'د.ج.‏'), 'EGP' => array('symbol' => 'ج.م.‏'), 'ERN' => array('symbol' => 'Nfk'), 'ETB' => array('symbol' => 'ብር'), 'EUR' => array('symbol' => '€'), 'FJD' => array('symbol' => 'FJD'), 'FKP' => array('symbol' => 'FKP'), 'GBP' => array('symbol' => '£'), 'GEL' => array('symbol' => 'GEL'), 'GHS' => array('symbol' => 'GHS'), 'GIP' => array('symbol' => 'GIP'), 'GMD' => array('symbol' => 'GMD'), 'GNF' => array('symbol' => 'FG'), 'GTQ' => array('symbol' => 'Q'), 'GYD' => array('symbol' => 'GYD'), 'HKD' => array('symbol' => '$'), 'HNL' => array('symbol' => 'L'), 'HRK' => array('symbol' => 'kn'), 'HTG' => array('symbol' => 'HTG'), 'HUF' => array('symbol' => 'Ft'), 'IDR' => array('symbol' => 'Rp'), 'ILS' => array('symbol' => '₪'), 'INR' => array('symbol' => '₹'), 'IQD' => array('symbol' => 'د.ع.‏'), 'IRR' => array('symbol' => '﷼'), 'ISK' => array('symbol' => 'kr'), 'JMD' => array('symbol' => '$'), 'JOD' => array('symbol' => 'د.أ.‏'), 'JPY' => array('symbol' => '￥'), 'KES' => array('symbol' => 'KES'), 'KGS' => array('symbol' => 'KGS'), 'KHR' => array('symbol' => '៛'), 'KMF' => array('symbol' => 'ف.ج.ق.‏'), 'KPW' => array('symbol' => 'KPW'), 'KRW' => array('symbol' => '₩'), 'KWD' => array('symbol' => 'د.ك.‏'), 'KYD' => array('symbol' => 'KYD'), 'KZT' => array('symbol' => 'тңг.'), 'LAK' => array('symbol' => 'LAK'), 'LBP' => array('symbol' => 'ل.ل.‏'), 'LKR' => array('symbol' => 'රු.'), 'LRD' => array('symbol' => 'LRD'), 'LSL' => array('symbol' => 'LSL'), 'LTL' => array('symbol' => 'Lt'), 'LVL' => array('symbol' => 'Ls'), 'LYD' => array('symbol' => 'د.ل.‏'), 'MAD' => array('symbol' => 'د.م.‏'), 'MDL' => array('symbol' => 'MDL'), 'MGA' => array('symbol' => 'MGA'), 'MKD' => array('symbol' => 'MKD'), 'MMK' => array('symbol' => 'K'), 'MNT' => array('symbol' => 'MNT'), 'MOP' => array('symbol' => 'MOP'), 'MRO' => array('symbol' => 'أ.م.‏'), 'MUR' => array('symbol' => 'MUR'), 'MVR' => array('symbol' => 'Rf.'), 'MWK' => array('symbol' => 'MWK'), 'MXN' => array('symbol' => '$'), 'MYR' => array('symbol' => 'RM'), 'MZN' => array('symbol' => 'MTn'), 'NAD' => array('symbol' => '$'), 'NGN' => array('symbol' => 'NGN'), 'NIO' => array('symbol' => 'C$'), 'NOK' => array('symbol' => 'kr'), 'NPR' => array('symbol' => 'नेरू '), 'NZD' => array('symbol' => 'NZ$'), 'OMR' => array('symbol' => 'ر.ع.‏'), 'PAB' => array('symbol' => 'B/.'), 'PEN' => array('symbol' => 'S/.'), 'PGK' => array('symbol' => 'PGK'), 'PHP' => array('symbol' => '₱'), 'PKR' => array('symbol' => 'PKRs'), 'PLN' => array('symbol' => 'zł'), 'PYG' => array('symbol' => '₲'), 'QAR' => array('symbol' => 'ر.ق.‏'), 'RON' => array('symbol' => 'RON'), 'RSD' => array('symbol' => 'дин.'), 'RUB' => array('symbol' => 'руб.'), 'RWF' => array('symbol' => 'RF'), 'SAR' => array('symbol' => 'ر.س.‏'), 'SBD' => array('symbol' => 'SBD'), 'SCR' => array('symbol' => 'SCR'), 'SDG' => array('symbol' => 'SDG'), 'SEK' => array('symbol' => 'kr'), 'SGD' => array('symbol' => 'SGD'), 'SHP' => array('symbol' => 'SHP'), 'SLL' => array('symbol' => 'SLL'), 'SOS' => array('symbol' => 'SOS'), 'SRD' => array('symbol' => 'SRD'), 'SSP' => array('symbol' => 'SSP'), 'STD' => array('symbol' => 'Db'), 'SYP' => array('symbol' => 'ل.س.‏'), 'SZL' => array('symbol' => 'SZL'), 'THB' => array('symbol' => '฿'), 'TJS' => array('symbol' => 'TJS'), 'TMT' => array('symbol' => 'TMT'), 'TND' => array('symbol' => 'د.ت.‏'), 'TOP' => array('symbol' => 'T$'), 'TRY' => array('symbol' => 'TL'), 'TTD' => array('symbol' => '$'), 'TWD' => array('symbol' => 'NT$'), 'TZS' => array('symbol' => 'TSh'), 'UAH' => array('symbol' => '₴'), 'UGX' => array('symbol' => 'UGX'), 'USD' => array('symbol' => '$'), 'UYU' => array('symbol' => '$'), 'UZS' => array('symbol' => 'UZS'), 'VEF' => array('symbol' => 'Bs.F.'), 'VND' => array('symbol' => '₫'), 'VUV' => array('symbol' => 'VUV'), 'WST' => array('symbol' => 'WST'), 'XAF' => array('symbol' => 'FCFA'), 'XCD' => array('symbol' => 'EC$'), 'XOF' => array('symbol' => 'CFA'), 'XPF' => array('symbol' => 'FCFP'), 'YER' => array('symbol' => 'ر.ي.‏'), 'ZAR' => array('symbol' => 'R'), 'ZMK' => array('symbol' => 'ZMK'), 'ZWL' => array('symbol' => 'ZWL')));

        return $instance;
    }

    /**
     * Gets the 'oro_locale.twig.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\AddressExtension A Oro\Bundle\LocaleBundle\Twig\AddressExtension instance.
     */
    protected function getOroLocale_Twig_AddressService()
    {
        return $this->services['oro_locale.twig.address'] = new \Oro\Bundle\LocaleBundle\Twig\AddressExtension($this->get('oro_locale.formatter.address'));
    }

    /**
     * Gets the 'oro_locale.twig.calendar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\CalendarExtension A Oro\Bundle\LocaleBundle\Twig\CalendarExtension instance.
     */
    protected function getOroLocale_Twig_CalendarService()
    {
        return $this->services['oro_locale.twig.calendar'] = new \Oro\Bundle\LocaleBundle\Twig\CalendarExtension($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.twig.date_format' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\DateFormatExtension A Oro\Bundle\LocaleBundle\Twig\DateFormatExtension instance.
     */
    protected function getOroLocale_Twig_DateFormatService()
    {
        return $this->services['oro_locale.twig.date_format'] = new \Oro\Bundle\LocaleBundle\Twig\DateFormatExtension($this->get('oro_locale.format_converter.date_time.registry'));
    }

    /**
     * Gets the 'oro_locale.twig.date_time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\DateTimeExtension A Oro\Bundle\LocaleBundle\Twig\DateTimeExtension instance.
     */
    protected function getOroLocale_Twig_DateTimeService()
    {
        return $this->services['oro_locale.twig.date_time'] = new \Oro\Bundle\LocaleBundle\Twig\DateTimeExtension($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.twig.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\LocaleExtension A Oro\Bundle\LocaleBundle\Twig\LocaleExtension instance.
     */
    protected function getOroLocale_Twig_LocaleService()
    {
        return $this->services['oro_locale.twig.locale'] = new \Oro\Bundle\LocaleBundle\Twig\LocaleExtension($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.twig.name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\NameExtension A Oro\Bundle\LocaleBundle\Twig\NameExtension instance.
     */
    protected function getOroLocale_Twig_NameService()
    {
        return $this->services['oro_locale.twig.name'] = new \Oro\Bundle\LocaleBundle\Twig\NameExtension($this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.twig.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\LocaleBundle\Twig\NumberExtension A Oro\Bundle\LocaleBundle\Twig\NumberExtension instance.
     */
    protected function getOroLocale_Twig_NumberService()
    {
        return $this->services['oro_locale.twig.number'] = new \Oro\Bundle\LocaleBundle\Twig\NumberExtension($this->get('oro_locale.formatter.number'));
    }

    /**
     * Gets the 'oro_menu.builder_chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider A Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider instance.
     */
    protected function getOroMenu_BuilderChainService()
    {
        $this->services['oro_menu.builder_chain'] = $instance = new \Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider($this->get('oro_menu.factory'), $this->get('event_dispatcher'));

        $instance->addBuilder($this->get('oro_menu.configuration_builder'));
        $instance->addBuilder($this->get('oro_navigation.pinbar_menu.builder'), 'pinbar');
        $instance->addBuilder($this->get('oro_navigation.favorites_menu.builder'), 'favorite');
        $instance->addBuilder($this->get('oro_navigation.history_menu.builder'), 'history');
        $instance->addBuilder($this->get('oro_navigation.mostviewed_menu.builder'), 'mostviewed');
        $instance->addBuilder($this->get('oro_user.user_menu'), 'usermenu');

        return $instance;
    }

    /**
     * Gets the 'oro_menu.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroMenu_CacheService()
    {
        $this->services['oro_menu.cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_menu.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_menu.configuration_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder A Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder instance.
     */
    protected function getOroMenu_ConfigurationBuilderService()
    {
        $this->services['oro_menu.configuration_builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'oro_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance.
     */
    protected function getOroMenu_FactoryService()
    {
        $this->services['oro_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension($this->get('oro_menu_acl_extension'));

        return $instance;
    }

    /**
     * Gets the 'oro_menu.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Twig\MenuExtension A Oro\Bundle\NavigationBundle\Twig\MenuExtension instance.
     */
    protected function getOroMenu_Twig_ExtensionService()
    {
        return $this->services['oro_menu.twig.extension'] = new \Oro\Bundle\NavigationBundle\Twig\MenuExtension($this->get('knp_menu.helper'), $this->get('oro_menu.builder_chain'), $this->get('oro_navigation.breadcrumb_manager'), $this);
    }

    /**
     * Gets the 'oro_menu_acl_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension A Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension instance.
     */
    protected function getOroMenuAclExtensionService()
    {
        $this->services['oro_menu_acl_extension'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension($this->get('router'), $this->get('oro_security.security_facade'));

        $instance->setCache($this->get('oro_menu.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.breadcrumb_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager A Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager instance.
     */
    protected function getOroNavigation_BreadcrumbManagerService()
    {
        return $this->services['oro_navigation.breadcrumb_manager'] = new \Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager($this->get('oro_menu.builder_chain'), $this->get('knp_menu.matcher'), $this->get('router'));
    }

    /**
     * Gets the 'oro_navigation.favorites_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_FavoritesMenu_BuilderService()
    {
        return $this->services['oro_navigation.favorites_menu.builder'] = new \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));
    }

    /**
     * Gets the 'oro_navigation.form.handler.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler A Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_navigation.form.handler.pagestate' service is requested while the 'request' scope is not active
     */
    protected function getOroNavigation_Form_Handler_PagestateService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_navigation.form.handler.pagestate', 'request');
        }

        return $this->services['oro_navigation.form.handler.pagestate'] = $this->scopedServices['request']['oro_navigation.form.handler.pagestate'] = new \Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler($this->get('oro_navigation.form.pagestate'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_navigation.form.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroNavigation_Form_PagestateService()
    {
        return $this->services['oro_navigation.form.pagestate'] = $this->get('form.factory')->createNamed('pagestate', 'pagestate', NULL);
    }

    /**
     * Gets the 'oro_navigation.form.type.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Form\Type\PageStateType A Oro\Bundle\NavigationBundle\Form\Type\PageStateType instance.
     */
    protected function getOroNavigation_Form_Type_PagestateService()
    {
        return $this->services['oro_navigation.form.type.pagestate'] = new \Oro\Bundle\NavigationBundle\Form\Type\PageStateType();
    }

    /**
     * Gets the 'oro_navigation.history_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder instance.
     */
    protected function getOroNavigation_HistoryMenu_BuilderService()
    {
        $this->services['oro_navigation.history_menu.builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));

        $instance->setMatcher($this->get('knp_menu.matcher'));
        $instance->setOptions($this->get('oro_config.user'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.item.builder.favorite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_FavoriteService()
    {
        return $this->services['oro_navigation.item.builder.favorite'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'favorite');
    }

    /**
     * Gets the 'oro_navigation.item.builder.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_HistoryService()
    {
        return $this->services['oro_navigation.item.builder.history'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'history');
    }

    /**
     * Gets the 'oro_navigation.item.builder.mostviewed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_MostviewedService()
    {
        return $this->services['oro_navigation.item.builder.mostviewed'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'mostviewed');
    }

    /**
     * Gets the 'oro_navigation.item.builder.pinbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_PinbarService()
    {
        return $this->services['oro_navigation.item.builder.pinbar'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder($this->get('doctrine.orm.default_entity_manager'), 'pinbar');
    }

    /**
     * Gets the 'oro_navigation.item.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory A Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory instance.
     */
    protected function getOroNavigation_Item_FactoryService()
    {
        $this->services['oro_navigation.item.factory'] = $instance = new \Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory();

        $instance->addBuilder($this->get('oro_navigation.item.builder.pinbar'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.favorite'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.history'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.mostviewed'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.item.pinbar.post_persist_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist A Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist instance.
     */
    protected function getOroNavigation_Item_Pinbar_PostPersistListenerService()
    {
        return $this->services['oro_navigation.item.pinbar.post_persist_listener'] = new \Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist();
    }

    /**
     * Gets the 'oro_navigation.mostviewed_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder instance.
     */
    protected function getOroNavigation_MostviewedMenu_BuilderService()
    {
        $this->services['oro_navigation.mostviewed_menu.builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));

        $instance->setOptions($this->get('oro_config.user'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.pinbar_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_PinbarMenu_BuilderService()
    {
        return $this->services['oro_navigation.pinbar_menu.builder'] = new \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));
    }

    /**
     * Gets the 'oro_navigation.title_annotations_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader A Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader instance.
     */
    protected function getOroNavigation_TitleAnnotationsReaderService()
    {
        return $this->services['oro_navigation.title_annotations_reader'] = new \Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader($this->get('kernel'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'oro_navigation.title_config_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader A Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader instance.
     */
    protected function getOroNavigation_TitleConfigReaderService()
    {
        return $this->services['oro_navigation.title_config_reader'] = new \Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader(array('oro_default' => 'pim_title.dashboard', 'oro_ui_index' => 'Dashboard', 'oro_ui_1column' => 'Dashboard | One Column', 'oro_ui_grid_without_bar_page' => 'Dashboard | Grid', 'oro_ui_grid_page' => 'Dashboard | Grid', 'oro_ui_1column_menu' => 'Dashboard | Menu', 'oro_ui_1column_toolbar' => 'Dashboard | One Column Toolbar', 'oro_ui_2columns_left' => 'Dashboard | Two Columns Toolbar Left', 'oro_ui_2columns_right' => 'Dashboard | Two Columns Toolbar Right', 'oro_ui_3columns' => 'Dashboard | Three Columns', 'oro_ui_forgot_password' => 'Forgot Password', 'oro_ui_login' => 'Login', 'oro_ui_registration' => 'Registration', 'oro_ui_404' => '404 Not Found', 'oro_ui_503' => '503 Error', 'oro_ui_form_elements' => 'Form Elements', 'oro_ui_messages' => 'Dashboard | Messages', 'oro_ui_buttons' => 'Dashboard | Buttons', 'oro_ui_tables' => 'Dashboard | Tables', 'oro_ui_general_elements' => 'Dashboard | Elements', 'oro_ui_dialog_styled' => 'Dashboard | Dialog', 'oro_ui_record_edit' => 'Dashboard | Edit', 'oro_config_configuration_system' => 'pim_title.system_configuration.index', 'oro_email_view' => '%subject% - Email', 'oro_email_emailtemplate_index' => NULL, 'oro_email_emailtemplate_update' => 'Template %name% - Edit', 'oro_email_emailtemplate_create' => 'Create Email Template', 'oro_email_emailtemplate_clone' => 'Clone Email Template', 'oro_entity_index' => '%entityName% - Entities - System', 'oro_entity_view' => '%recordName% - %entityName% - Entities - System', 'oro_entity_update' => '%entityName% - Entities - System', 'oro_entityconfig_index' => NULL, 'oro_entityconfig_view' => '%entityName%', 'oro_entityconfig_update' => '%entityName%', 'oro_entityconfig_field_update' => '%fieldName% - %entityName%', 'oro_entityextend_entity_create' => 'New Entity', 'oro_entityextend_field_create' => 'New Field - %entityName%', 'oro_entityextend_field_update' => '%fieldName% - New Field - %entityName%', 'oro_shortcut_actionslist' => 'Shortcut Actions List', 'oro_pinbar_help' => 'How To Use Pinbar', 'oro_business_unit_index' => NULL, 'oro_business_unit_update' => '%business_unit.name% - Edit', 'oro_business_unit_create' => 'Create Business Unit', 'oro_business_unit_view' => '%business_unit.name%', 'oro_user_view' => '%username%', 'oro_user_update' => '%username% - Edit', 'oro_user_create' => 'Create User', 'oro_user_index' => 'pim_title.user.index', 'oro_user_profile_view' => '%username%', 'oro_user_profile_update' => '%username% - Edit', 'oro_user_role_update' => '%role% - Edit', 'oro_user_role_create' => 'Create Role', 'oro_user_role_index' => 'pim_title.user_role.index', 'oro_user_security_login' => 'Login', 'oro_user_status_list' => 'User Status', 'oro_user_status_create' => 'Add Status', 'oro_user_reset_reset' => 'Password Reset', 'oro_user_reset_request' => 'Forgot Password', 'oro_user_reset_check_email' => 'Password Reset - Check Email', 'oro_user_group_create' => 'Create Group', 'oro_user_group_update' => '%group% - Edit', 'oro_user_group_index' => 'pim_title.user_group.index', 'oro_dataaudit_index' => NULL, 'pim_importexport_export_profile_index' => 'pim_title.export_profile.index', 'pim_importexport_export_profile_edit' => 'pim_title.export_profile.edit', 'pim_importexport_export_profile_show' => 'pim_title.export_profile.show', 'pim_importexport_export_execution_index' => 'pim_title.export_execution.index', 'pim_importexport_export_execution_show' => 'pim_title.export_execution.show', 'pim_importexport_import_profile_index' => 'pim_title.import_profile.index', 'pim_importexport_import_profile_edit' => 'pim_title.import_profile.edit', 'pim_importexport_import_profile_show' => 'pim_title.import_profile.show', 'pim_importexport_import_execution_index' => 'pim_title.import_execution.index', 'pim_importexport_import_execution_show' => 'pim_title.import_execution.show', 'pim_enrich_attributegroup_index' => 'pim_title.attribute_group.index', 'pim_enrich_attributegroup_create' => 'pim_title.attribute_group.create', 'pim_enrich_attributegroup_edit' => 'pim_title.attribute_group.edit', 'pim_enrich_categorytree_index' => 'pim_title.category.index', 'pim_enrich_categorytree_create' => 'pim_title.category.create', 'pim_enrich_categorytree_edit' => 'pim_title.category.edit', 'pim_enrich_attribute_index' => 'pim_title.attribute.index', 'pim_enrich_attribute_create' => 'pim_title.attribute.create', 'pim_enrich_attribute_edit' => 'pim_title.attribute.edit', 'pim_enrich_product_index' => 'pim_title.product.index', 'pim_enrich_product_edit' => 'pim_title.product.edit', 'pim_enrich_family_index' => 'pim_title.family.index', 'pim_enrich_family_edit' => 'pim_title.family.edit', 'pim_enrich_channel_index' => 'pim_title.channel.index', 'pim_enrich_channel_create' => 'pim_title.channel.create', 'pim_enrich_channel_edit' => 'pim_title.channel.edit', 'pim_enrich_currency_index' => 'pim_title.currency.index', 'pim_enrich_locale_index' => 'pim_title.locale.index', 'pim_enrich_group_index' => 'pim_title.group.index', 'pim_enrich_group_edit' => 'pim_title.group.edit', 'pim_enrich_variant_group_index' => 'pim_title.variant_group.index', 'pim_enrich_variant_group_edit' => 'pim_title.variant_group.edit', 'pim_enrich_association_type_index' => 'pim_title.association_type.index', 'pim_enrich_association_type_edit' => 'pim_title.association_type.edit', 'pim_enrich_group_type_index' => 'pim_title.group_type.index', 'pim_enrich_group_type_edit' => 'pim_title.group_type.edit', 'pim_enrich_mass_edit_action_choose' => 'pim_title.mass_edit_action.choose', 'pim_enrich_mass_edit_action_configure' => 'pim_title.mass_edit_action.configure', 'pim_enrich_mass_edit_action_perform' => 'pim_title.mass_edit_action.configure'));
    }

    /**
     * Gets the 'oro_navigation.title_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NavigationBundle\Provider\TitleService A Pim\Bundle\NavigationBundle\Provider\TitleService instance.
     */
    protected function getOroNavigation_TitleServiceService()
    {
        $this->services['oro_navigation.title_service'] = $instance = new \Pim\Bundle\NavigationBundle\Provider\TitleService($this->get('oro_navigation.title_annotations_reader'), $this->get('oro_navigation.title_config_reader'), $this->get('translator.default'), $this->get('doctrine.orm.default_entity_manager'), $this->get('fos_rest.serializer'), $this->get('oro_config.user'), $this->get('oro_navigation.breadcrumb_manager'));

        $instance->setTitles(array('oro_default' => 'pim_title.dashboard', 'oro_ui_index' => 'Dashboard', 'oro_ui_1column' => 'Dashboard | One Column', 'oro_ui_grid_without_bar_page' => 'Dashboard | Grid', 'oro_ui_grid_page' => 'Dashboard | Grid', 'oro_ui_1column_menu' => 'Dashboard | Menu', 'oro_ui_1column_toolbar' => 'Dashboard | One Column Toolbar', 'oro_ui_2columns_left' => 'Dashboard | Two Columns Toolbar Left', 'oro_ui_2columns_right' => 'Dashboard | Two Columns Toolbar Right', 'oro_ui_3columns' => 'Dashboard | Three Columns', 'oro_ui_forgot_password' => 'Forgot Password', 'oro_ui_login' => 'Login', 'oro_ui_registration' => 'Registration', 'oro_ui_404' => '404 Not Found', 'oro_ui_503' => '503 Error', 'oro_ui_form_elements' => 'Form Elements', 'oro_ui_messages' => 'Dashboard | Messages', 'oro_ui_buttons' => 'Dashboard | Buttons', 'oro_ui_tables' => 'Dashboard | Tables', 'oro_ui_general_elements' => 'Dashboard | Elements', 'oro_ui_dialog_styled' => 'Dashboard | Dialog', 'oro_ui_record_edit' => 'Dashboard | Edit', 'oro_config_configuration_system' => 'pim_title.system_configuration.index', 'oro_email_view' => '%subject% - Email', 'oro_email_emailtemplate_index' => NULL, 'oro_email_emailtemplate_update' => 'Template %name% - Edit', 'oro_email_emailtemplate_create' => 'Create Email Template', 'oro_email_emailtemplate_clone' => 'Clone Email Template', 'oro_entity_index' => '%entityName% - Entities - System', 'oro_entity_view' => '%recordName% - %entityName% - Entities - System', 'oro_entity_update' => '%entityName% - Entities - System', 'oro_entityconfig_index' => NULL, 'oro_entityconfig_view' => '%entityName%', 'oro_entityconfig_update' => '%entityName%', 'oro_entityconfig_field_update' => '%fieldName% - %entityName%', 'oro_entityextend_entity_create' => 'New Entity', 'oro_entityextend_field_create' => 'New Field - %entityName%', 'oro_entityextend_field_update' => '%fieldName% - New Field - %entityName%', 'oro_shortcut_actionslist' => 'Shortcut Actions List', 'oro_pinbar_help' => 'How To Use Pinbar', 'oro_business_unit_index' => NULL, 'oro_business_unit_update' => '%business_unit.name% - Edit', 'oro_business_unit_create' => 'Create Business Unit', 'oro_business_unit_view' => '%business_unit.name%', 'oro_user_view' => '%username%', 'oro_user_update' => '%username% - Edit', 'oro_user_create' => 'Create User', 'oro_user_index' => 'pim_title.user.index', 'oro_user_profile_view' => '%username%', 'oro_user_profile_update' => '%username% - Edit', 'oro_user_role_update' => '%role% - Edit', 'oro_user_role_create' => 'Create Role', 'oro_user_role_index' => 'pim_title.user_role.index', 'oro_user_security_login' => 'Login', 'oro_user_status_list' => 'User Status', 'oro_user_status_create' => 'Add Status', 'oro_user_reset_reset' => 'Password Reset', 'oro_user_reset_request' => 'Forgot Password', 'oro_user_reset_check_email' => 'Password Reset - Check Email', 'oro_user_group_create' => 'Create Group', 'oro_user_group_update' => '%group% - Edit', 'oro_user_group_index' => 'pim_title.user_group.index', 'oro_dataaudit_index' => NULL, 'pim_importexport_export_profile_index' => 'pim_title.export_profile.index', 'pim_importexport_export_profile_edit' => 'pim_title.export_profile.edit', 'pim_importexport_export_profile_show' => 'pim_title.export_profile.show', 'pim_importexport_export_execution_index' => 'pim_title.export_execution.index', 'pim_importexport_export_execution_show' => 'pim_title.export_execution.show', 'pim_importexport_import_profile_index' => 'pim_title.import_profile.index', 'pim_importexport_import_profile_edit' => 'pim_title.import_profile.edit', 'pim_importexport_import_profile_show' => 'pim_title.import_profile.show', 'pim_importexport_import_execution_index' => 'pim_title.import_execution.index', 'pim_importexport_import_execution_show' => 'pim_title.import_execution.show', 'pim_enrich_attributegroup_index' => 'pim_title.attribute_group.index', 'pim_enrich_attributegroup_create' => 'pim_title.attribute_group.create', 'pim_enrich_attributegroup_edit' => 'pim_title.attribute_group.edit', 'pim_enrich_categorytree_index' => 'pim_title.category.index', 'pim_enrich_categorytree_create' => 'pim_title.category.create', 'pim_enrich_categorytree_edit' => 'pim_title.category.edit', 'pim_enrich_attribute_index' => 'pim_title.attribute.index', 'pim_enrich_attribute_create' => 'pim_title.attribute.create', 'pim_enrich_attribute_edit' => 'pim_title.attribute.edit', 'pim_enrich_product_index' => 'pim_title.product.index', 'pim_enrich_product_edit' => 'pim_title.product.edit', 'pim_enrich_family_index' => 'pim_title.family.index', 'pim_enrich_family_edit' => 'pim_title.family.edit', 'pim_enrich_channel_index' => 'pim_title.channel.index', 'pim_enrich_channel_create' => 'pim_title.channel.create', 'pim_enrich_channel_edit' => 'pim_title.channel.edit', 'pim_enrich_currency_index' => 'pim_title.currency.index', 'pim_enrich_locale_index' => 'pim_title.locale.index', 'pim_enrich_group_index' => 'pim_title.group.index', 'pim_enrich_group_edit' => 'pim_title.group.edit', 'pim_enrich_variant_group_index' => 'pim_title.variant_group.index', 'pim_enrich_variant_group_edit' => 'pim_title.variant_group.edit', 'pim_enrich_association_type_index' => 'pim_title.association_type.index', 'pim_enrich_association_type_edit' => 'pim_title.association_type.edit', 'pim_enrich_group_type_index' => 'pim_title.group_type.index', 'pim_enrich_group_type_edit' => 'pim_title.group_type.edit', 'pim_enrich_mass_edit_action_choose' => 'pim_title.mass_edit_action.choose', 'pim_enrich_mass_edit_action_configure' => 'pim_title.mass_edit_action.configure', 'pim_enrich_mass_edit_action_perform' => 'pim_title.mass_edit_action.configure'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.title_service.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Twig\TitleExtension A Oro\Bundle\NavigationBundle\Twig\TitleExtension instance.
     */
    protected function getOroNavigation_TitleService_Twig_ExtensionService()
    {
        return $this->services['oro_navigation.title_service.twig.extension'] = new \Oro\Bundle\NavigationBundle\Twig\TitleExtension($this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'oro_navigation.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Title\TranslationExtractor A Oro\Bundle\NavigationBundle\Title\TranslationExtractor instance.
     */
    protected function getOroNavigation_Translation_ExtractorService()
    {
        return $this->services['oro_navigation.translation.extractor'] = new \Oro\Bundle\NavigationBundle\Title\TranslationExtractor($this->get('oro_navigation.title_service'), $this->get('router'));
    }

    /**
     * Gets the 'oro_navigation.twig.hash_nav_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\NavigationBundle\Twig\HashNavExtension A Oro\Bundle\NavigationBundle\Twig\HashNavExtension instance.
     */
    protected function getOroNavigation_Twig_HashNavExtensionService()
    {
        return $this->services['oro_navigation.twig.hash_nav_extension'] = new \Oro\Bundle\NavigationBundle\Twig\HashNavExtension();
    }

    /**
     * Gets the 'oro_organization.business_unit.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener A Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener instance.
     */
    protected function getOroOrganization_BusinessUnit_ListenerService()
    {
        return $this->services['oro_organization.business_unit.listener'] = new \Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener();
    }

    /**
     * Gets the 'oro_organization.business_unit.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroOrganization_BusinessUnit_Manager_ApiService()
    {
        return $this->services['oro_organization.business_unit.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.business_unit_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager A Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager instance.
     */
    protected function getOroOrganization_BusinessUnitManagerService()
    {
        return $this->services['oro_organization.business_unit_manager'] = new \Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.entity_ownership.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener A Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener instance.
     */
    protected function getOroOrganization_EntityOwnership_ListenerService()
    {
        return $this->services['oro_organization.entity_ownership.listener'] = new \Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener($this, $this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_organization.event_listener.bu_update_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroOrganization_EventListener_BuUpdateGridListenerService()
    {
        return $this->services['oro_organization.event_listener.bu_update_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('business_unit_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_organization.event_listener.bu_view_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroOrganization_EventListener_BuViewGridListenerService()
    {
        return $this->services['oro_organization.event_listener.bu_view_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('business_unit_id', $this->get('oro_datagrid.datagrid.request_params'), false);
    }

    /**
     * Gets the 'oro_organization.form.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroOrganization_Form_BusinessUnitService()
    {
        return $this->services['oro_organization.form.business_unit'] = $this->get('form.factory')->createNamed('oro_business_unit_form', 'oro_business_unit');
    }

    /**
     * Gets the 'oro_organization.form.business_unit.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroOrganization_Form_BusinessUnit_ApiService()
    {
        return $this->services['oro_organization.form.business_unit.api'] = $this->get('form.factory')->createNamed('business_unit', 'business_unit', NULL);
    }

    /**
     * Gets the 'oro_organization.form.extension.owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension A Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension instance.
     */
    protected function getOroOrganization_Form_Extension_OwnerService()
    {
        return $this->services['oro_organization.form.extension.owner'] = new \Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension($this->get('security.context'), $this->get('doctrine'), $this->get('oro_security.owner.ownership_metadata_provider'), $this->get('oro_organization.business_unit_manager'), $this->get('oro_security.security_facade'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_organization.form.handler.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler A Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_organization.form.handler.api' service is requested while the 'request' scope is not active
     */
    protected function getOroOrganization_Form_Handler_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_organization.form.handler.api', 'request');
        }

        return $this->services['oro_organization.form.handler.api'] = $this->scopedServices['request']['oro_organization.form.handler.api'] = new \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler($this->get('oro_organization.form.business_unit.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.form.handler.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler A Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_organization.form.handler.business_unit' service is requested while the 'request' scope is not active
     */
    protected function getOroOrganization_Form_Handler_BusinessUnitService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_organization.form.handler.business_unit', 'request');
        }

        return $this->services['oro_organization.form.handler.business_unit'] = $this->scopedServices['request']['oro_organization.form.handler.business_unit'] = new \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler($this->get('oro_organization.form.business_unit'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.form.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Event\FormListener A Oro\Bundle\OrganizationBundle\Event\FormListener instance.
     */
    protected function getOroOrganization_Form_ListenerService()
    {
        return $this->services['oro_organization.form.listener'] = new \Oro\Bundle\OrganizationBundle\Event\FormListener();
    }

    /**
     * Gets the 'oro_organization.form.transformer.business_unit_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer A Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer instance.
     */
    protected function getOroOrganization_Form_Transformer_BusinessUnitSelectService()
    {
        return $this->services['oro_organization.form.transformer.business_unit_select'] = new \Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer($this->get('oro_organization.business_unit_manager'));
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitService()
    {
        return $this->services['oro_organization.form.type.business_unit'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnit_ApiService()
    {
        return $this->services['oro_organization.form.type.business_unit.api'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitSelectService()
    {
        return $this->services['oro_organization.form.type.business_unit_select'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit_tree_select_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitTreeSelectTypeService()
    {
        return $this->services['oro_organization.form.type.business_unit_tree_select_type'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType($this->get('oro_organization.form.transformer.business_unit_select'));
    }

    /**
     * Gets the 'oro_organization.form.type.ownership_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType A Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType instance.
     */
    protected function getOroOrganization_Form_Type_OwnershipTypeService()
    {
        return $this->services['oro_organization.form.type.ownership_type'] = new \Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_organization.method.get_ownership_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod instance.
     */
    protected function getOroOrganization_Method_GetOwnershipTypeService()
    {
        $this->services['oro_organization.method.get_ownership_type'] = $instance = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod();

        $instance->setMethod('getOwnershipsArray');
        $instance->setService($this->get('oro_organization.form.type.ownership_type'));

        return $instance;
    }

    /**
     * Gets the 'oro_organization.provider.business_units_grid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService A Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService instance.
     */
    protected function getOroOrganization_Provider_BusinessUnitsGridService()
    {
        return $this->services['oro_organization.provider.business_units_grid'] = new \Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.twig.business_units' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension A Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension instance.
     */
    protected function getOroOrganization_Twig_BusinessUnitsService()
    {
        return $this->services['oro_organization.twig.business_units'] = new \Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension($this->get('oro_organization.business_unit_manager'));
    }

    /**
     * Gets the 'oro_organization.twig.get_owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension A Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension instance.
     */
    protected function getOroOrganization_Twig_GetOwnerService()
    {
        return $this->services['oro_organization.twig.get_owner'] = new \Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension($this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_platform.maintenance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\PlatformBundle\Maintenance\Mode A Oro\Bundle\PlatformBundle\Maintenance\Mode instance.
     */
    protected function getOroPlatform_MaintenanceService()
    {
        return $this->services['oro_platform.maintenance'] = new \Oro\Bundle\PlatformBundle\Maintenance\Mode($this->get('lexik_maintenance.driver.factory'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'oro_requirejs.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroRequirejs_CacheService()
    {
        $this->services['oro_requirejs.cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_requirejs.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_requirejs.twig.requirejs_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension A Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension instance.
     */
    protected function getOroRequirejs_Twig_RequirejsExtensionService()
    {
        return $this->services['oro_requirejs.twig.requirejs_extension'] = new \Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension($this);
    }

    /**
     * Gets the 'oro_requirejs_config_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\RequireJSBundle\Provider\Config A Oro\Bundle\RequireJSBundle\Provider\Config instance.
     */
    protected function getOroRequirejsConfigProviderService()
    {
        $this->services['oro_requirejs_config_provider'] = $instance = new \Oro\Bundle\RequireJSBundle\Provider\Config($this, $this->get('templating'), 'OroRequireJSBundle::require_config.js.twig');

        $instance->setCache($this->get('oro_requirejs.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.annotation_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider A Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider instance.
     */
    protected function getOroSecurity_Acl_AnnotationProviderService()
    {
        $this->services['oro_security.acl.annotation_provider'] = $instance = new \Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider(new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/oro_acl_annotations')));

        $instance->addLoader(new \Oro\Bundle\SecurityBundle\Annotation\Loader\AclAnnotationLoader(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle', 'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle', 'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle', 'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle', 'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle', 'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle', 'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle', 'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle', 'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle', 'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle', 'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle', 'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle', 'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle', 'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle', 'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'), array(0 => 'Controller'), $this->get('annotation_reader')));
        $instance->addLoader(new \Oro\Bundle\SecurityBundle\Annotation\Loader\AclYamlConfigLoader(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle', 'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle', 'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle', 'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle', 'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle', 'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle', 'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle', 'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle', 'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle', 'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle', 'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle', 'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle', 'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle', 'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle', 'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle')));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.manager' service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager A Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager instance.
     */
    protected function getOroSecurity_Acl_ManagerService()
    {
        return new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager($this->get('oro_security.acl.object_identity_factory'), $this->get('oro_security.acl.extension_selector'), $this->get('security.acl.provider', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('oro_security.acl.ace_provider'), 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclPrivilegeRepository');
    }

    /**
     * Gets the 'oro_security.acl.object_identity_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory A Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory instance.
     */
    protected function getOroSecurity_Acl_ObjectIdentityFactoryService()
    {
        return $this->services['oro_security.acl.object_identity_factory'] = new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory($this->get('oro_security.acl.extension_selector'));
    }

    /**
     * Gets the 'oro_security.acl.sid_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager A Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager instance.
     */
    protected function getOroSecurity_Acl_SidManagerService()
    {
        return $this->services['oro_security.acl.sid_manager'] = new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager($this->get('security.acl.provider', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'oro_security.acl.voter_link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Acl_VoterLinkService()
    {
        return $this->services['oro_security.acl.voter_link'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'security.acl.voter.basic_permissions', true);
    }

    /**
     * Gets the 'oro_security.acl_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper A Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper instance.
     */
    protected function getOroSecurity_AclHelperService()
    {
        return $this->services['oro_security.acl_helper'] = new \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper(new \Oro\Bundle\SecurityBundle\ORM\Walker\OwnershipConditionDataBuilder($this->get('oro_entity_config.link.security_context'), $this->get('oro_security.acl.object_id_accessor'), $this->get('oro_security.entity_security_metadata_provider'), $this->get('oro_security.owner.ownership_metadata_provider'), $this->get('oro_security.ownership_tree_provider'), $this->get('security.acl.voter.basic_permissions', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'oro_security.encoder.mcrypt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Encoder\Mcrypt A Oro\Bundle\SecurityBundle\Encoder\Mcrypt instance.
     */
    protected function getOroSecurity_Encoder_McryptService()
    {
        return $this->services['oro_security.encoder.mcrypt'] = new \Oro\Bundle\SecurityBundle\Encoder\Mcrypt('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'oro_security.entity_security_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber A Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber instance.
     */
    protected function getOroSecurity_EntitySecurityConfigSubscriberService()
    {
        return $this->services['oro_security.entity_security_config_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber($this->get('oro_security.entity_security_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.form.type.object_label_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType A Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType instance.
     */
    protected function getOroSecurity_Form_Type_ObjectLabelTypeService()
    {
        return $this->services['oro_security.form.type.object_label_type'] = new \Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType();
    }

    /**
     * Gets the 'oro_security.form.type.oro_acl_access_level_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType A Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType instance.
     */
    protected function getOroSecurity_Form_Type_OroAclAccessLevelSelectorService()
    {
        return $this->services['oro_security.form.type.oro_acl_access_level_selector'] = new \Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType();
    }

    /**
     * Gets the 'oro_security.link.ownership_tree_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Link_OwnershipTreeProviderService()
    {
        return $this->services['oro_security.link.ownership_tree_provider'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_security.ownership_tree_provider', false);
    }

    /**
     * Gets the 'oro_security.link.sid_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Link_SidManagerService()
    {
        return $this->services['oro_security.link.sid_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_security.acl.sid_manager', false);
    }

    /**
     * Gets the 'oro_security.listener.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\EventListener\ConfigSubscriber A Oro\Bundle\SecurityBundle\EventListener\ConfigSubscriber instance.
     */
    protected function getOroSecurity_Listener_ConfigSubscriberService()
    {
        return $this->services['oro_security.listener.config_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\ConfigSubscriber();
    }

    /**
     * Gets the 'oro_security.listener.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\EventListener\ControllerListener A Oro\Bundle\SecurityBundle\EventListener\ControllerListener instance.
     */
    protected function getOroSecurity_Listener_ControllerService()
    {
        return $this->services['oro_security.listener.controller'] = new \Oro\Bundle\SecurityBundle\EventListener\ControllerListener($this->get('oro_security.security_facade'), $this->get('monolog.logger.security'));
    }

    /**
     * Gets the 'oro_security.owner.entity_owner_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor A Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor instance.
     */
    protected function getOroSecurity_Owner_EntityOwnerAccessorService()
    {
        return $this->services['oro_security.owner.entity_owner_accessor'] = new \Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor($this->get('oro_entity.orm.entity_class_accessor'), $this->get('oro_security.owner.ownership_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.owner.ownership_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber A Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber instance.
     */
    protected function getOroSecurity_Owner_OwnershipConfigSubscriberService()
    {
        return $this->services['oro_security.owner.ownership_config_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber($this->get('oro_security.owner.ownership_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.owner.ownership_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider A Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider instance.
     */
    protected function getOroSecurity_Owner_OwnershipMetadataProviderService()
    {
        return $this->services['oro_security.owner.ownership_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider(array('organization' => 'OroOrganizationBundle:Organization', 'business_unit' => 'OroOrganizationBundle:BusinessUnit', 'user' => 'OroUserBundle:User'), $this->get('oro_entity_config.provider.ownership'), $this->get('oro_entity.orm.entity_class_resolver'), new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/oro_ownership_metadata')));
    }

    /**
     * Gets the 'oro_security.ownership_tree_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider A Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider instance.
     */
    protected function getOroSecurity_OwnershipTreeProviderService()
    {
        return $this->services['oro_security.ownership_tree_provider'] = new \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider($this->get('doctrine.orm.default_entity_manager'), new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/oro_acl_owner_tree')));
    }

    /**
     * Gets the 'oro_security.ownership_tree_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener A Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener instance.
     */
    protected function getOroSecurity_OwnershipTreeSubscriberService()
    {
        return $this->services['oro_security.ownership_tree_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener($this->get('oro_security.link.ownership_tree_provider'));
    }

    /**
     * Gets the 'oro_security.security_facade' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\SecurityFacade A Oro\Bundle\SecurityBundle\SecurityFacade instance.
     */
    protected function getOroSecurity_SecurityFacadeService()
    {
        return $this->services['oro_security.security_facade'] = new \Oro\Bundle\SecurityBundle\SecurityFacade($this->get('security.context'), $this->get('oro_security.acl.annotation_provider'), $this->get('oro_security.acl.object_identity_factory'), $this->get('monolog.logger.security'));
    }

    /**
     * Gets the 'oro_security.twig.security_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension A Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension instance.
     */
    protected function getOroSecurity_Twig_SecurityExtensionService()
    {
        return $this->services['oro_security.twig.security_extension'] = new \Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension($this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_translation.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\TranslationBundle\Controller\Controller A Oro\Bundle\TranslationBundle\Controller\Controller instance.
     */
    protected function getOroTranslation_ControllerService()
    {
        return $this->services['oro_translation.controller'] = new \Oro\Bundle\TranslationBundle\Controller\Controller($this->get('translator.default'), $this->get('templating'), 'OroTranslationBundle:Translation:translation.js.twig', array('domains' => array(0 => 'jsmessages', 1 => 'validators', 2 => 'measures'), 'debug' => true));
    }

    /**
     * Gets the 'oro_translation.extractor.php_code_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor A Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor instance.
     */
    protected function getOroTranslation_Extractor_PhpCodeExtractorService()
    {
        return $this->services['oro_translation.extractor.php_code_extractor'] = new \Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor($this);
    }

    /**
     * Gets the 'oro_translation.form.type.jqueryselect2_translatable_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getOroTranslation_Form_Type_Jqueryselect2TranslatableEntityService()
    {
        return $this->services['oro_translation.form.type.jqueryselect2_translatable_entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('translatable_entity');
    }

    /**
     * Gets the 'oro_translation.form.type.translatable_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType A Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType instance.
     */
    protected function getOroTranslation_Form_Type_TranslatableEntityService()
    {
        return $this->services['oro_translation.form.type.translatable_entity'] = new \Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_ui.format_converter.date_time.jquery_ui' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter A Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter instance.
     */
    protected function getOroUi_FormatConverter_DateTime_JqueryUiService()
    {
        return $this->services['oro_ui.format_converter.date_time.jquery_ui'] = new \Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_ui.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Route\Router A Oro\Bundle\UIBundle\Route\Router instance.
     * 
     * @throws InactiveScopeException when the 'oro_ui.router' service is requested while the 'request' scope is not active
     */
    protected function getOroUi_RouterService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_ui.router', 'request');
        }

        return $this->services['oro_ui.router'] = $this->scopedServices['request']['oro_ui.router'] = new \Oro\Bundle\UIBundle\Route\Router($this->get('request'), $this->get('router'));
    }

    /**
     * Gets the 'oro_ui.twig.ceil_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\CeilExtension A Oro\Bundle\UIBundle\Twig\CeilExtension instance.
     */
    protected function getOroUi_Twig_CeilExtensionService()
    {
        return $this->services['oro_ui.twig.ceil_extension'] = new \Oro\Bundle\UIBundle\Twig\CeilExtension();
    }

    /**
     * Gets the 'oro_ui.twig.date_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\DateExtension A Oro\Bundle\UIBundle\Twig\DateExtension instance.
     */
    protected function getOroUi_Twig_DateExtensionService()
    {
        return $this->services['oro_ui.twig.date_extension'] = new \Oro\Bundle\UIBundle\Twig\DateExtension($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_ui.twig.form_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\FormExtension A Oro\Bundle\UIBundle\Twig\FormExtension instance.
     */
    protected function getOroUi_Twig_FormExtensionService()
    {
        return $this->services['oro_ui.twig.form_extension'] = new \Oro\Bundle\UIBundle\Twig\FormExtension($this->get('event_dispatcher'));
    }

    /**
     * Gets the 'oro_ui.twig.md5_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\Md5Extension A Oro\Bundle\UIBundle\Twig\Md5Extension instance.
     */
    protected function getOroUi_Twig_Md5ExtensionService()
    {
        return $this->services['oro_ui.twig.md5_extension'] = new \Oro\Bundle\UIBundle\Twig\Md5Extension($this->get('fos_rest.serializer'));
    }

    /**
     * Gets the 'oro_ui.twig.skype_button_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\SkypeButtonExtension A Oro\Bundle\UIBundle\Twig\SkypeButtonExtension instance.
     */
    protected function getOroUi_Twig_SkypeButtonExtensionService()
    {
        return $this->services['oro_ui.twig.skype_button_extension'] = new \Oro\Bundle\UIBundle\Twig\SkypeButtonExtension();
    }

    /**
     * Gets the 'oro_ui.twig.ui_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\UiExtension A Oro\Bundle\UIBundle\Twig\UiExtension instance.
     */
    protected function getOroUi_Twig_UiExtensionService()
    {
        return $this->services['oro_ui.twig.ui_extension'] = new \Oro\Bundle\UIBundle\Twig\UiExtension(array('header_logo' => array('label' => 'Header Logo', 'items' => array(0 => array('order' => 100, 'template' => 'OroUIBundle:Default:logo.html.twig', 'name' => 'logo'))), 'user_menu' => array('label' => 'Profile menu', 'items' => array(0 => array('order' => 50, 'template' => 'PimNotificationBundle:Default:notifications.html.twig', 'name' => 'notifications'), 1 => array('order' => 100, 'template' => 'OroUserBundle:Menu:menuProfile.html.twig', 'name' => 'menu_user'), 2 => array('order' => 200, 'template' => 'OroUIBundle:Default:help.html.twig', 'name' => 'help'))), 'form_buttons' => array('label' => 'Profile menu', 'items' => array(0 => array('order' => 100, 'template' => 'OroUIBundle:Form:buttons.html.twig', 'name' => 'add_update_delete'))), 'head_style' => array('label' => 'Head styles', 'items' => array(0 => array('order' => 100, 'template' => 'OroAsseticBundle:Assets:oro_css.html.twig', 'name' => 'assets_css'))), 'head_script' => array('label' => 'Head scripts'), 'requirejs_config_extend' => array('items' => array(0 => array('order' => 10, 'template' => 'OroUIBundle::requirejs.config.js.twig', 'name' => 'ui_requirejs_config'), 1 => array('order' => 100, 'template' => 'OroTranslationBundle::requirejs.config.js.twig', 'name' => 'translation_requirejs_config'), 2 => array('order' => 100, 'template' => 'OroNavigationBundle:Js:requirejs.config.js.twig', 'name' => 'routing_requirejs_config'), 3 => array('order' => 110, 'template' => 'PimUIBundle::pim.requirejs.config.js.twig', 'name' => 'require_js_config')), 'lable' => 'RequireJS Configuration Run Time Extend'), 'scripts_after' => array('items' => array(0 => array('order' => 200, 'template' => 'OroWindowsBundle:Include:javascript.html.twig', 'name' => 'window_bundle_js'), 1 => array('order' => 500, 'template' => 'OroLocaleBundle::locale_settings.html.twig', 'name' => 'locale_settings')), 'label' => 'Scripts After'), 'scripts_before' => array('label' => 'Scripts Before', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:Js:dot.menu.js.twig', 'name' => 'dot_menu_js'), 1 => array('order' => 200, 'template' => 'OroNavigationBundle:Js:pinbar.js.twig', 'name' => 'pinbar_js'))), 'hash_nav' => array('label' => 'Hash Navigation', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:HashNav:script.js.twig', 'name' => 'hashNavigation'))), 'navbar' => array('label' => 'Navigation Bar', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:Shortcut:shortcuts.html.twig', 'name' => 'shortcuts'))), 'application_menu' => array('label' => 'Application Menu', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:applicationMenu.html.twig', 'name' => 'application_menu'))), 'before_navigation' => array('label' => 'Top Navigation Before', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:dotsMenu.html.twig', 'name' => 'dots_menu'))), 'after_navigation' => array('label' => 'Top Navigation After'), 'pin_button' => array('label' => 'Pinbar buttons', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:pinButton.html.twig', 'name' => 'pin_button'))), 'breadcrumb' => array('label' => 'Breadcrumbs', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:breabcrumbs.html.twig', 'name' => 'breadcrumbs'))), 'change_history_block' => array('label' => 'Change history block', 'items' => array(0 => array('template' => 'OroDataAuditBundle::change_history_link.html.twig', 'name' => 'change_history_link')))), 'block-wrap');
    }

    /**
     * Gets the 'oro_ui.twig.widget_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\Twig\WidgetExtension A Oro\Bundle\UIBundle\Twig\WidgetExtension instance.
     */
    protected function getOroUi_Twig_WidgetExtensionService()
    {
        return $this->services['oro_ui.twig.widget_extension'] = new \Oro\Bundle\UIBundle\Twig\WidgetExtension();
    }

    /**
     * Gets the 'oro_ui.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UIBundle\EventListener\TemplateListener A Oro\Bundle\UIBundle\EventListener\TemplateListener instance.
     */
    protected function getOroUi_View_ListenerService()
    {
        return $this->services['oro_ui.view.listener'] = new \Oro\Bundle\UIBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'oro_user.autocomplete.user.search_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler A Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler instance.
     */
    protected function getOroUser_Autocomplete_User_SearchHandlerService()
    {
        $this->services['oro_user.autocomplete.user.search_handler'] = $instance = new \Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler($this->get('liip_imagine.cache.manager'), 'Oro\\Bundle\\UserBundle\\Entity\\User', array(0 => 'username', 1 => 'namePrefix', 2 => 'firstName', 3 => 'middleName', 4 => 'lastName', 5 => 'nameSuffix', 6 => 'email'));

        $instance->initDoctrinePropertiesByManagerRegistry($this->get('doctrine'));
        $instance->setNameFormatter($this->get('oro_locale.formatter.name'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\PhpFileCache A Doctrine\Common\Cache\PhpFileCache instance.
     */
    protected function getOroUser_CacheService()
    {
        $this->services['oro_user.cache'] = $instance = new \Doctrine\Common\Cache\PhpFileCache(__DIR__);

        $instance->setNamespace('oro_user.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_user.change_password.subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber A Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber instance.
     */
    protected function getOroUser_ChangePassword_SubscriberService()
    {
        return $this->services['oro_user.change_password.subscriber'] = new \Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber($this->get('form.factory'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_user.email.owner.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider A Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider instance.
     */
    protected function getOroUser_Email_Owner_ProviderService()
    {
        return $this->services['oro_user.email.owner.provider'] = new \Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider();
    }

    /**
     * Gets the 'oro_user.entity_with_image.subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber A Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber instance.
     */
    protected function getOroUser_EntityWithImage_SubscriberService()
    {
        return $this->services['oro_user.entity_with_image.subscriber'] = new \Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber(dirname(dirname(__DIR__)));
    }

    /**
     * Gets the 'oro_user.event_listener.group_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroUser_EventListener_GroupUsersGridListenerService()
    {
        return $this->services['oro_user.event_listener.group_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('group_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_user.event_listener.role_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroUser_EventListener_RoleUsersGridListenerService()
    {
        return $this->services['oro_user.event_listener.role_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('role_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_user.event_listener.user_email_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\EventListener\UserEmailGridListener A Oro\Bundle\UserBundle\EventListener\UserEmailGridListener instance.
     */
    protected function getOroUser_EventListener_UserEmailGridListenerService()
    {
        $a = $this->get('doctrine.orm.default_entity_manager');
        $b = $this->get('oro_email.email.address.manager');

        $this->services['oro_user.event_listener.user_email_grid_listener'] = $instance = new \Oro\Bundle\UserBundle\EventListener\UserEmailGridListener($a, $this->get('oro_email.datagrid_query_factory'), $this->get('oro_datagrid.datagrid.request_params'));

        $instance->setEmailSync(new \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer($a, new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($b, $this->get('oro_email.email.owner.provider')), $b), $b, $this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt')));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_GroupService()
    {
        return $this->services['oro_user.form.group'] = $this->get('form.factory')->createNamed('oro_user_group_form', 'oro_user_group');
    }

    /**
     * Gets the 'oro_user.form.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_Group_ApiService()
    {
        return $this->services['oro_user.form.group.api'] = $this->get('form.factory')->createNamed('group', 'group', NULL);
    }

    /**
     * Gets the 'oro_user.form.handler.acl_role' service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Handler\AclRoleHandler A Pim\Bundle\UserBundle\Form\Handler\AclRoleHandler instance.
     */
    protected function getOroUser_Form_Handler_AclRoleService()
    {
        $instance = new \Pim\Bundle\UserBundle\Form\Handler\AclRoleHandler($this->get('form.factory'), array('action' => array('label' => 'rights.action', 'view_type' => 'groups', 'types' => array(0 => 'action', 1 => 'entity'), 'field_type' => 'pim_acl_access_level_selector', 'fix_values' => false, 'default_value' => 5, 'show_default' => true)));

        $instance->setAclManager(new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager($this->get('oro_security.acl.object_identity_factory'), $this->get('oro_security.acl.extension_selector'), $this->get('security.acl.provider', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('oro_security.acl.ace_provider'), 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclPrivilegeRepository'));
        $instance->setEntityManager($this->get('doctrine.orm.default_entity_manager'));
        $instance->setRequest($this->get('request'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.handler.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Handler\GroupHandler A Oro\Bundle\UserBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.group' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_GroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.group', 'request');
        }

        return $this->services['oro_user.form.handler.group'] = $this->scopedServices['request']['oro_user.form.handler.group'] = new \Oro\Bundle\UserBundle\Form\Handler\GroupHandler($this->get('oro_user.form.group'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Handler\GroupHandler A Oro\Bundle\UserBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.group.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_Group_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.group.api', 'request');
        }

        return $this->services['oro_user.form.handler.group.api'] = $this->scopedServices['request']['oro_user.form.handler.group.api'] = new \Oro\Bundle\UserBundle\Form\Handler\GroupHandler($this->get('oro_user.form.group.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Handler\ResetHandler A Pim\Bundle\UserBundle\Form\Handler\ResetHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.reset' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_ResetService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.reset', 'request');
        }

        return $this->services['oro_user.form.handler.reset'] = $this->scopedServices['request']['oro_user.form.handler.reset'] = new \Pim\Bundle\UserBundle\Form\Handler\ResetHandler($this->get('oro_user.form.reset'), $this->get('request'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Handler\RoleHandler A Oro\Bundle\UserBundle\Form\Handler\RoleHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.role.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_Role_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.role.api', 'request');
        }

        return $this->services['oro_user.form.handler.role.api'] = $this->scopedServices['request']['oro_user.form.handler.role.api'] = new \Oro\Bundle\UserBundle\Form\Handler\RoleHandler($this->get('oro_user.form.role.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Handler\StatusHandler A Oro\Bundle\UserBundle\Form\Handler\StatusHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.status' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_StatusService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.status', 'request');
        }

        return $this->services['oro_user.form.handler.status'] = $this->scopedServices['request']['oro_user.form.handler.status'] = new \Oro\Bundle\UserBundle\Form\Handler\StatusHandler($this->get('oro_user.form.status'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Handler\UserHandler A Pim\Bundle\UserBundle\Form\Handler\UserHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.user' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_UserService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.user', 'request');
        }

        $this->services['oro_user.form.handler.user'] = $this->scopedServices['request']['oro_user.form.handler.user'] = $instance = new \Pim\Bundle\UserBundle\Form\Handler\UserHandler($this->get('oro_user.form.user'), $this->get('request'), $this->get('oro_user.manager'));

        $instance->setBusinessUnitManager($this->get('oro_organization.business_unit_manager'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.handler.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Handler\UserHandler A Pim\Bundle\UserBundle\Form\Handler\UserHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.user.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_User_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.user.api', 'request');
        }

        return $this->services['oro_user.form.handler.user.api'] = $this->scopedServices['request']['oro_user.form.handler.user.api'] = new \Pim\Bundle\UserBundle\Form\Handler\UserHandler($this->get('oro_user.form.user.api'), $this->get('request'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.form.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_ResetService()
    {
        return $this->services['oro_user.form.reset'] = $this->get('form.factory')->createNamed('oro_user_reset_form', 'oro_user_reset', NULL, array('validation_groups' => array(0 => 'ResetPassword', 1 => 'Default')));
    }

    /**
     * Gets the 'oro_user.form.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_RoleService()
    {
        return $this->services['oro_user.form.role'] = $this->get('form.factory')->createNamed('oro_user_role_form', 'oro_user_role');
    }

    /**
     * Gets the 'oro_user.form.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_Role_ApiService()
    {
        return $this->services['oro_user.form.role.api'] = $this->get('form.factory')->createNamed('role', 'role', NULL);
    }

    /**
     * Gets the 'oro_user.form.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_StatusService()
    {
        return $this->services['oro_user.form.status'] = $this->get('form.factory')->createNamed('oro_user_status_form', 'oro_user_status', NULL);
    }

    /**
     * Gets the 'oro_user.form.type.change_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\ChangePasswordType A Oro\Bundle\UserBundle\Form\Type\ChangePasswordType instance.
     */
    protected function getOroUser_Form_Type_ChangePasswordService()
    {
        return $this->services['oro_user.form.type.change_password'] = new \Oro\Bundle\UserBundle\Form\Type\ChangePasswordType($this->get('oro_user.change_password.subscriber'));
    }

    /**
     * Gets the 'oro_user.form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\EmailType A Oro\Bundle\UserBundle\Form\Type\EmailType instance.
     */
    protected function getOroUser_Form_Type_EmailService()
    {
        return $this->services['oro_user.form.type.email'] = new \Oro\Bundle\UserBundle\Form\Type\EmailType();
    }

    /**
     * Gets the 'oro_user.form.type.gender' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\GenderType A Oro\Bundle\UserBundle\Form\Type\GenderType instance.
     */
    protected function getOroUser_Form_Type_GenderService()
    {
        return $this->services['oro_user.form.type.gender'] = new \Oro\Bundle\UserBundle\Form\Type\GenderType($this->get('oro_user.gender_provider'));
    }

    /**
     * Gets the 'oro_user.form.type.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\GroupType A Oro\Bundle\UserBundle\Form\Type\GroupType instance.
     */
    protected function getOroUser_Form_Type_GroupService()
    {
        return $this->services['oro_user.form.type.group'] = new \Oro\Bundle\UserBundle\Form\Type\GroupType();
    }

    /**
     * Gets the 'oro_user.form.type.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\GroupApiType A Oro\Bundle\UserBundle\Form\Type\GroupApiType instance.
     */
    protected function getOroUser_Form_Type_Group_ApiService()
    {
        return $this->services['oro_user.form.type.group.api'] = new \Oro\Bundle\UserBundle\Form\Type\GroupApiType();
    }

    /**
     * Gets the 'oro_user.form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\ResetType A Oro\Bundle\UserBundle\Form\Type\ResetType instance.
     */
    protected function getOroUser_Form_Type_ResetService()
    {
        return $this->services['oro_user.form.type.reset'] = new \Oro\Bundle\UserBundle\Form\Type\ResetType('Oro\\Bundle\\UserBundle\\Entity\\User');
    }

    /**
     * Gets the 'oro_user.form.type.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\RoleApiType A Oro\Bundle\UserBundle\Form\Type\RoleApiType instance.
     */
    protected function getOroUser_Form_Type_Role_ApiService()
    {
        return $this->services['oro_user.form.type.role.api'] = new \Oro\Bundle\UserBundle\Form\Type\RoleApiType();
    }

    /**
     * Gets the 'oro_user.form.type.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\StatusType A Oro\Bundle\UserBundle\Form\Type\StatusType instance.
     */
    protected function getOroUser_Form_Type_StatusService()
    {
        return $this->services['oro_user.form.type.status'] = new \Oro\Bundle\UserBundle\Form\Type\StatusType();
    }

    /**
     * Gets the 'oro_user.form.type.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Type\UserType A Pim\Bundle\UserBundle\Form\Type\UserType instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.type.user' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Type_UserService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.type.user', 'request');
        }

        return $this->services['oro_user.form.type.user'] = $this->scopedServices['request']['oro_user.form.type.user'] = new \Pim\Bundle\UserBundle\Form\Type\UserType($this->get('security.context'), $this->get('request'), $this->get('pim_user.form.subscriber.user_preferences'), $this->get('pim_user.repository.role'), $this->get('pim_user.repository.group'));
    }

    /**
     * Gets the 'oro_user.form.type.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\UserApiType A Oro\Bundle\UserBundle\Form\Type\UserApiType instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.type.user.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Type_User_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.type.user.api', 'request');
        }

        return $this->services['oro_user.form.type.user.api'] = $this->scopedServices['request']['oro_user.form.type.user.api'] = new \Oro\Bundle\UserBundle\Form\Type\UserApiType($this->get('security.context'), $this->get('request'));
    }

    /**
     * Gets the 'oro_user.form.type.user_multiselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType A Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType instance.
     */
    protected function getOroUser_Form_Type_UserMultiselectService()
    {
        return $this->services['oro_user.form.type.user_multiselect'] = new \Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.type.user_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Form\Type\UserSelectType A Oro\Bundle\UserBundle\Form\Type\UserSelectType instance.
     */
    protected function getOroUser_Form_Type_UserSelectService()
    {
        return $this->services['oro_user.form.type.user_select'] = new \Oro\Bundle\UserBundle\Form\Type\UserSelectType();
    }

    /**
     * Gets the 'oro_user.form.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_UserService()
    {
        return $this->services['oro_user.form.user'] = $this->get('form.factory')->createNamed('oro_user_user_form', 'oro_user_user', NULL);
    }

    /**
     * Gets the 'oro_user.form.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_User_ApiService()
    {
        return $this->services['oro_user.form.user.api'] = $this->get('form.factory')->createNamed('user', 'user', NULL);
    }

    /**
     * Gets the 'oro_user.gender_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Provider\GenderProvider A Oro\Bundle\UserBundle\Provider\GenderProvider instance.
     */
    protected function getOroUser_GenderProviderService()
    {
        return $this->services['oro_user.gender_provider'] = new \Oro\Bundle\UserBundle\Provider\GenderProvider($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_user.group_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\Manager\GroupManager A Oro\Bundle\UserBundle\Entity\Manager\GroupManager instance.
     */
    protected function getOroUser_GroupManagerService()
    {
        return $this->services['oro_user.group_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\GroupManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.group_manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_GroupManager_ApiService()
    {
        return $this->services['oro_user.group_manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\Group', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.importexport.user_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer A Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer instance.
     */
    protected function getOroUser_Importexport_UserNormalizerService()
    {
        return $this->services['oro_user.importexport.user_normalizer'] = new \Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer();
    }

    /**
     * Gets the 'oro_user.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\UserManager A Oro\Bundle\UserBundle\Entity\UserManager instance.
     */
    protected function getOroUser_ManagerService()
    {
        return $this->services['oro_user.manager'] = new \Oro\Bundle\UserBundle\Entity\UserManager('Oro\\Bundle\\UserBundle\\Entity\\User', $this->get('doctrine.orm.default_entity_manager'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'oro_user.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_Manager_ApiService()
    {
        return $this->services['oro_user.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\User', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.role.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\EventListener\RoleListener A Oro\Bundle\UserBundle\EventListener\RoleListener instance.
     */
    protected function getOroUser_Role_ListenerService()
    {
        return $this->services['oro_user.role.listener'] = new \Oro\Bundle\UserBundle\EventListener\RoleListener($this->get('oro_security.link.sid_manager'));
    }

    /**
     * Gets the 'oro_user.role_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\Manager\RoleManager A Oro\Bundle\UserBundle\Entity\Manager\RoleManager instance.
     */
    protected function getOroUser_RoleManagerService()
    {
        return $this->services['oro_user.role_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\RoleManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.role_manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_RoleManager_ApiService()
    {
        return $this->services['oro_user.role_manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\Role', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.security.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\EventListener\LoginSubscriber A Oro\Bundle\UserBundle\EventListener\LoginSubscriber instance.
     */
    protected function getOroUser_Security_LoginService()
    {
        return $this->services['oro_user.security.login'] = new \Oro\Bundle\UserBundle\EventListener\LoginSubscriber($this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.status_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Entity\Manager\StatusManager A Oro\Bundle\UserBundle\Entity\Manager\StatusManager instance.
     */
    protected function getOroUser_StatusManagerService()
    {
        return $this->services['oro_user.status_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\StatusManager($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.twig.user_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Twig\OroUserExtension A Oro\Bundle\UserBundle\Twig\OroUserExtension instance.
     */
    protected function getOroUser_Twig_UserExtensionService()
    {
        return $this->services['oro_user.twig.user_extension'] = new \Oro\Bundle\UserBundle\Twig\OroUserExtension($this->get('oro_user.gender_provider'));
    }

    /**
     * Gets the 'oro_user.user_menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\UserBundle\Menu\UserMenuBuilder A Oro\Bundle\UserBundle\Menu\UserMenuBuilder instance.
     */
    protected function getOroUser_UserMenuService()
    {
        return $this->services['oro_user.user_menu'] = new \Oro\Bundle\UserBundle\Menu\UserMenuBuilder($this->get('security.context'));
    }

    /**
     * Gets the 'oro_windows.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\WindowsBundle\Twig\WindowsExtension A Oro\Bundle\WindowsBundle\Twig\WindowsExtension instance.
     */
    protected function getOroWindows_Twig_ExtensionService()
    {
        return $this->services['oro_windows.twig.extension'] = new \Oro\Bundle\WindowsBundle\Twig\WindowsExtension($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_archivist_filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gaufrette\Filesystem A Gaufrette\Filesystem instance.
     */
    protected function getPimArchivistFilesystemService()
    {
        return $this->services['pim_archivist_filesystem'] = new \Gaufrette\Filesystem(new \Gaufrette\Adapter\Local((dirname(dirname(__DIR__)).'/archive'), true));
    }

    /**
     * Gets the 'pim_base_connector.archiver.archivable_file_writer_archiver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Archiver\ArchivableFileWriterArchiver A Pim\Bundle\BaseConnectorBundle\Archiver\ArchivableFileWriterArchiver instance.
     */
    protected function getPimBaseConnector_Archiver_ArchivableFileWriterArchiverService()
    {
        return $this->services['pim_base_connector.archiver.archivable_file_writer_archiver'] = new \Pim\Bundle\BaseConnectorBundle\Archiver\ArchivableFileWriterArchiver($this->get('pim_base_connector.factory.zip_filesystem'), (dirname(dirname(__DIR__)).'/archive'), $this->get('pim_archivist_filesystem'));
    }

    /**
     * Gets the 'pim_base_connector.archiver.file_reader_archiver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Archiver\FileReaderArchiver A Pim\Bundle\BaseConnectorBundle\Archiver\FileReaderArchiver instance.
     */
    protected function getPimBaseConnector_Archiver_FileReaderArchiverService()
    {
        return $this->services['pim_base_connector.archiver.file_reader_archiver'] = new \Pim\Bundle\BaseConnectorBundle\Archiver\FileReaderArchiver($this->get('pim_archivist_filesystem'));
    }

    /**
     * Gets the 'pim_base_connector.archiver.file_writer_archiver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Archiver\FileWriterArchiver A Pim\Bundle\BaseConnectorBundle\Archiver\FileWriterArchiver instance.
     */
    protected function getPimBaseConnector_Archiver_FileWriterArchiverService()
    {
        return $this->services['pim_base_connector.archiver.file_writer_archiver'] = new \Pim\Bundle\BaseConnectorBundle\Archiver\FileWriterArchiver($this->get('pim_archivist_filesystem'));
    }

    /**
     * Gets the 'pim_base_connector.archiver.invalid_item_csv_archiver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Archiver\InvalidItemsCsvArchiver A Pim\Bundle\BaseConnectorBundle\Archiver\InvalidItemsCsvArchiver instance.
     */
    protected function getPimBaseConnector_Archiver_InvalidItemCsvArchiverService()
    {
        return $this->services['pim_base_connector.archiver.invalid_item_csv_archiver'] = new \Pim\Bundle\BaseConnectorBundle\Archiver\InvalidItemsCsvArchiver($this->get('pim_base_connector.event_listener.invalid_items_collector'), $this->get('pim_base_connector.archiver.invalid_item_csv_writer'), $this->get('pim_archivist_filesystem'), (dirname(dirname(__DIR__)).'/archive'));
    }

    /**
     * Gets the 'pim_base_connector.archiver.invalid_item_csv_writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter instance.
     */
    protected function getPimBaseConnector_Archiver_InvalidItemCsvWriterService()
    {
        return $this->services['pim_base_connector.archiver.invalid_item_csv_writer'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter();
    }

    /**
     * Gets the 'pim_base_connector.event_listener.archivist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\EventListener\JobExecutionArchivist A Pim\Bundle\BaseConnectorBundle\EventListener\JobExecutionArchivist instance.
     */
    protected function getPimBaseConnector_EventListener_ArchivistService()
    {
        $this->services['pim_base_connector.event_listener.archivist'] = $instance = new \Pim\Bundle\BaseConnectorBundle\EventListener\JobExecutionArchivist();

        $instance->registerArchiver($this->get('pim_base_connector.archiver.invalid_item_csv_archiver'));
        $instance->registerArchiver($this->get('pim_base_connector.archiver.file_reader_archiver'));
        $instance->registerArchiver($this->get('pim_base_connector.archiver.file_writer_archiver'));
        $instance->registerArchiver($this->get('pim_base_connector.archiver.archivable_file_writer_archiver'));

        return $instance;
    }

    /**
     * Gets the 'pim_base_connector.event_listener.invalid_items_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\EventListener\InvalidItemsCollector A Pim\Bundle\BaseConnectorBundle\EventListener\InvalidItemsCollector instance.
     */
    protected function getPimBaseConnector_EventListener_InvalidItemsCollectorService()
    {
        return $this->services['pim_base_connector.event_listener.invalid_items_collector'] = new \Pim\Bundle\BaseConnectorBundle\EventListener\InvalidItemsCollector();
    }

    /**
     * Gets the 'pim_base_connector.factory.zip_filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Filesystem\ZipFilesystemFactory A Pim\Bundle\BaseConnectorBundle\Filesystem\ZipFilesystemFactory instance.
     */
    protected function getPimBaseConnector_Factory_ZipFilesystemService()
    {
        return $this->services['pim_base_connector.factory.zip_filesystem'] = new \Pim\Bundle\BaseConnectorBundle\Filesystem\ZipFilesystemFactory();
    }

    /**
     * Gets the 'pim_base_connector.processor.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_AssociationService()
    {
        return $this->services['pim_base_connector.processor.association'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\Association');
    }

    /**
     * Gets the 'pim_base_connector.processor.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_AssociationTypeService()
    {
        return $this->services['pim_base_connector.processor.association_type'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType');
    }

    /**
     * Gets the 'pim_base_connector.processor.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_AttributeService()
    {
        return $this->services['pim_base_connector.processor.attribute'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_base_connector.processor.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_AttributeGroupService()
    {
        return $this->services['pim_base_connector.processor.attribute_group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup');
    }

    /**
     * Gets the 'pim_base_connector.processor.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_AttributeOptionService()
    {
        return $this->services['pim_base_connector.processor.attribute_option'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
    }

    /**
     * Gets the 'pim_base_connector.processor.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\CategoryProcessor A Pim\Bundle\BaseConnectorBundle\Processor\CategoryProcessor instance.
     */
    protected function getPimBaseConnector_Processor_CategoryService()
    {
        return $this->services['pim_base_connector.processor.category'] = new \Pim\Bundle\BaseConnectorBundle\Processor\CategoryProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', $this->get('pim_transform.cache.doctrine_cache'));
    }

    /**
     * Gets the 'pim_base_connector.processor.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_ChannelService()
    {
        $this->services['pim_base_connector.processor.channel'] = $instance = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel');

        $instance->addMapping('tree', 'category');

        return $instance;
    }

    /**
     * Gets the 'pim_base_connector.processor.csv_serializer.heterogeneous' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HeterogeneousProcessor A Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HeterogeneousProcessor instance.
     */
    protected function getPimBaseConnector_Processor_CsvSerializer_HeterogeneousService()
    {
        return $this->services['pim_base_connector.processor.csv_serializer.heterogeneous'] = new \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HeterogeneousProcessor($this->get('pim_serializer'), $this->get('pim_catalog.manager.locale'));
    }

    /**
     * Gets the 'pim_base_connector.processor.csv_serializer.homogeneous' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor A Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor instance.
     */
    protected function getPimBaseConnector_Processor_CsvSerializer_HomogeneousService()
    {
        return $this->services['pim_base_connector.processor.csv_serializer.homogeneous'] = new \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor($this->get('pim_serializer'), $this->get('pim_catalog.manager.locale'));
    }

    /**
     * Gets the 'pim_base_connector.processor.csv_serializer.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\ProductProcessor A Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\ProductProcessor instance.
     */
    protected function getPimBaseConnector_Processor_CsvSerializer_ProductService()
    {
        return $this->services['pim_base_connector.processor.csv_serializer.product'] = new \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\ProductProcessor($this->get('pim_serializer'), $this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.manager.channel'));
    }

    /**
     * Gets the 'pim_base_connector.processor.denormalization.csv_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\GroupProcessor A Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\GroupProcessor instance.
     */
    protected function getPimBaseConnector_Processor_Denormalization_CsvGroupService()
    {
        return $this->services['pim_base_connector.processor.denormalization.csv_group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\GroupProcessor($this->get('pim_catalog.repository.group'), $this->get('pim_serializer'), $this->get('pim_validator'), $this->get('akeneo_storage_utils.doctrine.object_detacher'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'csv');
    }

    /**
     * Gets the 'pim_base_connector.processor.denormalization.csv_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\VariantGroupProcessor A Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\VariantGroupProcessor instance.
     */
    protected function getPimBaseConnector_Processor_Denormalization_CsvVariantGroupService()
    {
        $a = $this->get('pim_serializer');

        return $this->services['pim_base_connector.processor.denormalization.csv_variant_group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\Denormalization\VariantGroupProcessor($this->get('pim_catalog.repository.group'), $a, $this->get('pim_validator'), $this->get('akeneo_storage_utils.doctrine.object_detacher'), $a, $this->get('pim_catalog.manager.product_template_media'), $this->get('pim_transform.builder.field_name'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate', 'csv');
    }

    /**
     * Gets the 'pim_base_connector.processor.dummy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\DummyProcessor A Pim\Bundle\BaseConnectorBundle\Processor\DummyProcessor instance.
     */
    protected function getPimBaseConnector_Processor_DummyService()
    {
        return $this->services['pim_base_connector.processor.dummy'] = new \Pim\Bundle\BaseConnectorBundle\Processor\DummyProcessor();
    }

    /**
     * Gets the 'pim_base_connector.processor.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_FamilyService()
    {
        return $this->services['pim_base_connector.processor.family'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Family');
    }

    /**
     * Gets the 'pim_base_connector.processor.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_GroupService()
    {
        return $this->services['pim_base_connector.processor.group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_base_connector.processor.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_GroupTypeService()
    {
        return $this->services['pim_base_connector.processor.group_type'] = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\GroupType');
    }

    /**
     * Gets the 'pim_base_connector.processor.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor A Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor instance.
     */
    protected function getPimBaseConnector_Processor_JobInstanceService()
    {
        $this->services['pim_base_connector.processor.job_instance'] = $instance = new \Pim\Bundle\BaseConnectorBundle\Processor\TransformerProcessor($this->get('pim_base_connector.validator.skip_import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance');

        $instance->addMapping('configuration', 'rawConfiguration');

        return $instance;
    }

    /**
     * Gets the 'pim_base_connector.processor.normalization.csv_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor A Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor instance.
     */
    protected function getPimBaseConnector_Processor_Normalization_CsvGroupService()
    {
        return $this->services['pim_base_connector.processor.normalization.csv_group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\CsvSerializer\HomogeneousProcessor($this->get('pim_serializer'), $this->get('pim_catalog.manager.locale'));
    }

    /**
     * Gets the 'pim_base_connector.processor.normalization.csv_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\Normalization\VariantGroupProcessor A Pim\Bundle\BaseConnectorBundle\Processor\Normalization\VariantGroupProcessor instance.
     */
    protected function getPimBaseConnector_Processor_Normalization_CsvVariantGroupService()
    {
        $a = $this->get('pim_serializer');

        return $this->services['pim_base_connector.processor.normalization.csv_variant_group'] = new \Pim\Bundle\BaseConnectorBundle\Processor\Normalization\VariantGroupProcessor($a, $a, (dirname(dirname(__DIR__)).'/uploads/product'), 'csv');
    }

    /**
     * Gets the 'pim_base_connector.processor.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\ProductProcessor A Pim\Bundle\BaseConnectorBundle\Processor\ProductProcessor instance.
     */
    protected function getPimBaseConnector_Processor_ProductService()
    {
        return $this->services['pim_base_connector.processor.product'] = new \Pim\Bundle\BaseConnectorBundle\Processor\ProductProcessor($this->get('pim_base_connector.validator.product_import'), $this->get('translator.default'), $this->get('pim_transform.transformer.registry'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_base_connector.processor.product_to_flat_array' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Processor\ProductToFlatArrayProcessor A Pim\Bundle\BaseConnectorBundle\Processor\ProductToFlatArrayProcessor instance.
     */
    protected function getPimBaseConnector_Processor_ProductToFlatArrayService()
    {
        return $this->services['pim_base_connector.processor.product_to_flat_array'] = new \Pim\Bundle\BaseConnectorBundle\Processor\ProductToFlatArrayProcessor($this->get('pim_serializer'), $this->get('pim_catalog.manager.channel'), (dirname(dirname(__DIR__)).'/uploads/product'));
    }

    /**
     * Gets the 'pim_base_connector.reader.cached_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\CachedReader A Pim\Bundle\BaseConnectorBundle\Reader\CachedReader instance.
     */
    protected function getPimBaseConnector_Reader_CachedAssociationService()
    {
        return $this->services['pim_base_connector.reader.cached_association'] = new \Pim\Bundle\BaseConnectorBundle\Reader\CachedReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.doctrine.bulk_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\BulkProductReader A Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\BulkProductReader instance.
     */
    protected function getPimBaseConnector_Reader_Doctrine_BulkProductService()
    {
        return $this->services['pim_base_connector.reader.doctrine.bulk_product'] = new \Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\BulkProductReader($this->get('pim_catalog.repository.product'), $this->get('pim_catalog.manager.channel'), $this->get('pim_catalog.manager.completeness'), $this->get('pim_transform.converter.metric'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_base_connector.reader.doctrine.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\ORMProductReader A Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\ORMProductReader instance.
     */
    protected function getPimBaseConnector_Reader_Doctrine_ProductService()
    {
        return $this->services['pim_base_connector.reader.doctrine.product'] = new \Pim\Bundle\BaseConnectorBundle\Reader\Doctrine\ORMProductReader($this->get('pim_catalog.repository.product'), $this->get('pim_catalog.manager.channel'), $this->get('pim_catalog.manager.completeness'), $this->get('pim_transform.converter.metric'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_base_connector.reader.dummy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\DummyReader A Pim\Bundle\BaseConnectorBundle\Reader\DummyReader instance.
     */
    protected function getPimBaseConnector_Reader_DummyService()
    {
        return $this->services['pim_base_connector.reader.dummy'] = new \Pim\Bundle\BaseConnectorBundle\Reader\DummyReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvService()
    {
        return $this->services['pim_base_connector.reader.file.csv'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvAssociationTypeService()
    {
        return $this->services['pim_base_connector.reader.file.csv_association_type'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvAttributeService()
    {
        return $this->services['pim_base_connector.reader.file.csv_attribute'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvAttributeOptionService()
    {
        return $this->services['pim_base_connector.reader.file.csv_attribute_option'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvCategoryReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvCategoryReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvCategoryService()
    {
        return $this->services['pim_base_connector.reader.file.csv_category'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvCategoryReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvGroupService()
    {
        return $this->services['pim_base_connector.reader.file.csv_group'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.csv_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvProductReader A Pim\Bundle\BaseConnectorBundle\Reader\File\CsvProductReader instance.
     */
    protected function getPimBaseConnector_Reader_File_CsvProductService()
    {
        return $this->services['pim_base_connector.reader.file.csv_product'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\CsvProductReader($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_transform.builder.field_name'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel', 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale', 'Pim\\Bundle\\CatalogBundle\\Entity\\Currency');
    }

    /**
     * Gets the 'pim_base_connector.reader.file.yaml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader A Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader instance.
     */
    protected function getPimBaseConnector_Reader_File_YamlService()
    {
        return $this->services['pim_base_connector.reader.file.yaml'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader();
    }

    /**
     * Gets the 'pim_base_connector.reader.file.yaml_associations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader A Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader instance.
     */
    protected function getPimBaseConnector_Reader_File_YamlAssociationsService()
    {
        return $this->services['pim_base_connector.reader.file.yaml_associations'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader(false, false);
    }

    /**
     * Gets the 'pim_base_connector.reader.file.yaml_multiple' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader A Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader instance.
     */
    protected function getPimBaseConnector_Reader_File_YamlMultipleService()
    {
        return $this->services['pim_base_connector.reader.file.yaml_multiple'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader(true);
    }

    /**
     * Gets the 'pim_base_connector.reader.file.yaml_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader A Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader instance.
     */
    protected function getPimBaseConnector_Reader_File_YamlProductService()
    {
        return $this->services['pim_base_connector.reader.file.yaml_product'] = new \Pim\Bundle\BaseConnectorBundle\Reader\File\YamlReader(false, false);
    }

    /**
     * Gets the 'pim_base_connector.reader.orm.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader A Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader instance.
     */
    protected function getPimBaseConnector_Reader_Orm_AssociationTypeService()
    {
        return $this->services['pim_base_connector.reader.orm.association_type'] = new \Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType');
    }

    /**
     * Gets the 'pim_base_connector.reader.orm.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader A Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader instance.
     */
    protected function getPimBaseConnector_Reader_Orm_AttributeService()
    {
        return $this->services['pim_base_connector.reader.orm.attribute'] = new \Pim\Bundle\BaseConnectorBundle\Reader\ORM\EntityReader($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_base_connector.reader.orm.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\ORM\AttributeOptionReader A Pim\Bundle\BaseConnectorBundle\Reader\ORM\AttributeOptionReader instance.
     */
    protected function getPimBaseConnector_Reader_Orm_AttributeOptionService()
    {
        return $this->services['pim_base_connector.reader.orm.attribute_option'] = new \Pim\Bundle\BaseConnectorBundle\Reader\ORM\AttributeOptionReader($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
    }

    /**
     * Gets the 'pim_base_connector.reader.orm.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\ORM\CategoryReader A Pim\Bundle\BaseConnectorBundle\Reader\ORM\CategoryReader instance.
     */
    protected function getPimBaseConnector_Reader_Orm_CategoryService()
    {
        return $this->services['pim_base_connector.reader.orm.category'] = new \Pim\Bundle\BaseConnectorBundle\Reader\ORM\CategoryReader($this->get('pim_catalog.repository.category'));
    }

    /**
     * Gets the 'pim_base_connector.reader.repository.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\Repository\GroupReader A Pim\Bundle\BaseConnectorBundle\Reader\Repository\GroupReader instance.
     */
    protected function getPimBaseConnector_Reader_Repository_GroupService()
    {
        return $this->services['pim_base_connector.reader.repository.group'] = new \Pim\Bundle\BaseConnectorBundle\Reader\Repository\GroupReader($this->get('pim_catalog.repository.group'));
    }

    /**
     * Gets the 'pim_base_connector.reader.repository.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Reader\Repository\VariantGroupReader A Pim\Bundle\BaseConnectorBundle\Reader\Repository\VariantGroupReader instance.
     */
    protected function getPimBaseConnector_Reader_Repository_VariantGroupService()
    {
        return $this->services['pim_base_connector.reader.repository.variant_group'] = new \Pim\Bundle\BaseConnectorBundle\Reader\Repository\VariantGroupReader($this->get('pim_catalog.repository.group'));
    }

    /**
     * Gets the 'pim_base_connector.validator.constraints.channel_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Validator\Constraints\ChannelValidator A Pim\Bundle\BaseConnectorBundle\Validator\Constraints\ChannelValidator instance.
     */
    protected function getPimBaseConnector_Validator_Constraints_ChannelValidatorService()
    {
        return $this->services['pim_base_connector.validator.constraints.channel_validator'] = new \Pim\Bundle\BaseConnectorBundle\Validator\Constraints\ChannelValidator($this->get('pim_catalog.manager.channel'));
    }

    /**
     * Gets the 'pim_base_connector.validator.import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Validator\Import\ImportValidator A Pim\Bundle\BaseConnectorBundle\Validator\Import\ImportValidator instance.
     */
    protected function getPimBaseConnector_Validator_ImportService()
    {
        return $this->services['pim_base_connector.validator.import'] = new \Pim\Bundle\BaseConnectorBundle\Validator\Import\ImportValidator($this->get('validator'));
    }

    /**
     * Gets the 'pim_base_connector.validator.product_import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Validator\Import\ProductImportValidator A Pim\Bundle\BaseConnectorBundle\Validator\Import\ProductImportValidator instance.
     */
    protected function getPimBaseConnector_Validator_ProductImportService()
    {
        return $this->services['pim_base_connector.validator.product_import'] = new \Pim\Bundle\BaseConnectorBundle\Validator\Import\ProductImportValidator($this->get('validator'), $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'), $this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_base_connector.validator.skip_import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Validator\Import\SkipImportValidator A Pim\Bundle\BaseConnectorBundle\Validator\Import\SkipImportValidator instance.
     */
    protected function getPimBaseConnector_Validator_SkipImportService()
    {
        return $this->services['pim_base_connector.validator.skip_import'] = new \Pim\Bundle\BaseConnectorBundle\Validator\Import\SkipImportValidator();
    }

    /**
     * Gets the 'pim_base_connector.validator.step.charset_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Validator\Step\CharsetValidator A Pim\Bundle\BaseConnectorBundle\Validator\Step\CharsetValidator instance.
     */
    protected function getPimBaseConnector_Validator_Step_CharsetValidatorService()
    {
        return $this->services['pim_base_connector.validator.step.charset_validator'] = new \Pim\Bundle\BaseConnectorBundle\Validator\Step\CharsetValidator();
    }

    /**
     * Gets the 'pim_base_connector.writer.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\Writer A Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\Writer instance.
     */
    protected function getPimBaseConnector_Writer_DoctrineService()
    {
        return $this->services['pim_base_connector.writer.doctrine'] = new \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\Writer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_transform.cache.cache_clearer'));
    }

    /**
     * Gets the 'pim_base_connector.writer.doctrine.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductWriter A Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductWriter instance.
     */
    protected function getPimBaseConnector_Writer_Doctrine_ProductService()
    {
        return $this->services['pim_base_connector.writer.doctrine.product'] = new \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductWriter($this->get('pim_catalog.manager.media'), $this->get('pim_transform.cache.product_cache_clearer'), $this->get('pim_versioning.manager.version'), $this->get('pim_catalog.saver.product'));
    }

    /**
     * Gets the 'pim_base_connector.writer.doctrine.product_association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductAssociationWriter A Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductAssociationWriter instance.
     */
    protected function getPimBaseConnector_Writer_Doctrine_ProductAssociationService()
    {
        return $this->services['pim_base_connector.writer.doctrine.product_association'] = new \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\ProductAssociationWriter($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_transform.cache.cache_clearer'));
    }

    /**
     * Gets the 'pim_base_connector.writer.doctrine.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\VariantGroupWriter A Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\VariantGroupWriter instance.
     */
    protected function getPimBaseConnector_Writer_Doctrine_VariantGroupService()
    {
        return $this->services['pim_base_connector.writer.doctrine.variant_group'] = new \Pim\Bundle\BaseConnectorBundle\Writer\Doctrine\VariantGroupWriter($this->get('pim_catalog.saver.group'), $this->get('pim_transform.cache.product_cache_clearer'), $this->get('pim_catalog.applier.product_template'));
    }

    /**
     * Gets the 'pim_base_connector.writer.dummy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\DummyWriter A Pim\Bundle\BaseConnectorBundle\Writer\DummyWriter instance.
     */
    protected function getPimBaseConnector_Writer_DummyService()
    {
        return $this->services['pim_base_connector.writer.dummy'] = new \Pim\Bundle\BaseConnectorBundle\Writer\DummyWriter();
    }

    /**
     * Gets the 'pim_base_connector.writer.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\FileWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\FileWriter instance.
     */
    protected function getPimBaseConnector_Writer_FileService()
    {
        return $this->services['pim_base_connector.writer.file'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\FileWriter();
    }

    /**
     * Gets the 'pim_base_connector.writer.file.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter instance.
     */
    protected function getPimBaseConnector_Writer_File_CsvService()
    {
        return $this->services['pim_base_connector.writer.file.csv'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter();
    }

    /**
     * Gets the 'pim_base_connector.writer.file.csv_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvProductWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\CsvProductWriter instance.
     */
    protected function getPimBaseConnector_Writer_File_CsvProductService()
    {
        return $this->services['pim_base_connector.writer.file.csv_product'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvProductWriter($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_base_connector.writer.file.csv_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvVariantGroupWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\CsvVariantGroupWriter instance.
     */
    protected function getPimBaseConnector_Writer_File_CsvVariantGroupService()
    {
        return $this->services['pim_base_connector.writer.file.csv_variant_group'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\CsvVariantGroupWriter($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_base_connector.writer.product_file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\BaseConnectorBundle\Writer\File\ProductWriter A Pim\Bundle\BaseConnectorBundle\Writer\File\ProductWriter instance.
     */
    protected function getPimBaseConnector_Writer_ProductFileService()
    {
        return $this->services['pim_base_connector.writer.product_file'] = new \Pim\Bundle\BaseConnectorBundle\Writer\File\ProductWriter();
    }

    /**
     * Gets the 'pim_catalog.applier.product_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ProductTemplateApplier A Pim\Bundle\CatalogBundle\Manager\ProductTemplateApplier instance.
     */
    protected function getPimCatalog_Applier_ProductTemplateService()
    {
        return $this->services['pim_catalog.applier.product_template'] = new \Pim\Bundle\CatalogBundle\Manager\ProductTemplateApplier($this->get('pim_catalog.updater.product_template'), $this->get('pim_validator'), $this->get('akeneo_storage_utils.doctrine.object_detacher'), $this->get('pim_catalog.saver.product'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\BooleanType A Pim\Bundle\CatalogBundle\AttributeType\BooleanType instance.
     */
    protected function getPimCatalog_Attributetype_BooleanService()
    {
        return $this->services['pim_catalog.attributetype.boolean'] = new \Pim\Bundle\CatalogBundle\AttributeType\BooleanType('boolean', 'switch', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\DateType A Pim\Bundle\CatalogBundle\AttributeType\DateType instance.
     */
    protected function getPimCatalog_Attributetype_DateService()
    {
        return $this->services['pim_catalog.attributetype.date'] = new \Pim\Bundle\CatalogBundle\AttributeType\DateType('date', 'oro_date', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\FileType A Pim\Bundle\CatalogBundle\AttributeType\FileType instance.
     */
    protected function getPimCatalog_Attributetype_FileService()
    {
        return $this->services['pim_catalog.attributetype.file'] = new \Pim\Bundle\CatalogBundle\AttributeType\FileType('media', 'pim_enrich_media', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\IdentifierType A Pim\Bundle\CatalogBundle\AttributeType\IdentifierType instance.
     */
    protected function getPimCatalog_Attributetype_IdentifierService()
    {
        return $this->services['pim_catalog.attributetype.identifier'] = new \Pim\Bundle\CatalogBundle\AttributeType\IdentifierType('varchar', 'text', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\ImageType A Pim\Bundle\CatalogBundle\AttributeType\ImageType instance.
     */
    protected function getPimCatalog_Attributetype_ImageService()
    {
        return $this->services['pim_catalog.attributetype.image'] = new \Pim\Bundle\CatalogBundle\AttributeType\ImageType('media', 'pim_enrich_image', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\MetricType A Pim\Bundle\CatalogBundle\AttributeType\MetricType instance.
     */
    protected function getPimCatalog_Attributetype_MetricService()
    {
        return $this->services['pim_catalog.attributetype.metric'] = new \Pim\Bundle\CatalogBundle\AttributeType\MetricType('metric', 'pim_enrich_metric', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'), $this->get('akeneo_measure.manager'), $this->get('pim_catalog.factory.metric'), $this->get('translator.default'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.multiselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\OptionMultiSelectType A Pim\Bundle\CatalogBundle\AttributeType\OptionMultiSelectType instance.
     */
    protected function getPimCatalog_Attributetype_MultiselectService()
    {
        return $this->services['pim_catalog.attributetype.multiselect'] = new \Pim\Bundle\CatalogBundle\AttributeType\OptionMultiSelectType('options', 'pim_ajax_entity', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\NumberType A Pim\Bundle\CatalogBundle\AttributeType\NumberType instance.
     */
    protected function getPimCatalog_Attributetype_NumberService()
    {
        return $this->services['pim_catalog.attributetype.number'] = new \Pim\Bundle\CatalogBundle\AttributeType\NumberType('decimal', 'pim_number', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.pricecollection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\PriceCollectionType A Pim\Bundle\CatalogBundle\AttributeType\PriceCollectionType instance.
     */
    protected function getPimCatalog_Attributetype_PricecollectionService()
    {
        return $this->services['pim_catalog.attributetype.pricecollection'] = new \Pim\Bundle\CatalogBundle\AttributeType\PriceCollectionType('prices', 'pim_enrich_price_collection', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'), $this->get('pim_catalog.manager.currency'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.simpleselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\OptionSimpleSelectType A Pim\Bundle\CatalogBundle\AttributeType\OptionSimpleSelectType instance.
     */
    protected function getPimCatalog_Attributetype_SimpleselectService()
    {
        return $this->services['pim_catalog.attributetype.simpleselect'] = new \Pim\Bundle\CatalogBundle\AttributeType\OptionSimpleSelectType('option', 'pim_ajax_entity', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\TextType A Pim\Bundle\CatalogBundle\AttributeType\TextType instance.
     */
    protected function getPimCatalog_Attributetype_TextService()
    {
        return $this->services['pim_catalog.attributetype.text'] = new \Pim\Bundle\CatalogBundle\AttributeType\TextType('varchar', 'text', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.attributetype.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\TextAreaType A Pim\Bundle\CatalogBundle\AttributeType\TextAreaType instance.
     */
    protected function getPimCatalog_Attributetype_TextareaService()
    {
        return $this->services['pim_catalog.attributetype.textarea'] = new \Pim\Bundle\CatalogBundle\AttributeType\TextAreaType('text', 'textarea', $this->get('pim_catalog.validator.constraint_guesser.chained_attribute'));
    }

    /**
     * Gets the 'pim_catalog.builder.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Builder\ProductBuilder A Pim\Bundle\CatalogBundle\Builder\ProductBuilder instance.
     */
    protected function getPimCatalog_Builder_ProductService()
    {
        return $this->services['pim_catalog.builder.product'] = new \Pim\Bundle\CatalogBundle\Builder\ProductBuilder($this->get('pim_catalog.repository.channel'), $this->get('pim_catalog.repository.locale'), $this->get('pim_catalog.repository.currency'), array('product' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'product_value' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'product_price' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductPrice'));
    }

    /**
     * Gets the 'pim_catalog.builder.product_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Builder\ProductTemplateBuilder A Pim\Bundle\CatalogBundle\Builder\ProductTemplateBuilder instance.
     */
    protected function getPimCatalog_Builder_ProductTemplateService()
    {
        $a = $this->get('pim_serializer');

        return $this->services['pim_catalog.builder.product_template'] = new \Pim\Bundle\CatalogBundle\Builder\ProductTemplateBuilder($a, $a, $this->get('pim_catalog.builder.product'), 'Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate', 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.context.catalog' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Context\CatalogContext A Pim\Bundle\CatalogBundle\Context\CatalogContext instance.
     */
    protected function getPimCatalog_Context_CatalogService()
    {
        return $this->services['pim_catalog.context.catalog'] = new \Pim\Bundle\CatalogBundle\Context\CatalogContext();
    }

    /**
     * Gets the 'pim_catalog.doctrine.completeness_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessGenerator A Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessGenerator instance.
     */
    protected function getPimCatalog_Doctrine_CompletenessGeneratorService()
    {
        return $this->services['pim_catalog.doctrine.completeness_generator'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessGenerator($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_catalog.doctrine.product_query_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\ProductQueryBuilder A Pim\Bundle\CatalogBundle\Query\ProductQueryBuilder instance.
     */
    protected function getPimCatalog_Doctrine_ProductQueryBuilderService()
    {
        return $this->services['pim_catalog.doctrine.product_query_builder'] = new \Pim\Bundle\CatalogBundle\Query\ProductQueryBuilder($this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.query.filter.registry'), $this->get('pim_catalog.query.sorter.registry'), $this->get('pim_catalog.factory.product_cursor'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\BooleanFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\BooleanFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_BooleanService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.boolean'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\BooleanFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_boolean'), array(0 => 'enabled'), array(0 => '='));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\CategoryFilter A Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\CategoryFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_CategoryService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.category'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\CategoryFilter($this->get('pim_catalog.repository.category'), $this->get('pim_catalog.repository.product_category'), $this->get('pim_catalog.doctrine.query.filter.object_id_resolver'), array(0 => 'categories.id', 1 => 'categories.code'), array(0 => 'IN', 1 => 'NOT IN', 2 => 'UNCLASSIFIED', 3 => 'IN OR UNCLASSIFIED', 4 => 'IN CHILDREN', 5 => 'NOT IN CHILDREN'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\CompletenessFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\CompletenessFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_CompletenessService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.completeness'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\CompletenessFilter(array(0 => 'completeness'), array(0 => '<', 1 => '<=', 2 => '=', 3 => '>=', 4 => '>'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\DateFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\DateFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_DateService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.date'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\DateFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_date'), array(0 => 'created', 1 => 'updated'), array(0 => '=', 1 => '<', 2 => '>', 3 => 'BETWEEN', 4 => 'NOT BETWEEN', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\FamilyFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\FamilyFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_FamilyService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.family'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\FamilyFilter($this->get('pim_catalog.doctrine.query.filter.object_id_resolver'), array(0 => 'family.id', 1 => 'family.code'), array(0 => 'IN', 1 => 'NOT IN', 2 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.groups' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\GroupsFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\GroupsFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_GroupsService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.groups'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\GroupsFilter($this->get('pim_catalog.doctrine.query.filter.object_id_resolver'), array(0 => 'groups.id', 1 => 'groups.code'), array(0 => 'IN', 1 => 'NOT IN', 2 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_IdentifierService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.identifier'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_identifier'), array(0 => 'STARTS WITH', 1 => 'ENDS WITH', 2 => 'CONTAINS', 3 => 'DOES NOT CONTAIN', 4 => '=', 5 => 'IN'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MediaFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MediaFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_MediaService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.media'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MediaFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_image', 1 => 'pim_catalog_file'), array(0 => 'STARTS WITH', 1 => 'ENDS WITH', 2 => 'CONTAINS', 3 => 'DOES NOT CONTAIN', 4 => '=', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MetricFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MetricFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_MetricService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.metric'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\MetricFilter($this->get('pim_catalog.validator.helper.attribute'), $this->get('akeneo_measure.manager'), $this->get('akeneo_measure.measure_converter'), array(0 => 'pim_catalog_metric'), array(0 => '<', 1 => '<=', 2 => '=', 3 => '>=', 4 => '>', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\NumberFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\NumberFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_NumberService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.number'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\NumberFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_number'), array(0 => '<', 1 => '<=', 2 => '=', 3 => '>=', 4 => '>', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.object_id_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\ObjectIdResolver A Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\ObjectIdResolver instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_ObjectIdResolverService()
    {
        $this->services['pim_catalog.doctrine.query.filter.object_id_resolver'] = $instance = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Filter\ObjectIdResolver($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));

        $instance->addFieldMapping('family', 'Pim\\Bundle\\CatalogBundle\\Entity\\Family');
        $instance->addFieldMapping('option', 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
        $instance->addFieldMapping('category', 'Pim\\Bundle\\CatalogBundle\\Entity\\Category');
        $instance->addFieldMapping('group', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_OptionService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.option'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionFilter($this->get('pim_catalog.validator.helper.attribute'), $this->get('pim_catalog.doctrine.query.filter.object_id_resolver'), array(0 => 'pim_catalog_simpleselect'), array(0 => 'IN', 1 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionsFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionsFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_OptionsService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.options'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\OptionsFilter($this->get('pim_catalog.validator.helper.attribute'), $this->get('pim_catalog.doctrine.query.filter.object_id_resolver'), array(0 => 'pim_catalog_multiselect'), array(0 => 'IN', 1 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\PriceFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\PriceFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_PriceService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.price'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\PriceFilter($this->get('pim_catalog.validator.helper.attribute'), $this->get('pim_catalog.manager.currency'), array(0 => 'pim_catalog_price_collection'), array(0 => '<', 1 => '<=', 2 => '=', 3 => '>=', 4 => '>', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.product_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\ProductIdFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\ProductIdFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_ProductIdService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.product_id'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\ProductIdFilter(array(0 => 'id'), array(0 => '=', 1 => 'IN', 2 => 'NOT IN'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.filter.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Filter_StringService()
    {
        return $this->services['pim_catalog.doctrine.query.filter.string'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Filter\StringFilter($this->get('pim_catalog.validator.helper.attribute'), array(0 => 'pim_catalog_text', 1 => 'pim_catalog_textarea'), array(0 => 'STARTS WITH', 1 => 'ENDS WITH', 2 => 'CONTAINS', 3 => 'DOES NOT CONTAIN', 4 => '=', 5 => 'EMPTY'));
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.base' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\BaseSorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\BaseSorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_BaseService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.base'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\BaseSorter();
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\CompletenessSorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\CompletenessSorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_CompletenessService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.completeness'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\CompletenessSorter();
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\EntitySorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\EntitySorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_EntityService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.entity'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\EntitySorter();
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\FamilySorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\FamilySorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_FamilyService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.family'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\FamilySorter();
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.in_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\InGroupSorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\InGroupSorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_InGroupService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.in_group'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\InGroupSorter();
    }

    /**
     * Gets the 'pim_catalog.doctrine.query.sorter.is_associated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\IsAssociatedSorter A Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\IsAssociatedSorter instance.
     */
    protected function getPimCatalog_Doctrine_Query_Sorter_IsAssociatedService()
    {
        return $this->services['pim_catalog.doctrine.query.sorter.is_associated'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\Sorter\IsAssociatedSorter();
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.category.check_channels' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\Category\CheckChannelsOnDeletionSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\Category\CheckChannelsOnDeletionSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_Category_CheckChannelsService()
    {
        return $this->services['pim_catalog.event_subscriber.category.check_channels'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\Category\CheckChannelsOnDeletionSubscriber($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.create_attribute_requirement' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\CreateAttributeRequirementSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\CreateAttributeRequirementSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_CreateAttributeRequirementService()
    {
        return $this->services['pim_catalog.event_subscriber.create_attribute_requirement'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\CreateAttributeRequirementSubscriber($this->get('pim_catalog.factory.attribute_requirement'));
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.initialize_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\InitializeValuesSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\InitializeValuesSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_InitializeValuesService()
    {
        return $this->services['pim_catalog.event_subscriber.initialize_values'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\InitializeValuesSubscriber();
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.localizable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\LocalizableSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\LocalizableSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_LocalizableService()
    {
        return $this->services['pim_catalog.event_subscriber.localizable'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\LocalizableSubscriber($this->get('pim_catalog.context.catalog'));
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.metric_base_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\ORM\MetricBaseValuesSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\ORM\MetricBaseValuesSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_MetricBaseValuesService()
    {
        return $this->services['pim_catalog.event_subscriber.metric_base_values'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\ORM\MetricBaseValuesSubscriber($this->get('akeneo_measure.measure_converter'), $this->get('akeneo_measure.manager'));
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.orm.inject_product_reference' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\ORM\InjectProductReferenceSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\ORM\InjectProductReferenceSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_Orm_InjectProductReferenceService()
    {
        return $this->services['pim_catalog.event_subscriber.orm.inject_product_reference'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\ORM\InjectProductReferenceSubscriber('Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.outdate_indexed_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\OutdateIndexedValuesSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\OutdateIndexedValuesSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_OutdateIndexedValuesService()
    {
        return $this->services['pim_catalog.event_subscriber.outdate_indexed_values'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\OutdateIndexedValuesSubscriber();
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.resolve_target_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\EventSubscriber\ResolveTargetRepositorySubscriber A Akeneo\Bundle\StorageUtilsBundle\EventSubscriber\ResolveTargetRepositorySubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_ResolveTargetRepositoryService()
    {
        $this->services['pim_catalog.event_subscriber.resolve_target_repository'] = $instance = new \Akeneo\Bundle\StorageUtilsBundle\EventSubscriber\ResolveTargetRepositorySubscriber();

        $instance->addResolveTargetRepository('Oro\\Bundle\\UserBundle\\Entity\\Role', 'Pim\\Bundle\\UserBundle\\Entity\\Repository\\RoleRepository');
        $instance->addResolveTargetRepository('Oro\\Bundle\\UserBundle\\Entity\\Group', 'Pim\\Bundle\\UserBundle\\Entity\\Repository\\GroupRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\NotificationBundle\\Entity\\UserNotification', 'Pim\\Bundle\\NotificationBundle\\Entity\\Repository\\UserNotificationRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AssociationTypeRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeGroupRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeOptionRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Category', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\CategoryRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Channel', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\ChannelRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Currency', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\CurrencyRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Family', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\FamilyRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\GroupRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\GroupType', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\GroupTypeRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Locale', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\LocaleRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate', 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\ProductTemplateRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\DataGridBundle\\Entity\\DatagridView', 'Doctrine\\ORM\\EntityRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\ProductRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CatalogBundle\\Model\\Association', 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\AssociationRepository');
        $instance->addResolveTargetRepository('Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance', 'Pim\\Bundle\\ImportExportBundle\\Entity\\Repository\\JobInstanceRepository');
        $instance->addResolveTargetRepository('Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution', 'Pim\\Bundle\\ImportExportBundle\\Entity\\Repository\\JobExecutionRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\VersioningBundle\\Model\\Version', 'Pim\\Bundle\\VersioningBundle\\Doctrine\\ORM\\VersionRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\EnrichBundle\\Entity\\SequentialEdit', 'Pim\\Bundle\\EnrichBundle\\Entity\\Repository\\SequentialEditRepository');
        $instance->addResolveTargetRepository('Pim\\Bundle\\CommentBundle\\Entity\\Comment', 'Pim\\Bundle\\CommentBundle\\Repository\\CommentRepository');

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.scopable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\ScopableSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\ScopableSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_ScopableService()
    {
        return $this->services['pim_catalog.event_subscriber.scopable'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\ScopableSubscriber($this->get('pim_catalog.context.catalog'));
    }

    /**
     * Gets the 'pim_catalog.event_subscriber.timestampable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\EventSubscriber\TimestampableSubscriber A Pim\Bundle\CatalogBundle\EventSubscriber\TimestampableSubscriber instance.
     */
    protected function getPimCatalog_EventSubscriber_TimestampableService()
    {
        return $this->services['pim_catalog.event_subscriber.timestampable'] = new \Pim\Bundle\CatalogBundle\EventSubscriber\TimestampableSubscriber();
    }

    /**
     * Gets the 'pim_catalog.factory.attribute_requirement' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Factory\AttributeRequirementFactory A Pim\Bundle\CatalogBundle\Factory\AttributeRequirementFactory instance.
     */
    protected function getPimCatalog_Factory_AttributeRequirementService()
    {
        return $this->services['pim_catalog.factory.attribute_requirement'] = new \Pim\Bundle\CatalogBundle\Factory\AttributeRequirementFactory();
    }

    /**
     * Gets the 'pim_catalog.factory.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Factory\FamilyFactory A Pim\Bundle\CatalogBundle\Factory\FamilyFactory instance.
     */
    protected function getPimCatalog_Factory_FamilyService()
    {
        return $this->services['pim_catalog.factory.family'] = new \Pim\Bundle\CatalogBundle\Factory\FamilyFactory($this->get('pim_catalog.manager.product'), $this->get('pim_catalog.manager.channel'), $this->get('pim_catalog.factory.attribute_requirement'));
    }

    /**
     * Gets the 'pim_catalog.factory.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Factory\GroupFactory A Pim\Bundle\CatalogBundle\Factory\GroupFactory instance.
     */
    protected function getPimCatalog_Factory_GroupService()
    {
        return $this->services['pim_catalog.factory.group'] = new \Pim\Bundle\CatalogBundle\Factory\GroupFactory('Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_catalog.factory.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Factory\MediaFactory A Pim\Bundle\CatalogBundle\Factory\MediaFactory instance.
     */
    protected function getPimCatalog_Factory_MediaService()
    {
        return $this->services['pim_catalog.factory.media'] = new \Pim\Bundle\CatalogBundle\Factory\MediaFactory('Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia');
    }

    /**
     * Gets the 'pim_catalog.factory.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Factory\MetricFactory A Pim\Bundle\CatalogBundle\Factory\MetricFactory instance.
     */
    protected function getPimCatalog_Factory_MetricService()
    {
        return $this->services['pim_catalog.factory.metric'] = new \Pim\Bundle\CatalogBundle\Factory\MetricFactory('Pim\\Bundle\\CatalogBundle\\Model\\Metric');
    }

    /**
     * Gets the 'pim_catalog.factory.product_cursor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\ORM\Cursor\CursorFactory A Akeneo\Bundle\StorageUtilsBundle\Doctrine\ORM\Cursor\CursorFactory instance.
     */
    protected function getPimCatalog_Factory_ProductCursorService()
    {
        return $this->services['pim_catalog.factory.product_cursor'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\ORM\Cursor\CursorFactory('Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\ORM\\Cursor\\Cursor', $this->get('doctrine.orm.default_entity_manager'), 1000);
    }

    /**
     * Gets the 'pim_catalog.helper.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Helper\LocaleHelper A Pim\Bundle\CatalogBundle\Helper\LocaleHelper instance.
     */
    protected function getPimCatalog_Helper_LocaleService()
    {
        return $this->services['pim_catalog.helper.locale'] = new \Pim\Bundle\CatalogBundle\Helper\LocaleHelper($this->get('pim_user.context.user'), $this->get('pim_catalog.manager.locale'));
    }

    /**
     * Gets the 'pim_catalog.manager.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\AssociationManager A Pim\Bundle\CatalogBundle\Manager\AssociationManager instance.
     */
    protected function getPimCatalog_Manager_AssociationService()
    {
        return $this->services['pim_catalog.manager.association'] = new \Pim\Bundle\CatalogBundle\Manager\AssociationManager($this->get('pim_catalog.repository.association'));
    }

    /**
     * Gets the 'pim_catalog.manager.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\AssociationTypeManager A Pim\Bundle\CatalogBundle\Manager\AssociationTypeManager instance.
     */
    protected function getPimCatalog_Manager_AssociationTypeService()
    {
        return $this->services['pim_catalog.manager.association_type'] = new \Pim\Bundle\CatalogBundle\Manager\AssociationTypeManager($this->get('pim_catalog.repository.association_type'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_catalog.manager.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\AttributeManager A Pim\Bundle\CatalogBundle\Manager\AttributeManager instance.
     */
    protected function getPimCatalog_Manager_AttributeService()
    {
        return $this->services['pim_catalog.manager.attribute'] = new \Pim\Bundle\CatalogBundle\Manager\AttributeManager('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Model\\Product', $this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.registry.attribute_type'));
    }

    /**
     * Gets the 'pim_catalog.manager.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\AttributeGroupManager A Pim\Bundle\CatalogBundle\Manager\AttributeGroupManager instance.
     */
    protected function getPimCatalog_Manager_AttributeGroupService()
    {
        return $this->services['pim_catalog.manager.attribute_group'] = new \Pim\Bundle\CatalogBundle\Manager\AttributeGroupManager($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.repository.attribute_group'));
    }

    /**
     * Gets the 'pim_catalog.manager.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\AttributeOptionManager A Pim\Bundle\CatalogBundle\Manager\AttributeOptionManager instance.
     */
    protected function getPimCatalog_Manager_AttributeOptionService()
    {
        return $this->services['pim_catalog.manager.attribute_option'] = new \Pim\Bundle\CatalogBundle\Manager\AttributeOptionManager($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOptionValue');
    }

    /**
     * Gets the 'pim_catalog.manager.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\CategoryManager A Pim\Bundle\CatalogBundle\Manager\CategoryManager instance.
     */
    protected function getPimCatalog_Manager_CategoryService()
    {
        return $this->services['pim_catalog.manager.category'] = new \Pim\Bundle\CatalogBundle\Manager\CategoryManager($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category');
    }

    /**
     * Gets the 'pim_catalog.manager.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ChannelManager A Pim\Bundle\CatalogBundle\Manager\ChannelManager instance.
     */
    protected function getPimCatalog_Manager_ChannelService()
    {
        return $this->services['pim_catalog.manager.channel'] = new \Pim\Bundle\CatalogBundle\Manager\ChannelManager($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.repository.channel'), $this->get('pim_catalog.manager.completeness'));
    }

    /**
     * Gets the 'pim_catalog.manager.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\CompletenessManager A Pim\Bundle\CatalogBundle\Manager\CompletenessManager instance.
     */
    protected function getPimCatalog_Manager_CompletenessService()
    {
        return $this->services['pim_catalog.manager.completeness'] = new \Pim\Bundle\CatalogBundle\Manager\CompletenessManager($this->get('pim_catalog.repository.family'), $this->get('pim_catalog.repository.channel'), $this->get('pim_catalog.repository.locale'), $this->get('pim_catalog.doctrine.completeness_generator'), $this->get('validator'), 'Pim\\Bundle\\CatalogBundle\\Model\\Completeness');
    }

    /**
     * Gets the 'pim_catalog.manager.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\CurrencyManager A Pim\Bundle\CatalogBundle\Manager\CurrencyManager instance.
     */
    protected function getPimCatalog_Manager_CurrencyService()
    {
        return $this->services['pim_catalog.manager.currency'] = new \Pim\Bundle\CatalogBundle\Manager\CurrencyManager($this->get('pim_catalog.repository.currency'));
    }

    /**
     * Gets the 'pim_catalog.manager.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\FamilyManager A Pim\Bundle\CatalogBundle\Manager\FamilyManager instance.
     */
    protected function getPimCatalog_Manager_FamilyService()
    {
        return $this->services['pim_catalog.manager.family'] = new \Pim\Bundle\CatalogBundle\Manager\FamilyManager($this->get('pim_catalog.repository.family'), $this->get('pim_user.context.user'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_catalog.manager.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\GroupManager A Pim\Bundle\CatalogBundle\Manager\GroupManager instance.
     */
    protected function getPimCatalog_Manager_GroupService()
    {
        return $this->services['pim_catalog.manager.group'] = new \Pim\Bundle\CatalogBundle\Manager\GroupManager($this->get('doctrine'), $this->get('pim_catalog.repository.product'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\CatalogBundle\\Entity\\GroupType', 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_catalog.manager.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\LocaleManager A Pim\Bundle\CatalogBundle\Manager\LocaleManager instance.
     */
    protected function getPimCatalog_Manager_LocaleService()
    {
        return $this->services['pim_catalog.manager.locale'] = new \Pim\Bundle\CatalogBundle\Manager\LocaleManager($this->get('pim_catalog.repository.locale'));
    }

    /**
     * Gets the 'pim_catalog.manager.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\MediaManager A Pim\Bundle\CatalogBundle\Manager\MediaManager instance.
     */
    protected function getPimCatalog_Manager_MediaService()
    {
        return $this->services['pim_catalog.manager.media'] = new \Pim\Bundle\CatalogBundle\Manager\MediaManager($this->get('pim_filesystem'), (dirname(dirname(__DIR__)).'/uploads/product'), $this->get('pim_catalog.factory.media'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'pim_catalog.manager.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ProductManager A Pim\Bundle\CatalogBundle\Manager\ProductManager instance.
     */
    protected function getPimCatalog_Manager_ProductService()
    {
        $a = $this->get('pim_catalog.saver.product');

        return $this->services['pim_catalog.manager.product'] = new \Pim\Bundle\CatalogBundle\Manager\ProductManager(array('product_class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'product_value_class' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'attribute_class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute'), $this->get('doctrine.orm.default_entity_manager'), $a, $a, $this->get('event_dispatcher'), $this->get('pim_catalog.manager.media'), $this->get('pim_catalog.builder.product'), $this->get('pim_catalog.repository.product'), $this->get('pim_catalog.repository.association_type'), $this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.repository.attribute_option'));
    }

    /**
     * Gets the 'pim_catalog.manager.product_category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ProductCategoryManager A Pim\Bundle\CatalogBundle\Manager\ProductCategoryManager instance.
     */
    protected function getPimCatalog_Manager_ProductCategoryService()
    {
        return $this->services['pim_catalog.manager.product_category'] = new \Pim\Bundle\CatalogBundle\Manager\ProductCategoryManager($this->get('pim_catalog.repository.product_category'), $this->get('pim_catalog.repository.category'));
    }

    /**
     * Gets the 'pim_catalog.manager.product_mass_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ProductMassActionManager A Pim\Bundle\CatalogBundle\Manager\ProductMassActionManager instance.
     */
    protected function getPimCatalog_Manager_ProductMassActionService()
    {
        return $this->services['pim_catalog.manager.product_mass_action'] = new \Pim\Bundle\CatalogBundle\Manager\ProductMassActionManager($this->get('pim_catalog.repository.product_mass_action'), $this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_catalog.manager.product_template_media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\ProductTemplateMediaManager A Pim\Bundle\CatalogBundle\Manager\ProductTemplateMediaManager instance.
     */
    protected function getPimCatalog_Manager_ProductTemplateMediaService()
    {
        return $this->services['pim_catalog.manager.product_template_media'] = new \Pim\Bundle\CatalogBundle\Manager\ProductTemplateMediaManager($this->get('pim_catalog.manager.media'), $this->get('pim_serializer'));
    }

    /**
     * Gets the 'pim_catalog.query.filter.attribute_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\Filter\AttributeFilterDumper A Pim\Bundle\CatalogBundle\Query\Filter\AttributeFilterDumper instance.
     */
    protected function getPimCatalog_Query_Filter_AttributeDumperService()
    {
        return $this->services['pim_catalog.query.filter.attribute_dumper'] = new \Pim\Bundle\CatalogBundle\Query\Filter\AttributeFilterDumper($this->get('pim_catalog.query.filter.registry'), $this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_catalog.query.filter.field_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\Filter\FieldFilterDumper A Pim\Bundle\CatalogBundle\Query\Filter\FieldFilterDumper instance.
     */
    protected function getPimCatalog_Query_Filter_FieldDumperService()
    {
        return $this->services['pim_catalog.query.filter.field_dumper'] = new \Pim\Bundle\CatalogBundle\Query\Filter\FieldFilterDumper($this->get('pim_catalog.query.filter.registry'));
    }

    /**
     * Gets the 'pim_catalog.query.filter.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\Filter\FilterRegistry A Pim\Bundle\CatalogBundle\Query\Filter\FilterRegistry instance.
     */
    protected function getPimCatalog_Query_Filter_RegistryService()
    {
        $this->services['pim_catalog.query.filter.registry'] = $instance = new \Pim\Bundle\CatalogBundle\Query\Filter\FilterRegistry($this->get('pim_catalog.repository.attribute'));

        $instance->register($this->get('pim_catalog.doctrine.query.filter.category'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.boolean'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.completeness'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.date'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.metric'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.number'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.option'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.options'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.price'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.product_id'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.string'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.identifier'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.media'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.family'));
        $instance->register($this->get('pim_catalog.doctrine.query.filter.groups'));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.query.product_query_builder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\ProductQueryBuilderFactory A Pim\Bundle\CatalogBundle\Query\ProductQueryBuilderFactory instance.
     */
    protected function getPimCatalog_Query_ProductQueryBuilderFactoryService()
    {
        return $this->services['pim_catalog.query.product_query_builder_factory'] = new \Pim\Bundle\CatalogBundle\Query\ProductQueryBuilderFactory('Pim\\Bundle\\CatalogBundle\\Query\\ProductQueryBuilder', $this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product', $this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.query.filter.registry'), $this->get('pim_catalog.query.sorter.registry'), $this->get('pim_catalog.factory.product_cursor'));
    }

    /**
     * Gets the 'pim_catalog.query.sorter.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Query\Sorter\SorterRegistry A Pim\Bundle\CatalogBundle\Query\Sorter\SorterRegistry instance.
     */
    protected function getPimCatalog_Query_Sorter_RegistryService()
    {
        $this->services['pim_catalog.query.sorter.registry'] = $instance = new \Pim\Bundle\CatalogBundle\Query\Sorter\SorterRegistry();

        $instance->register($this->get('pim_catalog.doctrine.query.sorter.completeness'));
        $instance->register($this->get('pim_catalog.doctrine.query.sorter.family'));
        $instance->register($this->get('pim_catalog.doctrine.query.sorter.in_group'));
        $instance->register($this->get('pim_catalog.doctrine.query.sorter.entity'));
        $instance->register($this->get('pim_catalog.doctrine.query.sorter.is_associated'));
        $instance->register($this->get('pim_catalog.doctrine.query.sorter.base'));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.registry.attribute_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\AttributeType\AttributeTypeRegistry A Pim\Bundle\CatalogBundle\AttributeType\AttributeTypeRegistry instance.
     */
    protected function getPimCatalog_Registry_AttributeTypeService()
    {
        $this->services['pim_catalog.registry.attribute_type'] = $instance = new \Pim\Bundle\CatalogBundle\AttributeType\AttributeTypeRegistry();

        $instance->register('pim_catalog_identifier', $this->get('pim_catalog.attributetype.identifier'));
        $instance->register('pim_catalog_text', $this->get('pim_catalog.attributetype.text'));
        $instance->register('pim_catalog_textarea', $this->get('pim_catalog.attributetype.textarea'));
        $instance->register('pim_catalog_multiselect', $this->get('pim_catalog.attributetype.multiselect'));
        $instance->register('pim_catalog_simpleselect', $this->get('pim_catalog.attributetype.simpleselect'));
        $instance->register('pim_catalog_price_collection', $this->get('pim_catalog.attributetype.pricecollection'));
        $instance->register('pim_catalog_number', $this->get('pim_catalog.attributetype.number'));
        $instance->register('pim_catalog_boolean', $this->get('pim_catalog.attributetype.boolean'));
        $instance->register('pim_catalog_date', $this->get('pim_catalog.attributetype.date'));
        $instance->register('pim_catalog_file', $this->get('pim_catalog.attributetype.file'));
        $instance->register('pim_catalog_image', $this->get('pim_catalog.attributetype.image'));
        $instance->register('pim_catalog_metric', $this->get('pim_catalog.attributetype.metric'));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.remover.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AssociationTypeRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AssociationTypeRemover instance.
     */
    protected function getPimCatalog_Remover_AssociationTypeService()
    {
        return $this->services['pim_catalog.remover.association_type'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AssociationTypeRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.remover.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeRemover instance.
     */
    protected function getPimCatalog_Remover_AttributeService()
    {
        return $this->services['pim_catalog.remover.attribute'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'), $this->get('pim_catalog.builder.product_template'), $this->get('pim_catalog.repository.product_template'));
    }

    /**
     * Gets the 'pim_catalog.remover.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover instance.
     */
    protected function getPimCatalog_Remover_AttributeGroupService()
    {
        return $this->services['pim_catalog.remover.attribute_group'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup');
    }

    /**
     * Gets the 'pim_catalog.remover.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeOptionRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeOptionRemover instance.
     */
    protected function getPimCatalog_Remover_AttributeOptionService()
    {
        return $this->services['pim_catalog.remover.attribute_option'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\AttributeOptionRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.remover.base_options_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemovingOptionsResolver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemovingOptionsResolver instance.
     */
    protected function getPimCatalog_Remover_BaseOptionsResolverService()
    {
        return $this->services['pim_catalog.remover.base_options_resolver'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemovingOptionsResolver();
    }

    /**
     * Gets the 'pim_catalog.remover.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\CategoryRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\CategoryRemover instance.
     */
    protected function getPimCatalog_Remover_CategoryService()
    {
        return $this->services['pim_catalog.remover.category'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\CategoryRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.remover.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover instance.
     */
    protected function getPimCatalog_Remover_ChannelService()
    {
        return $this->services['pim_catalog.remover.channel'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel');
    }

    /**
     * Gets the 'pim_catalog.remover.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\FamilyRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\FamilyRemover instance.
     */
    protected function getPimCatalog_Remover_FamilyService()
    {
        return $this->services['pim_catalog.remover.family'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\FamilyRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.remover.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\GroupRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\GroupRemover instance.
     */
    protected function getPimCatalog_Remover_GroupService()
    {
        return $this->services['pim_catalog.remover.group'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\GroupRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.remover.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover instance.
     */
    protected function getPimCatalog_Remover_GroupTypeService()
    {
        return $this->services['pim_catalog.remover.group_type'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Remover\BaseRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Entity\\GroupType');
    }

    /**
     * Gets the 'pim_catalog.remover.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\ProductRemover A Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\ProductRemover instance.
     */
    protected function getPimCatalog_Remover_ProductService()
    {
        return $this->services['pim_catalog.remover.product'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Remover\ProductRemover($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.remover.base_options_resolver'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_catalog.repository.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\AssociationRepository A Pim\Bundle\CatalogBundle\Doctrine\ORM\AssociationRepository instance.
     */
    protected function getPimCatalog_Repository_AssociationService()
    {
        return $this->services['pim_catalog.repository.association'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Model\\Association');
    }

    /**
     * Gets the 'pim_catalog.repository.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\AssociationTypeRepository A Pim\Bundle\CatalogBundle\Entity\Repository\AssociationTypeRepository instance.
     */
    protected function getPimCatalog_Repository_AssociationTypeService()
    {
        return $this->services['pim_catalog.repository.association_type'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType');
    }

    /**
     * Gets the 'pim_catalog.repository.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\AttributeRepository A Pim\Bundle\CatalogBundle\Entity\Repository\AttributeRepository instance.
     */
    protected function getPimCatalog_Repository_AttributeService()
    {
        return $this->services['pim_catalog.repository.attribute'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_catalog.repository.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\AttributeGroupRepository A Pim\Bundle\CatalogBundle\Entity\Repository\AttributeGroupRepository instance.
     */
    protected function getPimCatalog_Repository_AttributeGroupService()
    {
        return $this->services['pim_catalog.repository.attribute_group'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup');
    }

    /**
     * Gets the 'pim_catalog.repository.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\AttributeOptionRepository A Pim\Bundle\CatalogBundle\Entity\Repository\AttributeOptionRepository instance.
     */
    protected function getPimCatalog_Repository_AttributeOptionService()
    {
        return $this->services['pim_catalog.repository.attribute_option'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
    }

    /**
     * Gets the 'pim_catalog.repository.attribute_requirement' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\EntityRepository A Doctrine\ORM\EntityRepository instance.
     */
    protected function getPimCatalog_Repository_AttributeRequirementService()
    {
        return $this->services['pim_catalog.repository.attribute_requirement'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_catalog.repository.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\CategoryRepository A Pim\Bundle\CatalogBundle\Entity\Repository\CategoryRepository instance.
     */
    protected function getPimCatalog_Repository_CategoryService()
    {
        return $this->services['pim_catalog.repository.category'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Category');
    }

    /**
     * Gets the 'pim_catalog.repository.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\ChannelRepository A Pim\Bundle\CatalogBundle\Entity\Repository\ChannelRepository instance.
     */
    protected function getPimCatalog_Repository_ChannelService()
    {
        return $this->services['pim_catalog.repository.channel'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Channel');
    }

    /**
     * Gets the 'pim_catalog.repository.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessRepository A Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessRepository instance.
     */
    protected function getPimCatalog_Repository_CompletenessService()
    {
        return $this->services['pim_catalog.repository.completeness'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\CompletenessRepository($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.repository.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\CurrencyRepository A Pim\Bundle\CatalogBundle\Entity\Repository\CurrencyRepository instance.
     */
    protected function getPimCatalog_Repository_CurrencyService()
    {
        return $this->services['pim_catalog.repository.currency'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Currency');
    }

    /**
     * Gets the 'pim_catalog.repository.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\FamilyRepository A Pim\Bundle\CatalogBundle\Entity\Repository\FamilyRepository instance.
     */
    protected function getPimCatalog_Repository_FamilyService()
    {
        return $this->services['pim_catalog.repository.family'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Family');
    }

    /**
     * Gets the 'pim_catalog.repository.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\GroupRepository A Pim\Bundle\CatalogBundle\Entity\Repository\GroupRepository instance.
     */
    protected function getPimCatalog_Repository_GroupService()
    {
        return $this->services['pim_catalog.repository.group'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_catalog.repository.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\GroupTypeRepository A Pim\Bundle\CatalogBundle\Entity\Repository\GroupTypeRepository instance.
     */
    protected function getPimCatalog_Repository_GroupTypeService()
    {
        return $this->services['pim_catalog.repository.group_type'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\GroupType');
    }

    /**
     * Gets the 'pim_catalog.repository.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\LocaleRepository A Pim\Bundle\CatalogBundle\Entity\Repository\LocaleRepository instance.
     */
    protected function getPimCatalog_Repository_LocaleService()
    {
        return $this->services['pim_catalog.repository.locale'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\Locale');
    }

    /**
     * Gets the 'pim_catalog.repository.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductRepository A Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductRepository instance.
     */
    protected function getPimCatalog_Repository_ProductService()
    {
        $this->services['pim_catalog.repository.product'] = $instance = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Model\\Product');

        $instance->setProductQueryBuilderFactory($this->get('pim_catalog.query.product_query_builder_factory'));
        $instance->setAttributeRepository($this->get('pim_catalog.repository.attribute'));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.repository.product_category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductCategoryRepository A Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductCategoryRepository instance.
     */
    protected function getPimCatalog_Repository_ProductCategoryService()
    {
        return $this->services['pim_catalog.repository.product_category'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductCategoryRepository($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.repository.product_mass_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductMassActionRepository A Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductMassActionRepository instance.
     */
    protected function getPimCatalog_Repository_ProductMassActionService()
    {
        return $this->services['pim_catalog.repository.product_mass_action'] = new \Pim\Bundle\CatalogBundle\Doctrine\ORM\ProductMassActionRepository($this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.repository.product_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Entity\Repository\ProductTemplateRepository A Pim\Bundle\CatalogBundle\Entity\Repository\ProductTemplateRepository instance.
     */
    protected function getPimCatalog_Repository_ProductTemplateService()
    {
        return $this->services['pim_catalog.repository.product_template'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate');
    }

    /**
     * Gets the 'pim_catalog.repository.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\EntityRepository A Doctrine\ORM\EntityRepository instance.
     */
    protected function getPimCatalog_Repository_ProductValueService()
    {
        return $this->services['pim_catalog.repository.product_value'] = $this->get('akeneo_storage_utils.doctrine.smart_manager_registry')->getRepository('Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_catalog.resolver.variant_group_attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Manager\VariantGroupAttributesResolver A Pim\Bundle\CatalogBundle\Manager\VariantGroupAttributesResolver instance.
     */
    protected function getPimCatalog_Resolver_VariantGroupAttributesService()
    {
        return $this->services['pim_catalog.resolver.variant_group_attributes'] = new \Pim\Bundle\CatalogBundle\Manager\VariantGroupAttributesResolver($this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_catalog.saver.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_AssociationTypeService()
    {
        return $this->services['pim_catalog.saver.association_type'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\AssociationTypeInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_AttributeService()
    {
        return $this->services['pim_catalog.saver.attribute'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_AttributeGroupService()
    {
        return $this->services['pim_catalog.saver.attribute_group'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeGroupInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_AttributeOptionService()
    {
        return $this->services['pim_catalog.saver.attribute_option'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeOptionInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.base_options_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSavingOptionsResolver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSavingOptionsResolver instance.
     */
    protected function getPimCatalog_Saver_BaseOptionsResolverService()
    {
        return $this->services['pim_catalog.saver.base_options_resolver'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSavingOptionsResolver();
    }

    /**
     * Gets the 'pim_catalog.saver.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_CategoryService()
    {
        return $this->services['pim_catalog.saver.category'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\CategoryInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ChannelSaver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ChannelSaver instance.
     */
    protected function getPimCatalog_Saver_ChannelService()
    {
        return $this->services['pim_catalog.saver.channel'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ChannelSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.manager.completeness'), $this->get('pim_catalog.saver.completeness_options_resolver'));
    }

    /**
     * Gets the 'pim_catalog.saver.completeness_options_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\CompletenessSavingOptionsResolver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\CompletenessSavingOptionsResolver instance.
     */
    protected function getPimCatalog_Saver_CompletenessOptionsResolverService()
    {
        return $this->services['pim_catalog.saver.completeness_options_resolver'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\CompletenessSavingOptionsResolver();
    }

    /**
     * Gets the 'pim_catalog.saver.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_CurrencyService()
    {
        return $this->services['pim_catalog.saver.currency'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\CurrencyInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\FamilySaver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\FamilySaver instance.
     */
    protected function getPimCatalog_Saver_FamilyService()
    {
        return $this->services['pim_catalog.saver.family'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\FamilySaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.manager.completeness'), $this->get('pim_catalog.saver.completeness_options_resolver'));
    }

    /**
     * Gets the 'pim_catalog.saver.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSaver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSaver instance.
     */
    protected function getPimCatalog_Saver_GroupService()
    {
        return $this->services['pim_catalog.saver.group'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.product'), $this->get('pim_catalog.manager.product_template_media'), $this->get('pim_catalog.applier.product_template'), $this->get('pim_versioning.context.version'), $this->get('pim_catalog.saver.group_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_catalog.saver.group_options_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSavingOptionsResolver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSavingOptionsResolver instance.
     */
    protected function getPimCatalog_Saver_GroupOptionsResolverService()
    {
        return $this->services['pim_catalog.saver.group_options_resolver'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSavingOptionsResolver();
    }

    /**
     * Gets the 'pim_catalog.saver.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver A Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver instance.
     */
    protected function getPimCatalog_Saver_GroupTypeService()
    {
        return $this->services['pim_catalog.saver.group_type'] = new \Akeneo\Bundle\StorageUtilsBundle\Doctrine\Common\Saver\BaseSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.saver.base_options_resolver'), 'Pim\\Bundle\\CatalogBundle\\Model\\GroupTypeInterface');
    }

    /**
     * Gets the 'pim_catalog.saver.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSaver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSaver instance.
     */
    protected function getPimCatalog_Saver_ProductService()
    {
        return $this->services['pim_catalog.saver.product'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSaver($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_catalog.manager.completeness'), $this->get('pim_catalog.saver.product_options_resolver'));
    }

    /**
     * Gets the 'pim_catalog.saver.product_options_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSavingOptionsResolver A Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSavingOptionsResolver instance.
     */
    protected function getPimCatalog_Saver_ProductOptionsResolverService()
    {
        return $this->services['pim_catalog.saver.product_options_resolver'] = new \Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\ProductSavingOptionsResolver();
    }

    /**
     * Gets the 'pim_catalog.updater.copier.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Updater\Copier\CopierRegistry A Pim\Bundle\CatalogBundle\Updater\Copier\CopierRegistry instance.
     */
    protected function getPimCatalog_Updater_Copier_RegistryService()
    {
        $a = $this->get('pim_catalog.builder.product');
        $b = $this->get('pim_catalog.validator.helper.attribute');
        $c = $this->get('pim_catalog.manager.media');
        $d = $this->get('pim_catalog.factory.media');

        $this->services['pim_catalog.updater.copier.registry'] = $instance = new \Pim\Bundle\CatalogBundle\Updater\Copier\CopierRegistry();

        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_text'), array(0 => 'pim_catalog_text')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\MediaValueCopier($a, $b, $c, $d, array(0 => 'pim_catalog_image'), array(0 => 'pim_catalog_image')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\MediaValueCopier($a, $b, $c, $d, array(0 => 'pim_catalog_file'), array(0 => 'pim_catalog_file')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_textarea'), array(0 => 'pim_catalog_textarea')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_boolean'), array(0 => 'pim_catalog_boolean')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_number'), array(0 => 'pim_catalog_number')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_date'), array(0 => 'pim_catalog_date')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\MetricValueCopier($a, $b, $this->get('pim_catalog.factory.metric'), array(0 => 'pim_catalog_metric'), array(0 => 'pim_catalog_metric')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\BaseValueCopier($a, $b, array(0 => 'pim_catalog_simpleselect'), array(0 => 'pim_catalog_simpleselect')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\MultiSelectValueCopier($a, $b, array(0 => 'pim_catalog_multiselect'), array(0 => 'pim_catalog_multiselect')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Copier\PriceCollectionValueCopier($a, $b, array(0 => 'pim_catalog_price_collection'), array(0 => 'pim_catalog_price_collection')));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.updater.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Updater\ProductUpdater A Pim\Bundle\CatalogBundle\Updater\ProductUpdater instance.
     */
    protected function getPimCatalog_Updater_ProductService()
    {
        return $this->services['pim_catalog.updater.product'] = new \Pim\Bundle\CatalogBundle\Updater\ProductUpdater($this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.updater.setter.registry'), $this->get('pim_catalog.updater.copier.registry'));
    }

    /**
     * Gets the 'pim_catalog.updater.product_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Updater\ProductTemplateUpdater A Pim\Bundle\CatalogBundle\Updater\ProductTemplateUpdater instance.
     */
    protected function getPimCatalog_Updater_ProductTemplateService()
    {
        return $this->services['pim_catalog.updater.product_template'] = new \Pim\Bundle\CatalogBundle\Updater\ProductTemplateUpdater($this->get('pim_catalog.updater.product'));
    }

    /**
     * Gets the 'pim_catalog.updater.setter.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Updater\Setter\SetterRegistry A Pim\Bundle\CatalogBundle\Updater\Setter\SetterRegistry instance.
     */
    protected function getPimCatalog_Updater_Setter_RegistryService()
    {
        $a = $this->get('pim_catalog.builder.product');
        $b = $this->get('pim_catalog.validator.helper.attribute');
        $c = $this->get('pim_catalog.repository.attribute_option');

        $this->services['pim_catalog.updater.setter.registry'] = $instance = new \Pim\Bundle\CatalogBundle\Updater\Setter\SetterRegistry($this->get('pim_catalog.repository.attribute'));

        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\TextValueSetter($a, $b, array(0 => 'pim_catalog_text', 1 => 'pim_catalog_textarea')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\MetricValueSetter($a, $b, $this->get('pim_catalog.factory.metric'), $this->get('akeneo_measure.manager'), array(0 => 'pim_catalog_metric')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\BooleanValueSetter($a, $b, array(0 => 'pim_catalog_boolean')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\DateValueSetter($a, $b, array(0 => 'pim_catalog_date')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\NumberValueSetter($a, $b, array(0 => 'pim_catalog_number')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\MultiSelectValueSetter($a, $b, $c, array(0 => 'pim_catalog_multiselect')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\PriceCollectionValueSetter($a, $b, $this->get('pim_catalog.manager.currency'), array(0 => 'pim_catalog_price_collection')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\SimpleSelectValueSetter($a, $b, $c, array(0 => 'pim_catalog_simpleselect')));
        $instance->register(new \Pim\Bundle\CatalogBundle\Updater\Setter\MediaValueSetter($a, $b, $this->get('pim_catalog.manager.media'), $this->get('pim_catalog.factory.media'), array(0 => 'pim_catalog_file', 1 => 'pim_catalog_image'), (dirname(dirname(__DIR__)).'/uploads/product')));

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.has_variant_axes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\HasVariantAxesValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\HasVariantAxesValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_HasVariantAxesService()
    {
        return $this->services['pim_catalog.validator.constraint.has_variant_axes'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\HasVariantAxesValidator();
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.immutable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\ImmutableValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\ImmutableValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_ImmutableService()
    {
        return $this->services['pim_catalog.validator.constraint.immutable'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\ImmutableValidator($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.single_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\SingleIdentifierAttributeValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\SingleIdentifierAttributeValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_SingleIdentifierService()
    {
        return $this->services['pim_catalog.validator.constraint.single_identifier'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\SingleIdentifierAttributeValidator($this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.unique_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueValueValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueValueValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_UniqueValueService()
    {
        return $this->services['pim_catalog.validator.constraint.unique_value'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueValueValidator($this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.unique_variant_axis' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantAxisValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantAxisValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_UniqueVariantAxisService()
    {
        return $this->services['pim_catalog.validator.constraint.unique_variant_axis'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantAxisValidator($this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.unique_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantGroupValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantGroupValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_UniqueVariantGroupService()
    {
        return $this->services['pim_catalog.validator.constraint.unique_variant_group'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\UniqueVariantGroupValidator();
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.valid_metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\ValidMetricValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\ValidMetricValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_ValidMetricService()
    {
        return $this->services['pim_catalog.validator.constraint.valid_metric'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\ValidMetricValidator($this->get('property_accessor'), array('measures_config' => array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mm²'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4515999999999997E-10)), 'symbol' => 'sq mil'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064515999999999998)), 'symbol' => 'in²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.092903040000000006)), 'symbol' => 'ft²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612735999999999)), 'symbol' => 'yd²'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.8899999999999)), 'symbol' => 'arpent'), 'ACRE' => array('convert' => array(0 => array('mul' => 4046.8564219999998)), 'symbol' => 'A'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726000000002)), 'symbol' => 'fur²'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.1103360001)), 'symbol' => 'mi²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Decibel' => array('standard' => 'DECIBEL', 'units' => array('DECIBEL' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'd'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'))), 'Length' => array('standard' => 'METER', 'units' => array('MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dm'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'MIL' => array('convert' => array(0 => array('mul' => 2.5400000000000001E-5)), 'symbol' => 'mil'), 'INCH' => array('convert' => array(0 => array('mul' => 0.025399999999999999)), 'symbol' => 'in'), 'FEET' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ft'), 'YARD' => array('convert' => array(0 => array('mul' => 0.91439999999999999)), 'symbol' => 'yd'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.116800000000001)), 'symbol' => 'ch'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.16800000000001)), 'symbol' => 'fur'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.3440000000001)), 'symbol' => 'mi'))), 'Power' => array('standard' => 'WATT', 'units' => array('WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'))), 'Voltage' => array('standard' => 'VOLT', 'units' => array('MILLIVOLT' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mV'), 'CENTIVOLT' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cV'), 'DECIVOLT' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dV'), 'VOLT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'V'), 'DEKAVOLT' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daV'), 'HECTOVOLT' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hV'), 'KILOVOLT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kV'))), 'Intensity' => array('standard' => 'AMPERE', 'units' => array('MILLIAMPERE' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mA'), 'CENTIAMPERE' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cA'), 'DECIAMPERE' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dA'), 'AMPERE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'A'), 'DEKAMPERE' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daA'), 'HECTOAMPERE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hA'), 'KILOAMPERE' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kA'))), 'Resistance' => array('standard' => 'OHM', 'units' => array('MILLIOHM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mΩ'), 'CENTIOHM' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cΩ'), 'DECIOHM' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dΩ'), 'OHM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ω'), 'DEKAOHM' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daΩ'), 'HECTOHM' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hΩ'), 'KILOHM' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kΩ'), 'MEGOHM' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MΩ'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.30480000000000002), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.3440000000001), 1 => array('div' => 3600)), 'symbol' => 'midivh'))), 'ElectricCharge' => array('standard' => 'AMPEREHOUR', 'units' => array('MILLIAMPEREHOUR' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mAh'), 'AMPEREHOUR' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ah'), 'MILLICOULOMB' => array('convert' => array(0 => array('mul' => 3600000)), 'symbol' => 'mC'), 'CENTIOULOMB' => array('convert' => array(0 => array('mul' => 360000)), 'symbol' => 'cC'), 'DECICOULOMB' => array('convert' => array(0 => array('mul' => 36000)), 'symbol' => 'dC'), 'COULOMB' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'C'), 'DEKACOULOMB' => array('convert' => array(0 => array('mul' => 360)), 'symbol' => 'daC'), 'HECTOCOULOMB' => array('convert' => array(0 => array('mul' => 36)), 'symbol' => 'hC'), 'KILOCOULOMB' => array('convert' => array(0 => array('mul' => 3.6000000000000001)), 'symbol' => 'kC'))), 'Duration' => array('standard' => 'SECOND', 'units' => array('MILLISECOND' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'ms'), 'SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 's'), 'MINUTE' => array('convert' => array(0 => array('mul' => 60)), 'symbol' => 'm'), 'HOUR' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'h'), 'DAY' => array('convert' => array(0 => array('mul' => 86400)), 'symbol' => 'd'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.14999999999998)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.14999999999998)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.14999999999998)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-9)), 'symbol' => 'mm³'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'cm³'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'ml'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-5)), 'symbol' => 'cl'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dm³'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'), 'BARREL' => array('convert' => array(0 => array('mul' => 0.16365924000000001)), 'symbol' => 'bbl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.5411915900000004), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118000000001), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.76455486100000003)), 'symbol' => 'yd³'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('MILLIGRAM' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mg'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.4798909999999995E-5)), 'symbol' => 'gr'), 'DENIER' => array('convert' => array(0 => array('mul' => 0.0012750000000000001)), 'symbol' => 'denier'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.030589999999999999)), 'symbol' => 'once'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.48949999999999999)), 'symbol' => 'livre'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237000000002), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237000000002)), 'symbol' => 'lb'))))));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.variant_group_axis' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupAxisValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupAxisValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_VariantGroupAxisService()
    {
        return $this->services['pim_catalog.validator.constraint.variant_group_axis'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupAxisValidator();
    }

    /**
     * Gets the 'pim_catalog.validator.constraint.variant_group_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupValuesValidator A Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupValuesValidator instance.
     */
    protected function getPimCatalog_Validator_Constraint_VariantGroupValuesService()
    {
        return $this->services['pim_catalog.validator.constraint.variant_group_values'] = new \Pim\Bundle\CatalogBundle\Validator\Constraints\VariantGroupValuesValidator($this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_comment.builder.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CommentBundle\Builder\CommentBuilder A Pim\Bundle\CommentBundle\Builder\CommentBuilder instance.
     */
    protected function getPimComment_Builder_CommentService()
    {
        return $this->services['pim_comment.builder.comment'] = new \Pim\Bundle\CommentBundle\Builder\CommentBuilder('Pim\\Bundle\\CommentBundle\\Entity\\Comment');
    }

    /**
     * Gets the 'pim_comment.controller.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CommentBundle\Controller\CommentController A Pim\Bundle\CommentBundle\Controller\CommentController instance.
     * 
     * @throws InactiveScopeException when the 'pim_comment.controller.comment' service is requested while the 'request' scope is not active
     */
    protected function getPimComment_Controller_CommentService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_comment.controller.comment', 'request');
        }

        return $this->services['pim_comment.controller.comment'] = $this->scopedServices['request']['pim_comment.controller.comment'] = new \Pim\Bundle\CommentBundle\Controller\CommentController($this->get('templating'), $this->get('security.context'), $this->get('form.factory'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_comment.manager.comment'), $this->get('pim_comment.builder.comment'), 'Pim\\Bundle\\CommentBundle\\Entity\\Comment');
    }

    /**
     * Gets the 'pim_comment.form.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimComment_Form_AttributeGroupService()
    {
        return $this->services['pim_comment.form.attribute_group'] = $this->get('form.factory')->createNamed('pim_comment_comment_form', 'pim_comment_comment');
    }

    /**
     * Gets the 'pim_comment.form.type.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CommentBundle\Form\Type\CommentType A Pim\Bundle\CommentBundle\Form\Type\CommentType instance.
     */
    protected function getPimComment_Form_Type_CommentService()
    {
        return $this->services['pim_comment.form.type.comment'] = new \Pim\Bundle\CommentBundle\Form\Type\CommentType($this->get('pim_comment.repository.comment'), $this->get('translator.default'), 'Pim\\Bundle\\CommentBundle\\Entity\\Comment');
    }

    /**
     * Gets the 'pim_comment.manager.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CommentBundle\Manager\CommentManager A Pim\Bundle\CommentBundle\Manager\CommentManager instance.
     */
    protected function getPimComment_Manager_CommentService()
    {
        return $this->services['pim_comment.manager.comment'] = new \Pim\Bundle\CommentBundle\Manager\CommentManager($this->get('pim_comment.repository.comment'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_comment.repository.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\CommentBundle\Repository\CommentRepository A Pim\Bundle\CommentBundle\Repository\CommentRepository instance.
     */
    protected function getPimComment_Repository_CommentService()
    {
        return $this->services['pim_comment.repository.comment'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\CommentBundle\\Entity\\Comment');
    }

    /**
     * Gets the 'pim_comment.view_element.product.tab.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimComment_ViewElement_Product_Tab_CommentService()
    {
        $this->services['pim_comment.view_element.product.tab.comment'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_comment.product.tab.comment', 'PimCommentBundle:Product:Tab/comment.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_product_comment'));

        return $instance;
    }

    /**
     * Gets the 'pim_dashboard.controller.widget' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DashboardBundle\Controller\WidgetController A Pim\Bundle\DashboardBundle\Controller\WidgetController instance.
     * 
     * @throws InactiveScopeException when the 'pim_dashboard.controller.widget' service is requested while the 'request' scope is not active
     */
    protected function getPimDashboard_Controller_WidgetService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_dashboard.controller.widget', 'request');
        }

        return $this->services['pim_dashboard.controller.widget'] = $this->scopedServices['request']['pim_dashboard.controller.widget'] = new \Pim\Bundle\DashboardBundle\Controller\WidgetController($this->get('pim_dashboard.widget.registry'), $this->get('templating'));
    }

    /**
     * Gets the 'pim_dashboard.widget.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DashboardBundle\Widget\CompletenessWidget A Pim\Bundle\DashboardBundle\Widget\CompletenessWidget instance.
     */
    protected function getPimDashboard_Widget_CompletenessService()
    {
        return $this->services['pim_dashboard.widget.completeness'] = new \Pim\Bundle\DashboardBundle\Widget\CompletenessWidget($this->get('pim_catalog.repository.completeness'), $this->get('pim_catalog.helper.locale'));
    }

    /**
     * Gets the 'pim_dashboard.widget.last_operations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DashboardBundle\Widget\LastOperationsWidget A Pim\Bundle\DashboardBundle\Widget\LastOperationsWidget instance.
     */
    protected function getPimDashboard_Widget_LastOperationsService()
    {
        return $this->services['pim_dashboard.widget.last_operations'] = new \Pim\Bundle\DashboardBundle\Widget\LastOperationsWidget($this->get('pim_import_export.manager.job_execution'), $this->get('translator.default'));
    }

    /**
     * Gets the 'pim_dashboard.widget.links' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DashboardBundle\Widget\LinksWidget A Pim\Bundle\DashboardBundle\Widget\LinksWidget instance.
     */
    protected function getPimDashboard_Widget_LinksService()
    {
        return $this->services['pim_dashboard.widget.links'] = new \Pim\Bundle\DashboardBundle\Widget\LinksWidget();
    }

    /**
     * Gets the 'pim_dashboard.widget.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DashboardBundle\Widget\Registry A Pim\Bundle\DashboardBundle\Widget\Registry instance.
     */
    protected function getPimDashboard_Widget_RegistryService()
    {
        $this->services['pim_dashboard.widget.registry'] = $instance = new \Pim\Bundle\DashboardBundle\Widget\Registry();

        $instance->add($this->get('pim_dashboard.widget.links'), 10);
        $instance->add($this->get('pim_dashboard.widget.completeness'), 20);
        $instance->add($this->get('pim_dashboard.widget.last_operations'), 30);

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.controller.datagrid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Controller\DatagridController A Pim\Bundle\DataGridBundle\Controller\DatagridController instance.
     * 
     * @throws InactiveScopeException when the 'pim_datagrid.controller.datagrid' service is requested while the 'request' scope is not active
     */
    protected function getPimDatagrid_Controller_DatagridService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_datagrid.controller.datagrid', 'request');
        }

        return $this->services['pim_datagrid.controller.datagrid'] = $this->scopedServices['request']['pim_datagrid.controller.datagrid'] = new \Pim\Bundle\DataGridBundle\Controller\DatagridController($this->get('templating'));
    }

    /**
     * Gets the 'pim_datagrid.controller.datagrid_view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Controller\DatagridViewController A Pim\Bundle\DataGridBundle\Controller\DatagridViewController instance.
     * 
     * @throws InactiveScopeException when the 'pim_datagrid.controller.datagrid_view' service is requested while the 'request' scope is not active
     */
    protected function getPimDatagrid_Controller_DatagridViewService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_datagrid.controller.datagrid_view', 'request');
        }

        return $this->services['pim_datagrid.controller.datagrid_view'] = $this->scopedServices['request']['pim_datagrid.controller.datagrid_view'] = new \Pim\Bundle\DataGridBundle\Controller\DatagridViewController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_datagrid.manager.datagrid_view'));
    }

    /**
     * Gets the 'pim_datagrid.controller.export' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Controller\ExportController A Pim\Bundle\DataGridBundle\Controller\ExportController instance.
     * 
     * @throws InactiveScopeException when the 'pim_datagrid.controller.export' service is requested while the 'request' scope is not active
     */
    protected function getPimDatagrid_Controller_ExportService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_datagrid.controller.export', 'request');
        }

        return $this->services['pim_datagrid.controller.export'] = $this->scopedServices['request']['pim_datagrid.controller.export'] = new \Pim\Bundle\DataGridBundle\Controller\ExportController($this->get('request'), $this->get('pim_datagrid.extension.mass_action.dispatcher'), $this->get('pim_serializer'));
    }

    /**
     * Gets the 'pim_datagrid.controller.mass_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Controller\MassActionController A Pim\Bundle\DataGridBundle\Controller\MassActionController instance.
     * 
     * @throws InactiveScopeException when the 'pim_datagrid.controller.mass_action' service is requested while the 'request' scope is not active
     */
    protected function getPimDatagrid_Controller_MassActionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_datagrid.controller.mass_action', 'request');
        }

        return $this->services['pim_datagrid.controller.mass_action'] = $this->scopedServices['request']['pim_datagrid.controller.mass_action'] = new \Pim\Bundle\DataGridBundle\Controller\MassActionController($this->get('request'), $this->get('pim_datagrid.extension.mass_action.dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.controller.product_export' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Controller\ProductExportController A Pim\Bundle\DataGridBundle\Controller\ProductExportController instance.
     * 
     * @throws InactiveScopeException when the 'pim_datagrid.controller.product_export' service is requested while the 'request' scope is not active
     */
    protected function getPimDatagrid_Controller_ProductExportService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_datagrid.controller.product_export', 'request');
        }

        return $this->services['pim_datagrid.controller.product_export'] = $this->scopedServices['request']['pim_datagrid.controller.product_export'] = new \Pim\Bundle\DataGridBundle\Controller\ProductExportController($this->get('request'), $this->get('pim_datagrid.extension.mass_action.dispatcher'), $this->get('pim_serializer'), $this->get('pim_catalog.repository.product'), $this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.context.catalog'), $this->get('pim_datagrid.extension.mass_action.util.product_fields_builder'));
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.columns_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\ColumnsConfigurator A Pim\Bundle\DataGridBundle\Datagrid\Product\ColumnsConfigurator instance.
     */
    protected function getPimDatagrid_Datagrid_Product_ColumnsConfiguratorService()
    {
        return $this->services['pim_datagrid.datagrid.product.columns_configurator'] = new \Pim\Bundle\DataGridBundle\Datagrid\Product\ColumnsConfigurator($this->get('pim_datagrid.datagrid.product.configuration_registry'));
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.configuration_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\ConfigurationRegistry A Pim\Bundle\DataGridBundle\Datagrid\Product\ConfigurationRegistry instance.
     */
    protected function getPimDatagrid_Datagrid_Product_ConfigurationRegistryService()
    {
        $this->services['pim_datagrid.datagrid.product.configuration_registry'] = $instance = new \Pim\Bundle\DataGridBundle\Datagrid\Product\ConfigurationRegistry();

        $instance->setConfigurations(array('pim_catalog_identifier' => array('column' => array('type' => 'product_value_field', 'selector' => 'product_value_base'), 'filter' => array('type' => 'product_value_string', 'ftype' => 'string', 'options' => array('field_options' => array('attr' => array('choice_list' => true)))), 'sorter' => 'product_value'), 'pim_catalog_text' => array('column' => array('type' => 'product_value_field', 'selector' => 'product_value_base'), 'filter' => array('type' => 'product_value_string', 'ftype' => 'string', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => 'product_value'), 'pim_catalog_textarea' => array('column' => array('type' => 'product_value_field', 'selector' => 'product_value_base'), 'filter' => array('type' => 'product_value_string', 'ftype' => 'string', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => 'product_value'), 'pim_catalog_simpleselect' => array('column' => array('type' => 'product_value_option', 'selector' => 'product_value_option'), 'filter' => array('type' => 'product_value_choice', 'ftype' => 'ajax_choice', 'options' => array('field_options' => array('multiple' => true, 'attr' => array('empty_choice' => true)))), 'sorter' => 'product_value'), 'pim_catalog_multiselect' => array('column' => array('type' => 'product_value_options', 'selector' => 'product_value_options'), 'filter' => array('type' => 'product_value_choice', 'ftype' => 'ajax_choice', 'options' => array('field_options' => array('multiple' => true, 'attr' => array('empty_choice' => true)))), 'sorter' => NULL), 'pim_catalog_number' => array('column' => array('type' => 'product_value_field', 'selector' => 'product_value_base'), 'filter' => array('type' => 'product_value_number', 'ftype' => 'number', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => 'product_value'), 'pim_catalog_boolean' => array('column' => array('type' => 'product_value_boolean', 'selector' => 'product_value_base', 'frontend_type' => 'html', 'template' => 'PimDataGridBundle:Property:boolean.html.twig'), 'filter' => array('type' => 'product_value_boolean', 'ftype' => 'boolean'), 'sorter' => 'product_value'), 'pim_catalog_date' => array('column' => array('type' => 'product_value_date', 'selector' => 'product_value_base', 'frontend_type' => 'date'), 'filter' => array('type' => 'product_value_date', 'ftype' => 'date', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => 'product_value'), 'pim_catalog_file' => array('column' => array('type' => 'product_value_file', 'selector' => 'product_value_media', 'frontend_type' => 'string'), 'filter' => array('type' => 'product_value_string', 'ftype' => 'string', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => NULL), 'pim_catalog_image' => array('column' => array('type' => 'product_value_image', 'selector' => 'product_value_media', 'frontend_type' => 'html', 'template' => 'PimDataGridBundle:Property:image.html.twig'), 'filter' => array('type' => 'product_value_string', 'ftype' => 'string', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => NULL), 'pim_catalog_price_collection' => array('column' => array('type' => 'product_value_price', 'selector' => 'product_value_price'), 'filter' => array('type' => 'product_value_price', 'ftype' => 'price', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => NULL), 'pim_catalog_metric' => array('column' => array('type' => 'product_value_metric', 'selector' => 'product_value_metric', 'frontend_type' => 'html', 'template' => 'PimDataGridBundle:Property:metric.html.twig'), 'filter' => array('type' => 'product_value_metric', 'ftype' => 'metric', 'options' => array('field_options' => array('attr' => array('empty_choice' => true)))), 'sorter' => NULL)));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.context_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\ContextConfigurator A Pim\Bundle\DataGridBundle\Datagrid\Product\ContextConfigurator instance.
     */
    protected function getPimDatagrid_Datagrid_Product_ContextConfiguratorService()
    {
        $this->services['pim_datagrid.datagrid.product.context_configurator'] = $instance = new \Pim\Bundle\DataGridBundle\Datagrid\Product\ContextConfigurator($this->get('pim_catalog.manager.product'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_user.context.user'), $this->get('pim_datagrid.repository.datagrid_view'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.filters_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\FiltersConfigurator A Pim\Bundle\DataGridBundle\Datagrid\Product\FiltersConfigurator instance.
     */
    protected function getPimDatagrid_Datagrid_Product_FiltersConfiguratorService()
    {
        return $this->services['pim_datagrid.datagrid.product.filters_configurator'] = new \Pim\Bundle\DataGridBundle\Datagrid\Product\FiltersConfigurator($this->get('pim_datagrid.datagrid.product.configuration_registry'));
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.group_columns_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\GroupColumnsConfigurator A Pim\Bundle\DataGridBundle\Datagrid\Product\GroupColumnsConfigurator instance.
     */
    protected function getPimDatagrid_Datagrid_Product_GroupColumnsConfiguratorService()
    {
        $this->services['pim_datagrid.datagrid.product.group_columns_configurator'] = $instance = new \Pim\Bundle\DataGridBundle\Datagrid\Product\GroupColumnsConfigurator($this->get('pim_datagrid.datagrid.product.configuration_registry'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_catalog.repository.group'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datagrid.product.sorters_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\Product\SortersConfigurator A Pim\Bundle\DataGridBundle\Datagrid\Product\SortersConfigurator instance.
     */
    protected function getPimDatagrid_Datagrid_Product_SortersConfiguratorService()
    {
        return $this->services['pim_datagrid.datagrid.product.sorters_configurator'] = new \Pim\Bundle\DataGridBundle\Datagrid\Product\SortersConfigurator($this->get('pim_datagrid.datagrid.product.configuration_registry'));
    }

    /**
     * Gets the 'pim_datagrid.datagrid.request_parameters_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datagrid\RequestParametersExtractor A Pim\Bundle\DataGridBundle\Datagrid\RequestParametersExtractor instance.
     */
    protected function getPimDatagrid_Datagrid_RequestParametersExtractorService()
    {
        $this->services['pim_datagrid.datagrid.request_parameters_extractor'] = $instance = new \Pim\Bundle\DataGridBundle\Datagrid\RequestParametersExtractor($this->get('oro_datagrid.datagrid.request_params'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datasource.adapter_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\DatasourceAdapterResolver A Pim\Bundle\DataGridBundle\Datasource\DatasourceAdapterResolver instance.
     */
    protected function getPimDatagrid_Datasource_AdapterResolverService()
    {
        $this->services['pim_datagrid.datasource.adapter_resolver'] = $instance = new \Pim\Bundle\DataGridBundle\Datasource\DatasourceAdapterResolver($this->get('pim_datagrid.datasource.support_resolver'), 'Pim\\Bundle\\FilterBundle\\Datasource\\Orm\\OrmFilterDatasourceAdapter', 'Pim\\Bundle\\FilterBundle\\Datasource\\Orm\\OrmFilterProductDatasourceAdapter');

        $instance->addProductDatasource('pim_datasource_product');
        $instance->addProductDatasource('pim_datasource_associated_product');

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datasource.associated_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ProductDatasource A Pim\Bundle\DataGridBundle\Datasource\ProductDatasource instance.
     */
    protected function getPimDatagrid_Datasource_AssociatedProductService()
    {
        return $this->services['pim_datagrid.datasource.associated_product'] = new \Pim\Bundle\DataGridBundle\Datasource\ProductDatasource($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_datagrid.datasource.result_record.hydrator.associated_product'), $this->get('pim_catalog.query.product_query_builder_factory'));
    }

    /**
     * Gets the 'pim_datagrid.datasource.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\Datasource A Pim\Bundle\DataGridBundle\Datasource\Datasource instance.
     */
    protected function getPimDatagrid_Datasource_DefaultService()
    {
        return $this->services['pim_datagrid.datasource.default'] = new \Pim\Bundle\DataGridBundle\Datasource\Datasource($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_datagrid.datasource.result_record.hydrator.default'));
    }

    /**
     * Gets the 'pim_datagrid.datasource.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ProductDatasource A Pim\Bundle\DataGridBundle\Datasource\ProductDatasource instance.
     */
    protected function getPimDatagrid_Datasource_ProductService()
    {
        $this->services['pim_datagrid.datasource.product'] = $instance = new \Pim\Bundle\DataGridBundle\Datasource\ProductDatasource($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_datagrid.datasource.result_record.hydrator.product'), $this->get('pim_catalog.query.product_query_builder_factory'));

        $instance->setMassActionRepository($this->get('pim_catalog.repository.product_mass_action'));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.associated_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_AssociatedProductService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.associated_product'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator('Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ResultRecordHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ResultRecordHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_DefaultService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.default'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ResultRecordHydrator();
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.object' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_ObjectService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.object'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator();
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.object_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectIdHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectIdHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_ObjectIdService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.object_id'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectIdHydrator();
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.orm.object' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_Orm_ObjectService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.orm.object'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ObjectHydrator();
    }

    /**
     * Gets the 'pim_datagrid.datasource.result_record.hydrator.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator A Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator instance.
     */
    protected function getPimDatagrid_Datasource_ResultRecord_Hydrator_ProductService()
    {
        return $this->services['pim_datagrid.datasource.result_record.hydrator.product'] = new \Pim\Bundle\DataGridBundle\Datasource\ResultRecord\Orm\ProductHydrator();
    }

    /**
     * Gets the 'pim_datagrid.datasource.smart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\Datasource A Pim\Bundle\DataGridBundle\Datasource\Datasource instance.
     */
    protected function getPimDatagrid_Datasource_SmartService()
    {
        return $this->services['pim_datagrid.datasource.smart'] = new \Pim\Bundle\DataGridBundle\Datasource\Datasource($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_datagrid.datasource.result_record.hydrator.default'));
    }

    /**
     * Gets the 'pim_datagrid.datasource.support_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Datasource\DatasourceSupportResolver A Pim\Bundle\DataGridBundle\Datasource\DatasourceSupportResolver instance.
     */
    protected function getPimDatagrid_Datasource_SupportResolverService()
    {
        $this->services['pim_datagrid.datasource.support_resolver'] = $instance = new \Pim\Bundle\DataGridBundle\Datasource\DatasourceSupportResolver('doctrine/orm');

        $instance->addSmartDatasource('pim_datasource_product');
        $instance->addSmartDatasource('pim_datasource_associated_product');
        $instance->addSmartDatasource('pim_datasource_smart');

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.event_listener.configure_sorters_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureSortersListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureSortersListener instance.
     */
    protected function getPimDatagrid_EventListener_ConfigureSortersListenerService()
    {
        return $this->services['pim_datagrid.event_listener.configure_sorters_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureSortersListener($this->get('pim_datagrid.datasource.support_resolver'));
    }

    /**
     * Gets the 'pim_datagrid.extension.action.type.tab_redirect' service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Action\Actions\TabRedirectAction A Pim\Bundle\DataGridBundle\Extension\Action\Actions\TabRedirectAction instance.
     */
    protected function getPimDatagrid_Extension_Action_Type_TabRedirectService()
    {
        return new \Pim\Bundle\DataGridBundle\Extension\Action\Actions\TabRedirectAction();
    }

    /**
     * Gets the 'pim_datagrid.extension.filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Filter\FilterExtension A Pim\Bundle\DataGridBundle\Extension\Filter\FilterExtension instance.
     */
    protected function getPimDatagrid_Extension_FilterService()
    {
        $this->services['pim_datagrid.extension.filter'] = $instance = new \Pim\Bundle\DataGridBundle\Extension\Filter\FilterExtension($this->get('oro_datagrid.datagrid.request_params'), $this->get('translator.default'), $this->get('pim_datagrid.datasource.adapter_resolver'));

        $instance->addFilter('string', $this->get('oro_filter.string_filter'));
        $instance->addFilter('selectrow', $this->get('oro_filter.select_row_filter'));
        $instance->addFilter('number', $this->get('oro_filter.number_filter'));
        $instance->addFilter('percent', $this->get('oro_filter.percent_filter'));
        $instance->addFilter('choice', $this->get('oro_filter.choice_filter'));
        $instance->addFilter('entity', $this->get('oro_filter.entity_filter'));
        $instance->addFilter('boolean', $this->get('oro_filter.boolean_filter'));
        $instance->addFilter('date', $this->get('oro_filter.date_range_filter'));
        $instance->addFilter('datetime', $this->get('oro_filter.datetime_range_filter'));
        $instance->addFilter('ajax_choice', $this->get('pim_filter.ajax_choice_filter'));
        $instance->addFilter('product_scope', $this->get('pim_filter.product_scope_filter'));
        $instance->addFilter('product_category', $this->get('pim_filter.product_category_filter'));
        $instance->addFilter('product_groups', $this->get('pim_filter.product_groups_filter'));
        $instance->addFilter('product_family', $this->get('pim_filter.product_family_filter'));
        $instance->addFilter('product_completeness', $this->get('pim_filter.product_completeness_filter'));
        $instance->addFilter('product_date', $this->get('pim_filter.product_date_filter'));
        $instance->addFilter('product_enabled', $this->get('pim_filter.product_enabled_filter'));
        $instance->addFilter('product_in_group', $this->get('pim_filter.product_in_group_filter'));
        $instance->addFilter('product_is_associated', $this->get('pim_filter.product_is_associated_filter'));
        $instance->addFilter('product_value_string', $this->get('pim_filter.product_value_string'));
        $instance->addFilter('product_value_choice', $this->get('pim_filter.product_value_choice'));
        $instance->addFilter('product_value_number', $this->get('pim_filter.product_value_number'));
        $instance->addFilter('product_value_date', $this->get('pim_filter.product_value_date'));
        $instance->addFilter('product_value_datetime', $this->get('pim_filter.product_value_datetime'));
        $instance->addFilter('product_value_boolean', $this->get('pim_filter.product_value_boolean'));
        $instance->addFilter('product_value_metric', $this->get('pim_filter.product_value_metric'));
        $instance->addFilter('product_value_price', $this->get('pim_filter.product_value_price'));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.job.name_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Job\NameProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Job\NameProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_Job_NamePropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.job.name_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Job\NameProperty($this->get('akeneo_batch.connectors'), $this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product.groups_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Product\GroupsProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Product\GroupsProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_Product_GroupsPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product.groups_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\Product\GroupsProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.attribute_option_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_AttributeOptionPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.attribute_option_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.attribute_options_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionsProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionsProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_AttributeOptionsPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.attribute_options_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\AttributeOptionsProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.boolean_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\BooleanProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\BooleanProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_BooleanPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.boolean_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\BooleanProperty($this->get('twig'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.date_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\DateProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\DateProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_DatePropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.date_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\DateProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.field_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FieldProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FieldProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_FieldPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.field_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FieldProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.file_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FileProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FileProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_FilePropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.file_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\FileProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.image_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\ImageProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\ImageProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_ImagePropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.image_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\ImageProperty($this->get('twig'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.metric_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\MetricProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\MetricProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_MetricPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.metric_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\MetricProperty($this->get('twig'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.price_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\PriceProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\PriceProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_PricePropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.price_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\PriceProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_datagrid.extension.formatter.property.product_value.twig_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\TwigProperty A Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\TwigProperty instance.
     */
    protected function getPimDatagrid_Extension_Formatter_Property_ProductValue_TwigPropertyService()
    {
        return $this->services['pim_datagrid.extension.formatter.property.product_value.twig_property'] = new \Pim\Bundle\DataGridBundle\Extension\Formatter\Property\ProductValue\TwigProperty($this->get('twig'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher A Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher instance.
     */
    protected function getPimDatagrid_Extension_MassAction_DispatcherService()
    {
        return $this->services['pim_datagrid.extension.mass_action.dispatcher'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher($this->get('pim_datagrid.extension.mass_action.handler.registry'), $this->get('oro_datagrid.datagrid.manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('oro_datagrid.mass_action.parameters_parser'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_DeleteService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.delete'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object_id'), $this->get('translator.default'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_EditService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.edit'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.orm.object'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.export' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_ExportService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.export'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.product_delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteProductsMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteProductsMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_ProductDeleteService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.product_delete'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\DeleteProductsMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object_id'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.product_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_ProductEditService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.product_edit'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\EditMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.product_export' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_ProductExportService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.product_export'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\ExportMassActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object_id'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionHandlerRegistry A Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionHandlerRegistry instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_RegistryService()
    {
        $this->services['pim_datagrid.extension.mass_action.handler.registry'] = $instance = new \Pim\Bundle\DataGridBundle\Extension\MassAction\MassActionHandlerRegistry();

        $instance->addHandler('quick_export', $this->get('pim_datagrid.extension.mass_action.handler.export'));
        $instance->addHandler('product_quick_export', $this->get('pim_datagrid.extension.mass_action.handler.product_export'));
        $instance->addHandler('sequential_edit', $this->get('pim_datagrid.extension.mass_action.handler.sequential_edit'));
        $instance->addHandler('mass_edit', $this->get('pim_datagrid.extension.mass_action.handler.edit'));
        $instance->addHandler('product_mass_edit', $this->get('pim_datagrid.extension.mass_action.handler.product_edit'));
        $instance->addHandler('mass_delete', $this->get('pim_datagrid.extension.mass_action.handler.delete'));
        $instance->addHandler('product_mass_delete', $this->get('pim_datagrid.extension.mass_action.handler.product_delete'));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.handler.sequential_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\SequentialEditActionHandler A Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\SequentialEditActionHandler instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Handler_SequentialEditService()
    {
        return $this->services['pim_datagrid.extension.mass_action.handler.sequential_edit'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Handler\SequentialEditActionHandler($this->get('pim_datagrid.datasource.result_record.hydrator.object_id'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.type.delete' service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction A Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Type_DeleteService()
    {
        return new \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction();
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.type.edit' service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\EditMassAction A Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\EditMassAction instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Type_EditService()
    {
        return new \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\EditMassAction();
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.type.export' service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Export\ExportMassAction A Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Export\ExportMassAction instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Type_ExportService()
    {
        return new \Pim\Bundle\DataGridBundle\Extension\MassAction\Actions\Export\ExportMassAction();
    }

    /**
     * Gets the 'pim_datagrid.extension.mass_action.util.product_fields_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\MassAction\Util\ProductFieldsBuilder A Pim\Bundle\DataGridBundle\Extension\MassAction\Util\ProductFieldsBuilder instance.
     */
    protected function getPimDatagrid_Extension_MassAction_Util_ProductFieldsBuilderService()
    {
        return $this->services['pim_datagrid.extension.mass_action.util.product_fields_builder'] = new \Pim\Bundle\DataGridBundle\Extension\MassAction\Util\ProductFieldsBuilder($this->get('pim_catalog.manager.product'), $this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.manager.currency'), $this->get('pim_catalog.manager.association_type'), $this->get('pim_catalog.context.catalog'));
    }

    /**
     * Gets the 'pim_datagrid.extension.pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Pager\PagerExtension A Pim\Bundle\DataGridBundle\Extension\Pager\PagerExtension instance.
     */
    protected function getPimDatagrid_Extension_PagerService()
    {
        return $this->services['pim_datagrid.extension.pager'] = new \Pim\Bundle\DataGridBundle\Extension\Pager\PagerExtension($this->get('pim_datagrid.extension.pager.pager_resolver'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_datagrid.extension.pager.orm.pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Pager\Orm\Pager A Pim\Bundle\DataGridBundle\Extension\Pager\Orm\Pager instance.
     */
    protected function getPimDatagrid_Extension_Pager_Orm_PagerService()
    {
        return $this->services['pim_datagrid.extension.pager.orm.pager'] = new \Pim\Bundle\DataGridBundle\Extension\Pager\Orm\Pager();
    }

    /**
     * Gets the 'pim_datagrid.extension.pager.pager_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Pager\PagerResolver A Pim\Bundle\DataGridBundle\Extension\Pager\PagerResolver instance.
     */
    protected function getPimDatagrid_Extension_Pager_PagerResolverService()
    {
        return $this->services['pim_datagrid.extension.pager.pager_resolver'] = new \Pim\Bundle\DataGridBundle\Extension\Pager\PagerResolver($this->get('pim_datagrid.datasource.support_resolver'), $this->get('pim_datagrid.extension.pager.orm.pager'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product.completeness_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\CompletenessSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\CompletenessSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_Product_CompletenessSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product.completeness_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\CompletenessSelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product.family_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\FamilySelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\FamilySelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_Product_FamilySelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product.family_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\FamilySelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product.groups_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\GroupsSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\GroupsSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_Product_GroupsSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product.groups_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\GroupsSelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product.in_group_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\InGroupSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\InGroupSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_Product_InGroupSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product.in_group_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\InGroupSelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product.label_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\LabelSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\LabelSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_Product_LabelSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product.label_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\Product\LabelSelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.base_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\BaseSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\BaseSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_BaseSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.base_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\BaseSelector();
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.media_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MediaSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MediaSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_MediaSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.media_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MediaSelector($this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.metric_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MetricSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MetricSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_MetricSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.metric_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\MetricSelector($this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.option_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_OptionSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.option_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionSelector($this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.options_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionsSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionsSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_OptionsSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.options_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\OptionsSelector($this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm.product_value.prices_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\PricesSelector A Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\PricesSelector instance.
     */
    protected function getPimDatagrid_Extension_Selector_Orm_ProductValue_PricesSelectorService()
    {
        return $this->services['pim_datagrid.extension.selector.orm.product_value.prices_selector'] = new \Pim\Bundle\DataGridBundle\Extension\Selector\Orm\ProductValue\PricesSelector($this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
    }

    /**
     * Gets the 'pim_datagrid.extension.selector.orm_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Selector\OrmSelectorExtension A Pim\Bundle\DataGridBundle\Extension\Selector\OrmSelectorExtension instance.
     */
    protected function getPimDatagrid_Extension_Selector_OrmSelectorService()
    {
        $this->services['pim_datagrid.extension.selector.orm_selector'] = $instance = new \Pim\Bundle\DataGridBundle\Extension\Selector\OrmSelectorExtension('doctrine/orm', $this->get('oro_datagrid.datagrid.request_params'));

        $instance->addEligibleDatasource('pim_datasource_product');
        $instance->addEligibleDatasource('pim_datasource_associated_product');
        $instance->addSelector('product_value_base', $this->get('pim_datagrid.extension.selector.orm.product_value.base_selector'));
        $instance->addSelector('product_value_option', $this->get('pim_datagrid.extension.selector.orm.product_value.option_selector'));
        $instance->addSelector('product_value_options', $this->get('pim_datagrid.extension.selector.orm.product_value.options_selector'));
        $instance->addSelector('product_value_price', $this->get('pim_datagrid.extension.selector.orm.product_value.prices_selector'));
        $instance->addSelector('product_value_metric', $this->get('pim_datagrid.extension.selector.orm.product_value.metric_selector'));
        $instance->addSelector('product_value_media', $this->get('pim_datagrid.extension.selector.orm.product_value.media_selector'));
        $instance->addSelector('product_label', $this->get('pim_datagrid.extension.selector.orm.product.label_selector'));
        $instance->addSelector('product_groups', $this->get('pim_datagrid.extension.selector.orm.product.groups_selector'));
        $instance->addSelector('product_completeness', $this->get('pim_datagrid.extension.selector.orm.product.completeness_selector'));
        $instance->addSelector('product_family', $this->get('pim_datagrid.extension.selector.orm.product.family_selector'));
        $instance->addSelector('product_in_group', $this->get('pim_datagrid.extension.selector.orm.product.in_group_selector'));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\SorterExtension A Pim\Bundle\DataGridBundle\Extension\Sorter\SorterExtension instance.
     */
    protected function getPimDatagrid_Extension_SorterService()
    {
        $this->services['pim_datagrid.extension.sorter'] = $instance = new \Pim\Bundle\DataGridBundle\Extension\Sorter\SorterExtension($this->get('oro_datagrid.datagrid.request_params'));

        $instance->addSorter('field', $this->get('pim_datagrid.extension.sorter.orm.field_sorter'));
        $instance->addSorter('product_field', $this->get('pim_datagrid.extension.sorter.product.field_sorter'));
        $instance->addSorter('product_value', $this->get('pim_datagrid.extension.sorter.product.value_sorter'));
        $instance->addSorter('product_completeness', $this->get('pim_datagrid.extension.sorter.product.completeness_sorter'));
        $instance->addSorter('product_family', $this->get('pim_datagrid.extension.sorter.product.family_sorter'));
        $instance->addSorter('product_is_associated', $this->get('pim_datagrid.extension.sorter.product.is_associated_sorter'));
        $instance->addSorter('product_in_group', $this->get('pim_datagrid.extension.sorter.product.in_group_sorter'));

        return $instance;
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.orm.field_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Orm\FieldSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Orm\FieldSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Orm_FieldSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.orm.field_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Orm\FieldSorter();
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.completeness_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\CompletenessSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\CompletenessSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_CompletenessSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.completeness_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\CompletenessSorter();
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.family_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FamilySorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FamilySorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_FamilySorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.family_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FamilySorter();
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.field_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FieldSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FieldSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_FieldSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.field_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\FieldSorter();
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.in_group_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\InGroupSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\InGroupSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_InGroupSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.in_group_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\InGroupSorter($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.is_associated_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\IsAssociatedSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\IsAssociatedSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_IsAssociatedSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.is_associated_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\IsAssociatedSorter();
    }

    /**
     * Gets the 'pim_datagrid.extension.sorter.product.value_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\ValueSorter A Pim\Bundle\DataGridBundle\Extension\Sorter\Product\ValueSorter instance.
     */
    protected function getPimDatagrid_Extension_Sorter_Product_ValueSorterService()
    {
        return $this->services['pim_datagrid.extension.sorter.product.value_sorter'] = new \Pim\Bundle\DataGridBundle\Extension\Sorter\Product\ValueSorter();
    }

    /**
     * Gets the 'pim_datagrid.form.type.datagrid_view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Form\Type\DatagridViewType A Pim\Bundle\DataGridBundle\Form\Type\DatagridViewType instance.
     */
    protected function getPimDatagrid_Form_Type_DatagridViewService()
    {
        return $this->services['pim_datagrid.form.type.datagrid_view'] = new \Pim\Bundle\DataGridBundle\Form\Type\DatagridViewType('Pim\\Bundle\\DataGridBundle\\Entity\\DatagridView');
    }

    /**
     * Gets the 'pim_datagrid.manager.datagrid_view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\Manager\DatagridViewManager A Pim\Bundle\DataGridBundle\Manager\DatagridViewManager instance.
     */
    protected function getPimDatagrid_Manager_DatagridViewService()
    {
        return $this->services['pim_datagrid.manager.datagrid_view'] = new \Pim\Bundle\DataGridBundle\Manager\DatagridViewManager($this->get('pim_datagrid.repository.datagrid_view'), $this->get('oro_datagrid.datagrid.manager'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'pim_datagrid.repository.datagrid_view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\EntityRepository A Doctrine\ORM\EntityRepository instance.
     */
    protected function getPimDatagrid_Repository_DatagridViewService()
    {
        return $this->services['pim_datagrid.repository.datagrid_view'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\DataGridBundle\\Entity\\DatagridView');
    }

    /**
     * Gets the 'pim_enrich.controller.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\AssociationController A Pim\Bundle\EnrichBundle\Controller\AssociationController instance.
     */
    protected function getPimEnrich_Controller_AssociationService()
    {
        return $this->services['pim_enrich.controller.association'] = new \Pim\Bundle\EnrichBundle\Controller\AssociationController($this->get('doctrine'), $this->get('templating'), $this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_enrich.controller.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\AssociationTypeController A Pim\Bundle\EnrichBundle\Controller\AssociationTypeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.association_type' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_AssociationTypeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.association_type', 'request');
        }

        return $this->services['pim_enrich.controller.association_type'] = $this->scopedServices['request']['pim_enrich.controller.association_type'] = new \Pim\Bundle\EnrichBundle\Controller\AssociationTypeController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_catalog.manager.association_type'), $this->get('pim_catalog.manager.association'), $this->get('pim_enrich.form.handler.association_type'), $this->get('pim_enrich.form.association_type'), $this->get('pim_catalog.remover.association_type'));
    }

    /**
     * Gets the 'pim_enrich.controller.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\AttributeController A Pim\Bundle\EnrichBundle\Controller\AttributeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.attribute' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_AttributeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.attribute', 'request');
        }

        return $this->services['pim_enrich.controller.attribute'] = $this->scopedServices['request']['pim_enrich.controller.attribute'] = new \Pim\Bundle\EnrichBundle\Controller\AttributeController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_enrich.form.handler.attribute'), $this->get('pim_enrich.form.attribute'), $this->get('pim_catalog.manager.attribute'), $this->get('pim_catalog.manager.attribute_option'), $this->get('pim_catalog.manager.locale'), $this->get('pim_versioning.manager.version'), $this->get('pim_catalog.saver.attribute'), $this->get('pim_catalog.remover.attribute'), $this->get('pim_catalog.saver.attribute_option'), array('measures_config' => array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mm²'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4515999999999997E-10)), 'symbol' => 'sq mil'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064515999999999998)), 'symbol' => 'in²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.092903040000000006)), 'symbol' => 'ft²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612735999999999)), 'symbol' => 'yd²'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.8899999999999)), 'symbol' => 'arpent'), 'ACRE' => array('convert' => array(0 => array('mul' => 4046.8564219999998)), 'symbol' => 'A'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726000000002)), 'symbol' => 'fur²'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.1103360001)), 'symbol' => 'mi²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Decibel' => array('standard' => 'DECIBEL', 'units' => array('DECIBEL' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'd'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'))), 'Length' => array('standard' => 'METER', 'units' => array('MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dm'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'MIL' => array('convert' => array(0 => array('mul' => 2.5400000000000001E-5)), 'symbol' => 'mil'), 'INCH' => array('convert' => array(0 => array('mul' => 0.025399999999999999)), 'symbol' => 'in'), 'FEET' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ft'), 'YARD' => array('convert' => array(0 => array('mul' => 0.91439999999999999)), 'symbol' => 'yd'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.116800000000001)), 'symbol' => 'ch'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.16800000000001)), 'symbol' => 'fur'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.3440000000001)), 'symbol' => 'mi'))), 'Power' => array('standard' => 'WATT', 'units' => array('WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'))), 'Voltage' => array('standard' => 'VOLT', 'units' => array('MILLIVOLT' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mV'), 'CENTIVOLT' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cV'), 'DECIVOLT' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dV'), 'VOLT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'V'), 'DEKAVOLT' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daV'), 'HECTOVOLT' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hV'), 'KILOVOLT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kV'))), 'Intensity' => array('standard' => 'AMPERE', 'units' => array('MILLIAMPERE' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mA'), 'CENTIAMPERE' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cA'), 'DECIAMPERE' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dA'), 'AMPERE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'A'), 'DEKAMPERE' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daA'), 'HECTOAMPERE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hA'), 'KILOAMPERE' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kA'))), 'Resistance' => array('standard' => 'OHM', 'units' => array('MILLIOHM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mΩ'), 'CENTIOHM' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cΩ'), 'DECIOHM' => array('convert' => array(0 => array('mul' => 0.10000000000000001)), 'symbol' => 'dΩ'), 'OHM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ω'), 'DEKAOHM' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'daΩ'), 'HECTOHM' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hΩ'), 'KILOHM' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kΩ'), 'MEGOHM' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MΩ'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.30480000000000002)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.30480000000000002), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.3440000000001), 1 => array('div' => 3600)), 'symbol' => 'midivh'))), 'ElectricCharge' => array('standard' => 'AMPEREHOUR', 'units' => array('MILLIAMPEREHOUR' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mAh'), 'AMPEREHOUR' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Ah'), 'MILLICOULOMB' => array('convert' => array(0 => array('mul' => 3600000)), 'symbol' => 'mC'), 'CENTIOULOMB' => array('convert' => array(0 => array('mul' => 360000)), 'symbol' => 'cC'), 'DECICOULOMB' => array('convert' => array(0 => array('mul' => 36000)), 'symbol' => 'dC'), 'COULOMB' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'C'), 'DEKACOULOMB' => array('convert' => array(0 => array('mul' => 360)), 'symbol' => 'daC'), 'HECTOCOULOMB' => array('convert' => array(0 => array('mul' => 36)), 'symbol' => 'hC'), 'KILOCOULOMB' => array('convert' => array(0 => array('mul' => 3.6000000000000001)), 'symbol' => 'kC'))), 'Duration' => array('standard' => 'SECOND', 'units' => array('MILLISECOND' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'ms'), 'SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 's'), 'MINUTE' => array('convert' => array(0 => array('mul' => 60)), 'symbol' => 'm'), 'HOUR' => array('convert' => array(0 => array('mul' => 3600)), 'symbol' => 'h'), 'DAY' => array('convert' => array(0 => array('mul' => 86400)), 'symbol' => 'd'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.14999999999998)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.14999999999998)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.14999999999998)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-9)), 'symbol' => 'mm³'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'cm³'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'ml'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0000000000000001E-5)), 'symbol' => 'cl'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dm³'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'), 'BARREL' => array('convert' => array(0 => array('mul' => 0.16365924000000001)), 'symbol' => 'bbl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.5411915900000004), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118000000001), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.76455486100000003)), 'symbol' => 'yd³'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('MILLIGRAM' => array('convert' => array(0 => array('mul' => 9.9999999999999995E-7)), 'symbol' => 'mg'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.4798909999999995E-5)), 'symbol' => 'gr'), 'DENIER' => array('convert' => array(0 => array('mul' => 0.0012750000000000001)), 'symbol' => 'denier'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.030589999999999999)), 'symbol' => 'once'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.48949999999999999)), 'symbol' => 'livre'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237000000002), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237000000002)), 'symbol' => 'lb'))))), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_enrich.controller.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\AttributeGroupController A Pim\Bundle\EnrichBundle\Controller\AttributeGroupController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.attribute_group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_AttributeGroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.attribute_group', 'request');
        }

        return $this->services['pim_enrich.controller.attribute_group'] = $this->scopedServices['request']['pim_enrich.controller.attribute_group'] = new \Pim\Bundle\EnrichBundle\Controller\AttributeGroupController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('oro_security.security_facade'), $this->get('pim_enrich.form.handler.attribute_group'), $this->get('pim_enrich.form.attribute_group'), $this->get('pim_catalog.manager.attribute_group'), $this->get('pim_catalog.saver.attribute_group'), $this->get('pim_catalog.remover.attribute_group'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_enrich.controller.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\AttributeOptionController A Pim\Bundle\EnrichBundle\Controller\AttributeOptionController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.attribute_option' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_AttributeOptionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.attribute_option', 'request');
        }

        return $this->services['pim_enrich.controller.attribute_option'] = $this->scopedServices['request']['pim_enrich.controller.attribute_option'] = new \Pim\Bundle\EnrichBundle\Controller\AttributeOptionController($this->get('pim_internal_api_serializer'), $this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'), $this->get('fos_rest.view_handler'), $this->get('pim_catalog.manager.attribute'), $this->get('pim_catalog.manager.attribute_option'), $this->get('pim_catalog.saver.attribute_option'), $this->get('pim_catalog.remover.attribute_option'));
    }

    /**
     * Gets the 'pim_enrich.controller.category_tree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\CategoryTreeController A Pim\Bundle\EnrichBundle\Controller\CategoryTreeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.category_tree' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_CategoryTreeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.category_tree', 'request');
        }

        return $this->services['pim_enrich.controller.category_tree'] = $this->scopedServices['request']['pim_enrich.controller.category_tree'] = new \Pim\Bundle\EnrichBundle\Controller\CategoryTreeController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_catalog.manager.category'), $this->get('pim_user.context.user'), $this->get('oro_security.security_facade'), $this->get('pim_catalog.saver.category'), $this->get('pim_catalog.remover.category'));
    }

    /**
     * Gets the 'pim_enrich.controller.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\ChannelController A Pim\Bundle\EnrichBundle\Controller\ChannelController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.channel' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_ChannelService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.channel', 'request');
        }

        return $this->services['pim_enrich.controller.channel'] = $this->scopedServices['request']['pim_enrich.controller.channel'] = new \Pim\Bundle\EnrichBundle\Controller\ChannelController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_enrich.form.handler.channel'), $this->get('pim_enrich.form.channel'), $this->get('pim_catalog.remover.channel'));
    }

    /**
     * Gets the 'pim_enrich.controller.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\CompletenessController A Pim\Bundle\EnrichBundle\Controller\CompletenessController instance.
     */
    protected function getPimEnrich_Controller_CompletenessService()
    {
        return $this->services['pim_enrich.controller.completeness'] = new \Pim\Bundle\EnrichBundle\Controller\CompletenessController($this->get('pim_catalog.manager.completeness'), $this->get('pim_catalog.manager.product'), $this->get('pim_catalog.manager.channel'), $this->get('pim_user.context.user'), $this->get('templating'));
    }

    /**
     * Gets the 'pim_enrich.controller.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\CurrencyController A Pim\Bundle\EnrichBundle\Controller\CurrencyController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.currency' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_CurrencyService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.currency', 'request');
        }

        return $this->services['pim_enrich.controller.currency'] = $this->scopedServices['request']['pim_enrich.controller.currency'] = new \Pim\Bundle\EnrichBundle\Controller\CurrencyController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_catalog.saver.currency'));
    }

    /**
     * Gets the 'pim_enrich.controller.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\FamilyController A Pim\Bundle\EnrichBundle\Controller\FamilyController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.family' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_FamilyService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.family', 'request');
        }

        return $this->services['pim_enrich.controller.family'] = $this->scopedServices['request']['pim_enrich.controller.family'] = new \Pim\Bundle\EnrichBundle\Controller\FamilyController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_catalog.manager.family'), $this->get('pim_catalog.manager.channel'), $this->get('pim_catalog.factory.family'), $this->get('pim_enrich.form.handler.family'), $this->get('pim_enrich.form.family'), $this->get('pim_catalog.saver.family'), $this->get('pim_catalog.remover.family'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_enrich.controller.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\GroupController A Pim\Bundle\EnrichBundle\Controller\GroupController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_GroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.group', 'request');
        }

        return $this->services['pim_enrich.controller.group'] = $this->scopedServices['request']['pim_enrich.controller.group'] = new \Pim\Bundle\EnrichBundle\Controller\GroupController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('pim_catalog.manager.group'), $this->get('pim_enrich.form.handler.group'), $this->get('pim_enrich.form.group'), $this->get('pim_catalog.factory.group'), $this->get('pim_catalog.remover.group'));
    }

    /**
     * Gets the 'pim_enrich.controller.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\GroupTypeController A Pim\Bundle\EnrichBundle\Controller\GroupTypeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.group_type' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_GroupTypeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.group_type', 'request');
        }

        return $this->services['pim_enrich.controller.group_type'] = $this->scopedServices['request']['pim_enrich.controller.group_type'] = new \Pim\Bundle\EnrichBundle\Controller\GroupTypeController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_enrich.form.handler.group_type'), $this->get('pim_enrich.form.group_type'), $this->get('pim_catalog.remover.group_type'));
    }

    /**
     * Gets the 'pim_enrich.controller.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\LocaleController A Pim\Bundle\EnrichBundle\Controller\LocaleController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.locale' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_LocaleService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.locale', 'request');
        }

        return $this->services['pim_enrich.controller.locale'] = $this->scopedServices['request']['pim_enrich.controller.locale'] = new \Pim\Bundle\EnrichBundle\Controller\LocaleController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_enrich.controller.mass_edit_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\MassEditActionController A Pim\Bundle\EnrichBundle\Controller\MassEditActionController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.mass_edit_action' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_MassEditActionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.mass_edit_action', 'request');
        }

        return $this->services['pim_enrich.controller.mass_edit_action'] = $this->scopedServices['request']['pim_enrich.controller.mass_edit_action'] = new \Pim\Bundle\EnrichBundle\Controller\MassEditActionController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_enrich.mass_edit_action.operator.registry'), $this->get('oro_datagrid.mass_action.parameters_parser'), $this->get('pim_datagrid.extension.mass_action.dispatcher'), 1000);
    }

    /**
     * Gets the 'pim_enrich.controller.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\MediaController A Pim\Bundle\EnrichBundle\Controller\MediaController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.media' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_MediaService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.media', 'request');
        }

        return $this->services['pim_enrich.controller.media'] = $this->scopedServices['request']['pim_enrich.controller.media'] = new \Pim\Bundle\EnrichBundle\Controller\MediaController($this->get('liip_imagine'), $this->get('liip_imagine.filter.manager'), $this->get('liip_imagine.cache.manager'), $this->get('pim_filesystem'));
    }

    /**
     * Gets the 'pim_enrich.controller.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\ProductController A Pim\Bundle\EnrichBundle\Controller\ProductController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.product' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_ProductService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.product', 'request');
        }

        return $this->services['pim_enrich.controller.product'] = $this->scopedServices['request']['pim_enrich.controller.product'] = new \Pim\Bundle\EnrichBundle\Controller\ProductController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_catalog.manager.product'), $this->get('pim_catalog.manager.category'), $this->get('pim_user.context.user'), $this->get('pim_versioning.manager.version'), $this->get('oro_security.security_facade'), $this->get('pim_catalog.manager.product_category'), $this->get('pim_catalog.saver.product'), $this->get('pim_catalog.manager.media'), $this->get('pim_enrich.manager.sequential_edit'), $this->get('pim_catalog.remover.product'));
    }

    /**
     * Gets the 'pim_enrich.controller.product_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\ProductAttributeController A Pim\Bundle\EnrichBundle\Controller\ProductAttributeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.product_attribute' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_ProductAttributeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.product_attribute', 'request');
        }

        return $this->services['pim_enrich.controller.product_attribute'] = $this->scopedServices['request']['pim_enrich.controller.product_attribute'] = new \Pim\Bundle\EnrichBundle\Controller\ProductAttributeController($this->get('router'), $this->get('form.factory'), $this->get('pim_catalog.manager.product'), $this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_enrich.controller.product_comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\ProductCommentController A Pim\Bundle\EnrichBundle\Controller\ProductCommentController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.product_comment' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_ProductCommentService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.product_comment', 'request');
        }

        return $this->services['pim_enrich.controller.product_comment'] = $this->scopedServices['request']['pim_enrich.controller.product_comment'] = new \Pim\Bundle\EnrichBundle\Controller\ProductCommentController($this->get('templating'), $this->get('security.context'), $this->get('form.factory'), $this->get('pim_catalog.manager.product'), $this->get('pim_comment.manager.comment'), $this->get('pim_comment.builder.comment'));
    }

    /**
     * Gets the 'pim_enrich.controller.sequential_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\SequentialEditController A Pim\Bundle\EnrichBundle\Controller\SequentialEditController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.sequential_edit' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_SequentialEditService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.sequential_edit', 'request');
        }

        return $this->services['pim_enrich.controller.sequential_edit'] = $this->scopedServices['request']['pim_enrich.controller.sequential_edit'] = new \Pim\Bundle\EnrichBundle\Controller\SequentialEditController($this->get('router'), $this->get('pim_datagrid.extension.mass_action.dispatcher'), $this->get('pim_enrich.manager.sequential_edit'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_enrich.controller.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\VariantGroupController A Pim\Bundle\EnrichBundle\Controller\VariantGroupController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.variant_group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_VariantGroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.variant_group', 'request');
        }

        return $this->services['pim_enrich.controller.variant_group'] = $this->scopedServices['request']['pim_enrich.controller.variant_group'] = new \Pim\Bundle\EnrichBundle\Controller\VariantGroupController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('pim_catalog.manager.group'), $this->get('pim_enrich.form.handler.variant_group'), $this->get('pim_enrich.form.variant_group'), $this->get('pim_catalog.factory.group'), $this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.resolver.variant_group_attributes'), $this->get('pim_catalog.remover.group'));
    }

    /**
     * Gets the 'pim_enrich.controller.variant_group_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Controller\VariantGroupAttributeController A Pim\Bundle\EnrichBundle\Controller\VariantGroupAttributeController instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.controller.variant_group_attribute' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Controller_VariantGroupAttributeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.controller.variant_group_attribute', 'request');
        }

        return $this->services['pim_enrich.controller.variant_group_attribute'] = $this->scopedServices['request']['pim_enrich.controller.variant_group_attribute'] = new \Pim\Bundle\EnrichBundle\Controller\VariantGroupAttributeController($this->get('router'), $this->get('form.factory'), $this->get('pim_catalog.repository.group'), $this->get('pim_catalog.saver.group'), $this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.builder.product_template'), $this->get('pim_catalog.resolver.variant_group_attributes'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.add_locale_code_to_grid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddLocaleCodeToGridListener A Pim\Bundle\DataGridBundle\EventListener\AddLocaleCodeToGridListener instance.
     */
    protected function getPimEnrich_EventListener_AddLocaleCodeToGridService()
    {
        return $this->services['pim_enrich.event_listener.add_locale_code_to_grid'] = new \Pim\Bundle\DataGridBundle\EventListener\AddLocaleCodeToGridListener($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.association_group_grid_after_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener instance.
     */
    protected function getPimEnrich_EventListener_AssociationGroupGridAfterListenerService()
    {
        return $this->services['pim_enrich.event_listener.association_group_grid_after_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener(array(0 => 'dataLocale', 1 => 'associatedIds'), $this->get('oro_datagrid.datagrid.request_params'), true);
    }

    /**
     * Gets the 'pim_enrich.event_listener.association_product_grid_after_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_AssociationProductGridAfterListenerService()
    {
        $this->services['pim_enrich.event_listener.association_product_grid_after_listener'] = $instance = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener(array(0 => 'dataLocale', 1 => 'product', 2 => 'associationType'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'), true);

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.event_listener.association_product_grid_before_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_AssociationProductGridBeforeListenerService()
    {
        return $this->services['pim_enrich.event_listener.association_product_grid_before_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener($this->get('pim_datagrid.datagrid.product.context_configurator'), $this->get('pim_datagrid.datagrid.product.columns_configurator'), $this->get('pim_datagrid.datagrid.product.filters_configurator'), $this->get('pim_datagrid.datagrid.product.sorters_configurator'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.group_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener instance.
     */
    protected function getPimEnrich_EventListener_GroupGridListenerService()
    {
        return $this->services['pim_enrich.event_listener.group_grid_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener(array(0 => 'localeCode', 1 => 'groupTypes'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.history_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureHistoryGridListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureHistoryGridListener instance.
     */
    protected function getPimEnrich_EventListener_HistoryGridListenerService()
    {
        return $this->services['pim_enrich.event_listener.history_grid_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureHistoryGridListener($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_grid_after_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductGridAfterListenerService()
    {
        $this->services['pim_enrich.event_listener.product_grid_after_listener'] = $instance = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener(array(0 => 'dataLocale'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_grid_before_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductGridBeforeListenerService()
    {
        return $this->services['pim_enrich.event_listener.product_grid_before_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener($this->get('pim_datagrid.datagrid.product.context_configurator'), $this->get('pim_datagrid.datagrid.product.columns_configurator'), $this->get('pim_datagrid.datagrid.product.filters_configurator'), $this->get('pim_datagrid.datagrid.product.sorters_configurator'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_group_grid_after_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductGroupGridAfterListenerService()
    {
        $this->services['pim_enrich.event_listener.product_group_grid_after_listener'] = $instance = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToProductGridListener(array(0 => 'dataLocale', 1 => 'currentGroup'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'), true);

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_group_grid_before_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductGroupGridBeforeListenerService()
    {
        return $this->services['pim_enrich.event_listener.product_group_grid_before_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener($this->get('pim_datagrid.datagrid.product.context_configurator'), $this->get('pim_datagrid.datagrid.product.group_columns_configurator'), $this->get('pim_datagrid.datagrid.product.filters_configurator'), $this->get('pim_datagrid.datagrid.product.sorters_configurator'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_variant_group_grid_after_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToVariantProductGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToVariantProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductVariantGroupGridAfterListenerService()
    {
        $this->services['pim_enrich.event_listener.product_variant_group_grid_after_listener'] = $instance = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToVariantProductGridListener(array(0 => 'dataLocale', 1 => 'currentGroup'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'), $this->get('pim_catalog.manager.product'), true);

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.event_listener.product_variant_group_grid_before_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener A Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener instance.
     */
    protected function getPimEnrich_EventListener_ProductVariantGroupGridBeforeListenerService()
    {
        return $this->services['pim_enrich.event_listener.product_variant_group_grid_before_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\ConfigureProductGridListener($this->get('pim_datagrid.datagrid.product.context_configurator'), $this->get('pim_datagrid.datagrid.product.group_columns_configurator'), $this->get('pim_datagrid.datagrid.product.filters_configurator'), $this->get('pim_datagrid.datagrid.product.sorters_configurator'));
    }

    /**
     * Gets the 'pim_enrich.event_listener.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\EventListener\RequestListener A Pim\Bundle\EnrichBundle\EventListener\RequestListener instance.
     */
    protected function getPimEnrich_EventListener_RequestService()
    {
        return $this->services['pim_enrich.event_listener.request'] = new \Pim\Bundle\EnrichBundle\EventListener\RequestListener();
    }

    /**
     * Gets the 'pim_enrich.event_listener.variant_group_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener instance.
     */
    protected function getPimEnrich_EventListener_VariantGroupGridListenerService()
    {
        return $this->services['pim_enrich.event_listener.variant_group_grid_listener'] = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener(array(0 => 'localeCode', 1 => 'groupTypes'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_enrich.event_subscriber.translate_flash_messages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\EventListener\TranslateFlashMessagesSubscriber A Pim\Bundle\EnrichBundle\EventListener\TranslateFlashMessagesSubscriber instance.
     */
    protected function getPimEnrich_EventSubscriber_TranslateFlashMessagesService()
    {
        return $this->services['pim_enrich.event_subscriber.translate_flash_messages'] = new \Pim\Bundle\EnrichBundle\EventListener\TranslateFlashMessagesSubscriber($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_enrich.factory.sequential_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Factory\SequentialEditFactory A Pim\Bundle\EnrichBundle\Factory\SequentialEditFactory instance.
     */
    protected function getPimEnrich_Factory_SequentialEditService()
    {
        return $this->services['pim_enrich.factory.sequential_edit'] = new \Pim\Bundle\EnrichBundle\Factory\SequentialEditFactory('Pim\\Bundle\\EnrichBundle\\Entity\\SequentialEdit');
    }

    /**
     * Gets the 'pim_enrich.form.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_AssociationTypeService()
    {
        return $this->services['pim_enrich.form.association_type'] = $this->get('form.factory')->createNamed('pim_enrich_association_type_form', 'pim_enrich_association_type');
    }

    /**
     * Gets the 'pim_enrich.form.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_AttributeService()
    {
        return $this->services['pim_enrich.form.attribute'] = $this->get('form.factory')->createNamed('pim_enrich_attribute_form', 'pim_enrich_attribute');
    }

    /**
     * Gets the 'pim_enrich.form.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_AttributeGroupService()
    {
        return $this->services['pim_enrich.form.attribute_group'] = $this->get('form.factory')->createNamed('pim_enrich_attribute_group_form', 'pim_enrich_attribute_group');
    }

    /**
     * Gets the 'pim_enrich.form.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_ChannelService()
    {
        return $this->services['pim_enrich.form.channel'] = $this->get('form.factory')->createNamed('pim_enrich_channel_form', 'pim_enrich_channel');
    }

    /**
     * Gets the 'pim_enrich.form.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_CurrencyService()
    {
        return $this->services['pim_enrich.form.currency'] = $this->get('form.factory')->createNamed('pim_enrich_currency_form', 'pim_enrich_currency');
    }

    /**
     * Gets the 'pim_enrich.form.factory.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Factory\ProductValueFormFactory A Pim\Bundle\EnrichBundle\Form\Factory\ProductValueFormFactory instance.
     */
    protected function getPimEnrich_Form_Factory_ProductValueService()
    {
        return $this->services['pim_enrich.form.factory.product_value'] = new \Pim\Bundle\EnrichBundle\Form\Factory\ProductValueFormFactory($this->get('form.factory'), $this->get('pim_catalog.registry.attribute_type'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_enrich.form.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_FamilyService()
    {
        return $this->services['pim_enrich.form.family'] = $this->get('form.factory')->createNamed('pim_enrich_family_form', 'pim_enrich_family');
    }

    /**
     * Gets the 'pim_enrich.form.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_GroupService()
    {
        return $this->services['pim_enrich.form.group'] = $this->get('form.factory')->createNamed('pim_enrich_group_form', 'pim_enrich_group');
    }

    /**
     * Gets the 'pim_enrich.form.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_GroupTypeService()
    {
        return $this->services['pim_enrich.form.group_type'] = $this->get('form.factory')->createNamed('pim_enrich_group_type_form', 'pim_enrich_group_type');
    }

    /**
     * Gets the 'pim_enrich.form.handler.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.association_type' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_AssociationTypeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.association_type', 'request');
        }

        return $this->services['pim_enrich.form.handler.association_type'] = $this->scopedServices['request']['pim_enrich.form.handler.association_type'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.association_type'), $this->get('request'), $this->get('pim_catalog.saver.association_type'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.attribute' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_AttributeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.attribute', 'request');
        }

        return $this->services['pim_enrich.form.handler.attribute'] = $this->scopedServices['request']['pim_enrich.form.handler.attribute'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.attribute'), $this->get('request'), $this->get('pim_catalog.saver.attribute'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.attribute_group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_AttributeGroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.attribute_group', 'request');
        }

        return $this->services['pim_enrich.form.handler.attribute_group'] = $this->scopedServices['request']['pim_enrich.form.handler.attribute_group'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.attribute_group'), $this->get('request'), $this->get('pim_catalog.saver.attribute_group'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.channel' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_ChannelService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.channel', 'request');
        }

        return $this->services['pim_enrich.form.handler.channel'] = $this->scopedServices['request']['pim_enrich.form.handler.channel'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.channel'), $this->get('request'), $this->get('pim_catalog.saver.channel'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.family' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_FamilyService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.family', 'request');
        }

        return $this->services['pim_enrich.form.handler.family'] = $this->scopedServices['request']['pim_enrich.form.handler.family'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.family'), $this->get('request'), $this->get('pim_catalog.saver.family'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler A Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_GroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.group', 'request');
        }

        return $this->services['pim_enrich.form.handler.group'] = $this->scopedServices['request']['pim_enrich.form.handler.group'] = new \Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler($this->get('pim_enrich.form.group'), $this->get('request'), $this->get('pim_catalog.saver.group'), $this->get('pim_catalog.repository.product'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler A Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.group_type' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_GroupTypeService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.group_type', 'request');
        }

        return $this->services['pim_enrich.form.handler.group_type'] = $this->scopedServices['request']['pim_enrich.form.handler.group_type'] = new \Pim\Bundle\EnrichBundle\Form\Handler\BaseHandler($this->get('pim_enrich.form.group_type'), $this->get('request'), $this->get('pim_catalog.saver.group_type'));
    }

    /**
     * Gets the 'pim_enrich.form.handler.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler A Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'pim_enrich.form.handler.variant_group' service is requested while the 'request' scope is not active
     */
    protected function getPimEnrich_Form_Handler_VariantGroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_enrich.form.handler.variant_group', 'request');
        }

        return $this->services['pim_enrich.form.handler.variant_group'] = $this->scopedServices['request']['pim_enrich.form.handler.variant_group'] = new \Pim\Bundle\EnrichBundle\Form\Handler\GroupHandler($this->get('pim_enrich.form.variant_group'), $this->get('request'), $this->get('pim_catalog.saver.group'), $this->get('pim_catalog.repository.product'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.add_value_field_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\AddProductValueFieldSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\AddProductValueFieldSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_AddValueFieldSubscriberService()
    {
        return $this->services['pim_enrich.form.subscriber.add_value_field_subscriber'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\AddProductValueFieldSubscriber($this->get('pim_enrich.form.factory.product_value'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.add_variant_group_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\AddVariantGroupTemplateSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\AddVariantGroupTemplateSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_AddVariantGroupTemplateService()
    {
        return $this->services['pim_enrich.form.subscriber.add_variant_group_template'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\AddVariantGroupTemplateSubscriber($this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeTypeRelatedFieldsSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeTypeRelatedFieldsSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_AttributeService()
    {
        return $this->services['pim_enrich.form.subscriber.attribute'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeTypeRelatedFieldsSubscriber($this->get('pim_catalog.registry.attribute_type'), $this->get('oro_security.security_facade'), $this->get('pim_catalog.repository.attribute_group'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.attribute_requirements' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeRequirementsSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeRequirementsSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_AttributeRequirementsService()
    {
        return $this->services['pim_enrich.form.subscriber.attribute_requirements'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeRequirementsSubscriber($this->get('pim_catalog.manager.channel'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.family_attribute_label_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeAsLabelSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeAsLabelSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_FamilyAttributeLabelSubscriberService()
    {
        return $this->services['pim_enrich.form.subscriber.family_attribute_label_subscriber'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\AddAttributeAsLabelSubscriber('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', $this->get('form.factory'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.family_disable_fields_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\DisableFamilyFieldsSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\DisableFamilyFieldsSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_FamilyDisableFieldsSubscriberService()
    {
        return $this->services['pim_enrich.form.subscriber.family_disable_fields_subscriber'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\DisableFamilyFieldsSubscriber($this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.set_attribute_group_sort_order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\SetAttributeGroupSortOrderSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\SetAttributeGroupSortOrderSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_SetAttributeGroupSortOrderService()
    {
        return $this->services['pim_enrich.form.subscriber.set_attribute_group_sort_order'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\SetAttributeGroupSortOrderSubscriber($this->get('pim_catalog.repository.attribute_group'));
    }

    /**
     * Gets the 'pim_enrich.form.subscriber.transform_product_template_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Subscriber\TransformProductTemplateValuesSubscriber A Pim\Bundle\EnrichBundle\Form\Subscriber\TransformProductTemplateValuesSubscriber instance.
     */
    protected function getPimEnrich_Form_Subscriber_TransformProductTemplateValuesService()
    {
        $a = $this->get('pim_serializer');

        return $this->services['pim_enrich.form.subscriber.transform_product_template_values'] = new \Pim\Bundle\EnrichBundle\Form\Subscriber\TransformProductTemplateValuesSubscriber($a, $a);
    }

    /**
     * Gets the 'pim_enrich.form.type.add_to_groups' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToGroupsType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToGroupsType instance.
     */
    protected function getPimEnrich_Form_Type_AddToGroupsService()
    {
        return $this->services['pim_enrich.form.type.add_to_groups'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToGroupsType('Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\AddToGroups');
    }

    /**
     * Gets the 'pim_enrich.form.type.add_to_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToVariantGroupType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToVariantGroupType instance.
     */
    protected function getPimEnrich_Form_Type_AddToVariantGroupService()
    {
        return $this->services['pim_enrich.form.type.add_to_variant_group'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\AddToVariantGroupType('Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\AddToVariantGroup');
    }

    /**
     * Gets the 'pim_enrich.form.type.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AssociationType A Pim\Bundle\EnrichBundle\Form\Type\AssociationType instance.
     */
    protected function getPimEnrich_Form_Type_AssociationService()
    {
        return $this->services['pim_enrich.form.type.association'] = new \Pim\Bundle\EnrichBundle\Form\Type\AssociationType($this->get('pim_catalog.repository.product'), $this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\CatalogBundle\\Model\\Association');
    }

    /**
     * Gets the 'pim_enrich.form.type.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AssociationTypeType A Pim\Bundle\EnrichBundle\Form\Type\AssociationTypeType instance.
     */
    protected function getPimEnrich_Form_Type_AssociationTypeService()
    {
        return $this->services['pim_enrich.form.type.association_type'] = new \Pim\Bundle\EnrichBundle\Form\Type\AssociationTypeType('Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType');
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeType A Pim\Bundle\EnrichBundle\Form\Type\AttributeType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeService()
    {
        return $this->services['pim_enrich.form.type.attribute'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeType($this->get('pim_catalog.manager.attribute'), $this->get('pim_enrich.form.subscriber.attribute'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeTranslation', 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup');
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeGroupType A Pim\Bundle\EnrichBundle\Form\Type\AttributeGroupType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeGroupService()
    {
        $this->services['pim_enrich.form.type.attribute_group'] = $instance = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeGroupType('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup');

        $instance->addEventSubscriber($this->get('pim_enrich.form.subscriber.set_attribute_group_sort_order'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionType A Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeOptionService()
    {
        return $this->services['pim_enrich.form.type.attribute_option'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionType('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute_option_create' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionCreateType A Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionCreateType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeOptionCreateService()
    {
        return $this->services['pim_enrich.form.type.attribute_option_create'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionCreateType('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption');
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionValueType A Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionValueType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeOptionValueService()
    {
        return $this->services['pim_enrich.form.type.attribute_option_value'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeOptionValueType('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOptionValue');
    }

    /**
     * Gets the 'pim_enrich.form.type.attribute_requirement' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeRequirementType A Pim\Bundle\EnrichBundle\Form\Type\AttributeRequirementType instance.
     */
    protected function getPimEnrich_Form_Type_AttributeRequirementService()
    {
        return $this->services['pim_enrich.form.type.attribute_requirement'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeRequirementType('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeRequirement');
    }

    /**
     * Gets the 'pim_enrich.form.type.available_attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AvailableAttributesType A Pim\Bundle\EnrichBundle\Form\Type\AvailableAttributesType instance.
     */
    protected function getPimEnrich_Form_Type_AvailableAttributesService()
    {
        return $this->services['pim_enrich.form.type.available_attributes'] = new \Pim\Bundle\EnrichBundle\Form\Type\AvailableAttributesType($this->get('pim_catalog.repository.attribute'), $this->get('pim_user.context.user'), $this->get('translator.default'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Model\\AvailableAttributes');
    }

    /**
     * Gets the 'pim_enrich.form.type.available_locales' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\AvailableLocalesType A Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\AvailableLocalesType instance.
     */
    protected function getPimEnrich_Form_Type_AvailableLocalesService()
    {
        return $this->services['pim_enrich.form.type.available_locales'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\AvailableLocalesType();
    }

    /**
     * Gets the 'pim_enrich.form.type.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\CategoryType A Pim\Bundle\EnrichBundle\Form\Type\CategoryType instance.
     */
    protected function getPimEnrich_Form_Type_CategoryService()
    {
        return $this->services['pim_enrich.form.type.category'] = new \Pim\Bundle\EnrichBundle\Form\Type\CategoryType('Pim\\Bundle\\CatalogBundle\\Entity\\Category', 'Pim\\Bundle\\CatalogBundle\\Entity\\CategoryTranslation');
    }

    /**
     * Gets the 'pim_enrich.form.type.change_family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeFamilyType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeFamilyType instance.
     */
    protected function getPimEnrich_Form_Type_ChangeFamilyService()
    {
        return $this->services['pim_enrich.form.type.change_family'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeFamilyType('Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\ChangeFamily');
    }

    /**
     * Gets the 'pim_enrich.form.type.change_status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeStatusType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeStatusType instance.
     */
    protected function getPimEnrich_Form_Type_ChangeStatusService()
    {
        return $this->services['pim_enrich.form.type.change_status'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ChangeStatusType('Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\ChangeStatus');
    }

    /**
     * Gets the 'pim_enrich.form.type.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ChannelType A Pim\Bundle\EnrichBundle\Form\Type\ChannelType instance.
     */
    protected function getPimEnrich_Form_Type_ChannelService()
    {
        return $this->services['pim_enrich.form.type.channel'] = new \Pim\Bundle\EnrichBundle\Form\Type\ChannelType($this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.helper.locale'), $this->get('pim_enrich.provider.colors'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel');
    }

    /**
     * Gets the 'pim_enrich.form.type.classify' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ClassifyType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ClassifyType instance.
     */
    protected function getPimEnrich_Form_Type_ClassifyService()
    {
        return $this->services['pim_enrich.form.type.classify'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\ClassifyType('Pim\\Bundle\\CatalogBundle\\Entity\\Category', 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\Classify');
    }

    /**
     * Gets the 'pim_enrich.form.type.conversion_units' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ConversionUnitsType A Pim\Bundle\EnrichBundle\Form\Type\ConversionUnitsType instance.
     */
    protected function getPimEnrich_Form_Type_ConversionUnitsService()
    {
        return $this->services['pim_enrich.form.type.conversion_units'] = new \Pim\Bundle\EnrichBundle\Form\Type\ConversionUnitsType($this->get('akeneo_measure.manager'), $this->get('doctrine.orm.default_entity_manager'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_enrich.form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\CurrencyType A Pim\Bundle\EnrichBundle\Form\Type\CurrencyType instance.
     */
    protected function getPimEnrich_Form_Type_CurrencyService()
    {
        return $this->services['pim_enrich.form.type.currency'] = new \Pim\Bundle\EnrichBundle\Form\Type\CurrencyType($this->get('pim_catalog.helper.locale'));
    }

    /**
     * Gets the 'pim_enrich.form.type.edit_common_attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\EditCommonAttributesType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\EditCommonAttributesType instance.
     */
    protected function getPimEnrich_Form_Type_EditCommonAttributesService()
    {
        return $this->services['pim_enrich.form.type.edit_common_attributes'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\EditCommonAttributesType($this->get('pim_enrich.form.type.product.view'), $this->get('pim_catalog.helper.locale'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale', 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\EditCommonAttributes');
    }

    /**
     * Gets the 'pim_enrich.form.type.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\FamilyType A Pim\Bundle\EnrichBundle\Form\Type\FamilyType instance.
     */
    protected function getPimEnrich_Form_Type_FamilyService()
    {
        return $this->services['pim_enrich.form.type.family'] = new \Pim\Bundle\EnrichBundle\Form\Type\FamilyType($this->get('pim_enrich.form.subscriber.attribute_requirements'), $this->get('pim_enrich.form.subscriber.family_disable_fields_subscriber'), $this->get('pim_enrich.form.subscriber.family_attribute_label_subscriber'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Family');
    }

    /**
     * Gets the 'pim_enrich.form.type.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\GroupType A Pim\Bundle\EnrichBundle\Form\Type\GroupType instance.
     */
    protected function getPimEnrich_Form_Type_GroupService()
    {
        return $this->services['pim_enrich.form.type.group'] = new \Pim\Bundle\EnrichBundle\Form\Type\GroupType($this->get('pim_catalog.repository.product'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_enrich.form.type.group_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\GroupTypeType A Pim\Bundle\EnrichBundle\Form\Type\GroupTypeType instance.
     */
    protected function getPimEnrich_Form_Type_GroupTypeService()
    {
        return $this->services['pim_enrich.form.type.group_type'] = new \Pim\Bundle\EnrichBundle\Form\Type\GroupTypeType('Pim\\Bundle\\CatalogBundle\\Entity\\GroupType');
    }

    /**
     * Gets the 'pim_enrich.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ImageType A Pim\Bundle\EnrichBundle\Form\Type\ImageType instance.
     */
    protected function getPimEnrich_Form_Type_ImageService()
    {
        return $this->services['pim_enrich.form.type.image'] = new \Pim\Bundle\EnrichBundle\Form\Type\ImageType('Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia');
    }

    /**
     * Gets the 'pim_enrich.form.type.light_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\LightEntityType A Pim\Bundle\EnrichBundle\Form\Type\LightEntityType instance.
     */
    protected function getPimEnrich_Form_Type_LightEntityService()
    {
        return $this->services['pim_enrich.form.type.light_entity'] = new \Pim\Bundle\EnrichBundle\Form\Type\LightEntityType();
    }

    /**
     * Gets the 'pim_enrich.form.type.localized_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\LocalizedCollectionType A Pim\Bundle\EnrichBundle\Form\Type\LocalizedCollectionType instance.
     */
    protected function getPimEnrich_Form_Type_LocalizedCollectionService()
    {
        return $this->services['pim_enrich.form.type.localized_collection'] = new \Pim\Bundle\EnrichBundle\Form\Type\LocalizedCollectionType();
    }

    /**
     * Gets the 'pim_enrich.form.type.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MediaType A Pim\Bundle\EnrichBundle\Form\Type\MediaType instance.
     */
    protected function getPimEnrich_Form_Type_MediaService()
    {
        return $this->services['pim_enrich.form.type.media'] = new \Pim\Bundle\EnrichBundle\Form\Type\MediaType('Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia');
    }

    /**
     * Gets the 'pim_enrich.form.type.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MetricType A Pim\Bundle\EnrichBundle\Form\Type\MetricType instance.
     */
    protected function getPimEnrich_Form_Type_MetricService()
    {
        return $this->services['pim_enrich.form.type.metric'] = new \Pim\Bundle\EnrichBundle\Form\Type\MetricType('Pim\\Bundle\\CatalogBundle\\Model\\Metric');
    }

    /**
     * Gets the 'pim_enrich.form.type.object_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ObjectIdentifierType A Pim\Bundle\EnrichBundle\Form\Type\ObjectIdentifierType instance.
     */
    protected function getPimEnrich_Form_Type_ObjectIdentifierService()
    {
        return $this->services['pim_enrich.form.type.object_identifier'] = new \Pim\Bundle\EnrichBundle\Form\Type\ObjectIdentifierType();
    }

    /**
     * Gets the 'pim_enrich.form.type.options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\OptionsType A Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\OptionsType instance.
     */
    protected function getPimEnrich_Form_Type_OptionsService()
    {
        return $this->services['pim_enrich.form.type.options'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\OptionsType();
    }

    /**
     * Gets the 'pim_enrich.form.type.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\PriceType A Pim\Bundle\EnrichBundle\Form\Type\PriceType instance.
     */
    protected function getPimEnrich_Form_Type_PriceService()
    {
        return $this->services['pim_enrich.form.type.price'] = new \Pim\Bundle\EnrichBundle\Form\Type\PriceType('Pim\\Bundle\\CatalogBundle\\Model\\ProductPrice');
    }

    /**
     * Gets the 'pim_enrich.form.type.price_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\PriceCollectionType A Pim\Bundle\EnrichBundle\Form\Type\PriceCollectionType instance.
     */
    protected function getPimEnrich_Form_Type_PriceCollectionService()
    {
        return $this->services['pim_enrich.form.type.price_collection'] = new \Pim\Bundle\EnrichBundle\Form\Type\PriceCollectionType();
    }

    /**
     * Gets the 'pim_enrich.form.type.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ProductType A Pim\Bundle\EnrichBundle\Form\Type\ProductType instance.
     */
    protected function getPimEnrich_Form_Type_ProductService()
    {
        return $this->services['pim_enrich.form.type.product'] = new \Pim\Bundle\EnrichBundle\Form\Type\ProductType();
    }

    /**
     * Gets the 'pim_enrich.form.type.product_create' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ProductCreateType A Pim\Bundle\EnrichBundle\Form\Type\ProductCreateType instance.
     */
    protected function getPimEnrich_Form_Type_ProductCreateService()
    {
        return $this->services['pim_enrich.form.type.product_create'] = new \Pim\Bundle\EnrichBundle\Form\Type\ProductCreateType();
    }

    /**
     * Gets the 'pim_enrich.form.type.product_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ProductEditType A Pim\Bundle\EnrichBundle\Form\Type\ProductEditType instance.
     */
    protected function getPimEnrich_Form_Type_ProductEditService()
    {
        return $this->services['pim_enrich.form.type.product_edit'] = new \Pim\Bundle\EnrichBundle\Form\Type\ProductEditType($this->get('pim_enrich.form.type.product.view'), $this->get('pim_catalog.repository.family'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category');
    }

    /**
     * Gets the 'pim_enrich.form.type.product_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ProductTemplateType A Pim\Bundle\EnrichBundle\Form\Type\ProductTemplateType instance.
     */
    protected function getPimEnrich_Form_Type_ProductTemplateService()
    {
        return $this->services['pim_enrich.form.type.product_template'] = new \Pim\Bundle\EnrichBundle\Form\Type\ProductTemplateType($this->get('pim_enrich.form.type.product.view'), $this->get('pim_enrich.form.subscriber.transform_product_template_values'), $this->get('pim_user.context.user'), $this->get('pim_catalog.manager.channel'), 'Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate');
    }

    /**
     * Gets the 'pim_enrich.form.type.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\ProductValueType A Pim\Bundle\EnrichBundle\Form\Type\ProductValueType instance.
     */
    protected function getPimEnrich_Form_Type_ProductValueService()
    {
        return $this->services['pim_enrich.form.type.product_value'] = new \Pim\Bundle\EnrichBundle\Form\Type\ProductValueType('Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', $this->get('pim_enrich.form.subscriber.add_value_field_subscriber'), $this->get('pim_enrich.form.type.product.view'));
    }

    /**
     * Gets the 'pim_enrich.form.type.scopable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\ScopableType A Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\ScopableType instance.
     */
    protected function getPimEnrich_Form_Type_ScopableService()
    {
        return $this->services['pim_enrich.form.type.scopable'] = new \Pim\Bundle\EnrichBundle\Form\Type\AttributeProperty\ScopableType();
    }

    /**
     * Gets the 'pim_enrich.form.type.set_attribute_requirements' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\SetAttributeRequirementsType A Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\SetAttributeRequirementsType instance.
     */
    protected function getPimEnrich_Form_Type_SetAttributeRequirementsService()
    {
        return $this->services['pim_enrich.form.type.set_attribute_requirements'] = new \Pim\Bundle\EnrichBundle\Form\Type\MassEditAction\SetAttributeRequirementsType('Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\SetAttributeRequirements');
    }

    /**
     * Gets the 'pim_enrich.form.type.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\VariantGroupType A Pim\Bundle\EnrichBundle\Form\Type\VariantGroupType instance.
     */
    protected function getPimEnrich_Form_Type_VariantGroupService()
    {
        $this->services['pim_enrich.form.type.variant_group'] = $instance = new \Pim\Bundle\EnrichBundle\Form\Type\VariantGroupType($this->get('pim_catalog.repository.product'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');

        $instance->addEventSubscriber($this->get('pim_enrich.form.subscriber.add_variant_group_template'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.form.type.wysiwyg' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\Type\WysiwygType A Pim\Bundle\EnrichBundle\Form\Type\WysiwygType instance.
     */
    protected function getPimEnrich_Form_Type_WysiwygService()
    {
        return $this->services['pim_enrich.form.type.wysiwyg'] = new \Pim\Bundle\EnrichBundle\Form\Type\WysiwygType();
    }

    /**
     * Gets the 'pim_enrich.form.variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimEnrich_Form_VariantGroupService()
    {
        return $this->services['pim_enrich.form.variant_group'] = $this->get('form.factory')->createNamed('pim_enrich_variant_group_form', 'pim_enrich_variant_group');
    }

    /**
     * Gets the 'pim_enrich.form.view.view_updater.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\ViewUpdaterRegistry A Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\ViewUpdaterRegistry instance.
     */
    protected function getPimEnrich_Form_View_ViewUpdater_RegistryService()
    {
        $this->services['pim_enrich.form.view.view_updater.registry'] = $instance = new \Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\ViewUpdaterRegistry();

        $instance->registerUpdater($this->get('pim_enrich.form.view.view_updater.variant'), 100);

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.form.view.view_updater.variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\VariantViewUpdater A Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\VariantViewUpdater instance.
     */
    protected function getPimEnrich_Form_View_ViewUpdater_VariantService()
    {
        return $this->services['pim_enrich.form.view.view_updater.variant'] = new \Pim\Bundle\EnrichBundle\Form\View\ViewUpdater\VariantViewUpdater($this->get('property_accessor'));
    }

    /**
     * Gets the 'pim_enrich.imagine.local_dir_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Imagine\Cache\Resolver\LocalDirResolver A Pim\Bundle\EnrichBundle\Imagine\Cache\Resolver\LocalDirResolver instance.
     */
    protected function getPimEnrich_Imagine_LocalDirResolverService()
    {
        $this->services['pim_enrich.imagine.local_dir_resolver'] = $instance = new \Pim\Bundle\EnrichBundle\Imagine\Cache\Resolver\LocalDirResolver($this->get('filesystem'), (__DIR__.'/media'));

        $instance->setBasePath('');
        $instance->setFolderPermissions(511);

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.manager.sequential_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Manager\SequentialEditManager A Pim\Bundle\EnrichBundle\Manager\SequentialEditManager instance.
     */
    protected function getPimEnrich_Manager_SequentialEditService()
    {
        return $this->services['pim_enrich.manager.sequential_edit'] = new \Pim\Bundle\EnrichBundle\Manager\SequentialEditManager($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_enrich.repository.sequential_edit'), $this->get('pim_enrich.factory.sequential_edit'), $this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_enrich.mass_edit_action.add_to_groups' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToGroups A Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToGroups instance.
     */
    protected function getPimEnrich_MassEditAction_AddToGroupsService()
    {
        return $this->services['pim_enrich.mass_edit_action.add_to_groups'] = new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToGroups($this->get('pim_catalog.repository.group'), $this->get('pim_catalog.saver.product'));
    }

    /**
     * Gets the 'pim_enrich.mass_edit_action.add_to_variant_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToVariantGroup A Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToVariantGroup instance.
     */
    protected function getPimEnrich_MassEditAction_AddToVariantGroupService()
    {
        return $this->services['pim_enrich.mass_edit_action.add_to_variant_group'] = new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\AddToVariantGroup($this->get('pim_catalog.repository.group'), $this->get('pim_catalog.saver.product'), $this->get('pim_catalog.updater.product_template'), $this->get('validator'), $this->get('pim_catalog.repository.product_mass_action'));
    }

    /**
     * Gets the 'pim_enrich.mass_edit_action.operator.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\MassEditAction\OperatorRegistry A Pim\Bundle\EnrichBundle\MassEditAction\OperatorRegistry instance.
     */
    protected function getPimEnrich_MassEditAction_Operator_RegistryService()
    {
        $a = $this->get('pim_catalog.saver.product');
        $b = $this->get('oro_security.security_facade');

        $c = new \Pim\Bundle\EnrichBundle\MassEditAction\Operator\ProductMassEditOperator($b);
        $c->registerMassEditAction('change-status', new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\ChangeStatus($a), 'pim_enrich_product_change_state');
        $c->registerMassEditAction('edit-common-attributes', new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\EditCommonAttributes($this->get('pim_catalog.builder.product'), $this->get('pim_catalog.updater.product'), $this->get('pim_user.context.user'), $this->get('pim_catalog.context.catalog'), $this->get('pim_catalog.manager.product_mass_action'), $this->get('pim_serializer'), $a), 'pim_enrich_product_edit_attributes');
        $c->registerMassEditAction('classify', new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\Classify($this->get('pim_catalog.manager.category'), $a), 'pim_enrich_product_categories_view');
        $c->registerMassEditAction('change-family', new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\ChangeFamily($a), 'pim_enrich_product_change_family');
        $c->registerMassEditAction('add-to-groups', $this->get('pim_enrich.mass_edit_action.add_to_groups'), 'pim_enrich_product_add_to_groups');
        $c->registerMassEditAction('add-to-variant-group', $this->get('pim_enrich.mass_edit_action.add_to_variant_group'), 'pim_enrich_product_add_to_variant_group');

        $d = new \Pim\Bundle\EnrichBundle\MassEditAction\Operator\FamilyMassEditOperator($b, $this->get('doctrine.orm.default_entity_manager'));
        $d->registerMassEditAction('set-attribute-requirements', new \Pim\Bundle\EnrichBundle\MassEditAction\Operation\SetAttributeRequirements($this->get('pim_catalog.repository.channel'), $this->get('pim_catalog.repository.attribute'), $this->get('pim_catalog.factory.attribute_requirement')), 'pim_enrich_family_edit_attributes');

        $this->services['pim_enrich.mass_edit_action.operator.registry'] = $instance = new \Pim\Bundle\EnrichBundle\MassEditAction\OperatorRegistry();

        $instance->register('product-grid', $c);
        $instance->register('family-grid', $d);

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.normalizer.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionNormalizer A Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionNormalizer instance.
     */
    protected function getPimEnrich_Normalizer_AttributeOptionService()
    {
        return $this->services['pim_enrich.normalizer.attribute_option'] = new \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionNormalizer($this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.manager.attribute_option'));
    }

    /**
     * Gets the 'pim_enrich.normalizer.attribute_option_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueNormalizer A Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueNormalizer instance.
     */
    protected function getPimEnrich_Normalizer_AttributeOptionValueService()
    {
        return $this->services['pim_enrich.normalizer.attribute_option_value'] = new \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueNormalizer();
    }

    /**
     * Gets the 'pim_enrich.normalizer.attribute_option_value_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueCollectionNormalizer A Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueCollectionNormalizer instance.
     */
    protected function getPimEnrich_Normalizer_AttributeOptionValueCollectionService()
    {
        return $this->services['pim_enrich.normalizer.attribute_option_value_collection'] = new \Pim\Bundle\EnrichBundle\Normalizer\AttributeOptionValueCollectionNormalizer();
    }

    /**
     * Gets the 'pim_enrich.provider.colors' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Provider\ColorsProvider A Pim\Bundle\EnrichBundle\Provider\ColorsProvider instance.
     */
    protected function getPimEnrich_Provider_ColorsService()
    {
        return $this->services['pim_enrich.provider.colors'] = new \Pim\Bundle\EnrichBundle\Provider\ColorsProvider(array('gray' => '238,232,213,1', 'white' => '253,246,227,1', 'yellow' => '181,137,0,1', 'orange' => '203,75,22,1', 'magenta' => '211,54,130,1', 'violet' => '108,113,196,1', 'blue' => '38,139,210,1', 'cyan' => '42,161,152,1'));
    }

    /**
     * Gets the 'pim_enrich.repository.sequential_edit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Entity\Repository\SequentialEditRepository A Pim\Bundle\EnrichBundle\Entity\Repository\SequentialEditRepository instance.
     */
    protected function getPimEnrich_Repository_SequentialEditService()
    {
        return $this->services['pim_enrich.repository.sequential_edit'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\EnrichBundle\\Entity\\SequentialEdit');
    }

    /**
     * Gets the 'pim_enrich.twig.attribute_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\AttributeExtension A Pim\Bundle\EnrichBundle\Twig\AttributeExtension instance.
     */
    protected function getPimEnrich_Twig_AttributeExtensionService()
    {
        return $this->services['pim_enrich.twig.attribute_extension'] = new \Pim\Bundle\EnrichBundle\Twig\AttributeExtension(array('pim_catalog_identifier' => 'asterisk', 'pim_catalog_text' => 'font', 'pim_catalog_textarea' => 'file-text-alt', 'pim_catalog_number' => 'sort-by-order', 'pim_catalog_price_collection' => 'money', 'pim_catalog_multiselect' => 'tags', 'pim_catalog_simpleselect' => 'tag', 'pim_catalog_file' => 'file', 'pim_catalog_image' => 'camera-retro', 'pim_catalog_boolean' => 'check', 'pim_catalog_date' => 'calendar', 'pim_catalog_metric' => 'beaker'));
    }

    /**
     * Gets the 'pim_enrich.twig.category_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\CategoryExtension A Pim\Bundle\EnrichBundle\Twig\CategoryExtension instance.
     */
    protected function getPimEnrich_Twig_CategoryExtensionService()
    {
        return $this->services['pim_enrich.twig.category_extension'] = new \Pim\Bundle\EnrichBundle\Twig\CategoryExtension($this->get('pim_catalog.manager.product_category'), 100);
    }

    /**
     * Gets the 'pim_enrich.twig.channel_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\ChannelExtension A Pim\Bundle\EnrichBundle\Twig\ChannelExtension instance.
     */
    protected function getPimEnrich_Twig_ChannelExtensionService()
    {
        return $this->services['pim_enrich.twig.channel_extension'] = new \Pim\Bundle\EnrichBundle\Twig\ChannelExtension($this->get('pim_catalog.manager.channel'), $this->get('pim_enrich.provider.colors'));
    }

    /**
     * Gets the 'pim_enrich.twig.locale_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\LocaleExtension A Pim\Bundle\EnrichBundle\Twig\LocaleExtension instance.
     */
    protected function getPimEnrich_Twig_LocaleExtensionService()
    {
        return $this->services['pim_enrich.twig.locale_extension'] = new \Pim\Bundle\EnrichBundle\Twig\LocaleExtension($this->get('pim_catalog.helper.locale'));
    }

    /**
     * Gets the 'pim_enrich.twig.object_class_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\ObjectClassExtension A Pim\Bundle\EnrichBundle\Twig\ObjectClassExtension instance.
     */
    protected function getPimEnrich_Twig_ObjectClassExtensionService()
    {
        return $this->services['pim_enrich.twig.object_class_extension'] = new \Pim\Bundle\EnrichBundle\Twig\ObjectClassExtension();
    }

    /**
     * Gets the 'pim_enrich.twig.version_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\VersionExtension A Pim\Bundle\EnrichBundle\Twig\VersionExtension instance.
     */
    protected function getPimEnrich_Twig_VersionExtensionService()
    {
        return $this->services['pim_enrich.twig.version_extension'] = new \Pim\Bundle\EnrichBundle\Twig\VersionExtension();
    }

    /**
     * Gets the 'pim_enrich.twig.view_element_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\Twig\ViewElementExtension A Pim\Bundle\EnrichBundle\Twig\ViewElementExtension instance.
     */
    protected function getPimEnrich_Twig_ViewElementExtensionService()
    {
        return $this->services['pim_enrich.twig.view_element_extension'] = new \Pim\Bundle\EnrichBundle\Twig\ViewElementExtension($this->get('pim_enrich.view_element.registry'), $this->get('templating'), true);
    }

    /**
     * Gets the 'pim_enrich.view_element.association_type.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_AssociationType_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.association_type.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.association_type.tab.history', 'PimEnrichBundle:Form:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_association_type_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.association_type.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_AssociationType_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.association_type.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.association_type.tab.property', 'PimEnrichBundle:AssociationType:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Attribute_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.attribute.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute.tab.history', 'PimEnrichBundle:Form:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.edit_form'));
        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_attribute_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute.tab.parameter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Attribute_Tab_ParameterService()
    {
        return $this->services['pim_enrich.view_element.attribute.tab.parameter'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute.tab.parameter', 'PimEnrichBundle:Attribute:Tab/parameter.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute.tab.value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Attribute_Tab_ValueService()
    {
        return $this->services['pim_enrich.view_element.attribute.tab.value'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute.tab.value', 'PimEnrichBundle:Attribute:Tab/value.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute_group.tab.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_AttributeGroup_Tab_AttributeService()
    {
        $this->services['pim_enrich.view_element.attribute_group.tab.attribute'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute_group.tab.attribute', 'PimEnrichBundle:AttributeGroup:Tab/attribute.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.edit_form'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute_group.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_AttributeGroup_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.attribute_group.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute_group.tab.history', 'PimEnrichBundle:Form:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.edit_form'));
        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_attribute_group_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.attribute_group.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_AttributeGroup_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.attribute_group.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.attribute_group.tab.property', 'PimEnrichBundle:AttributeGroup:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.base' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_BaseService()
    {
        return $this->services['pim_enrich.view_element.base'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement();
    }

    /**
     * Gets the 'pim_enrich.view_element.category.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Category_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.category.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.category.tab.history', 'PimEnrichBundle:Form:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.edit_form'));
        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_category_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.category.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Category_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.category.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.category.tab.property', 'PimEnrichBundle:CategoryTree:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.channel.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Channel_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.channel.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.channel.tab.history', 'PimEnrichBundle:Form:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.edit_form'));
        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_channel_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.channel.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Channel_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.channel.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.channel.tab.property', 'PimEnrichBundle:Channel:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.family.tab.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Family_Tab_AttributeService()
    {
        return $this->services['pim_enrich.view_element.family.tab.attribute'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.family.tab.attribute', 'PimEnrichBundle:Family:Tab/attribute.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.family.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Family_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.family.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.family.tab.history', 'PimEnrichBundle:Family:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_family_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.family.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Family_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.family.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.family.tab.property', 'PimEnrichBundle:Family:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.group.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Group_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.group.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.group.tab.history', 'PimEnrichBundle:Group:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_group_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.group.tab.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Group_Tab_ProductService()
    {
        return $this->services['pim_enrich.view_element.group.tab.product'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.group.tab.product', 'PimEnrichBundle:Group:Tab/product.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.group.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Group_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.group.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.group.tab.property', 'PimEnrichBundle:Group:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.group_type.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_GroupType_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.group_type.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.group_type.tab.property', 'PimEnrichBundle:GroupType:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.mass_edit.warning' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_MassEdit_WarningService()
    {
        $this->services['pim_enrich.view_element.mass_edit.warning'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.view_element.mass_edit.warning', 'PimEnrichBundle:MassEditAction:warning.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.non_empty_property'), array('property' => '[form][operation].vars[data].warningMessages'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.product.tab.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Product_Tab_AssociationService()
    {
        $this->services['pim_enrich.view_element.product.tab.association'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.product.tab.association', 'PimEnrichBundle:Product:Tab/association.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_associations_view'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.product.tab.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Product_Tab_AttributeService()
    {
        $this->services['pim_enrich.view_element.product.tab.attribute'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.product.tab.attribute', 'PimEnrichBundle:Product:Tab/attribute.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_product_edit_attributes'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.product.tab.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Product_Tab_CategoryService()
    {
        $this->services['pim_enrich.view_element.product.tab.category'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.product.tab.category', 'PimEnrichBundle:Product:Tab/category.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_product_categories_view'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.product.tab.completeness' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Product_Tab_CompletenessService()
    {
        return $this->services['pim_enrich.view_element.product.tab.completeness'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.product.tab.completeness', 'PimEnrichBundle:Product:Tab/completeness.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.product.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_Product_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.product.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.product.tab.history', 'PimEnrichBundle:Product:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_product_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\ViewElementRegistry A Pim\Bundle\EnrichBundle\ViewElement\ViewElementRegistry instance.
     */
    protected function getPimEnrich_ViewElement_RegistryService()
    {
        $this->services['pim_enrich.view_element.registry'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\ViewElementRegistry();

        $instance->add($this->get('pim_user.view_element.user.tab.general'), 'oro_user_user_form.form_tab', 90);
        $instance->add($this->get('pim_user.view_element.user.tab.additional'), 'oro_user_user_form.form_tab', 100);
        $instance->add($this->get('pim_user.view_element.user.tab.group_and_role'), 'oro_user_user_form.form_tab', 110);
        $instance->add($this->get('pim_user.view_element.user.tab.password'), 'oro_user_user_form.form_tab', 120);
        $instance->add($this->get('pim_user.view_element.user.tab.business_unit'), 'oro_user_user_form.form_tab', 130);
        $instance->add($this->get('pim_enrich.view_element.association_type.tab.property'), 'pim_enrich_association_type_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.association_type.tab.history'), 'pim_enrich_association_type_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.attribute.tab.parameter'), 'pim_enrich_attribute_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.attribute.tab.value'), 'pim_enrich_attribute_form.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.attribute.tab.history'), 'pim_enrich_attribute_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.attribute_group.tab.property'), 'pim_enrich_attribute_group_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.attribute_group.tab.attribute'), 'pim_enrich_attribute_group_form.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.attribute_group.tab.history'), 'pim_enrich_attribute_group_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.category.tab.property'), 'pim_category.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.category.tab.history'), 'pim_category.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.channel.tab.property'), 'pim_enrich_channel_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.channel.tab.history'), 'pim_enrich_channel_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.family.tab.property'), 'pim_enrich_family_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.family.tab.attribute'), 'pim_enrich_family_form.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.family.tab.history'), 'pim_enrich_family_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.group.tab.product'), 'pim_enrich_group_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.group.tab.property'), 'pim_enrich_group_form.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.group.tab.history'), 'pim_enrich_group_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.variant_group.tab.product'), 'pim_enrich_variant_group_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.variant_group.tab.attribute'), 'pim_enrich_variant_group_form.form_tab', 95);
        $instance->add($this->get('pim_enrich.view_element.variant_group.tab.property'), 'pim_enrich_variant_group_form.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.variant_group.tab.history'), 'pim_enrich_variant_group_form.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.group_type.tab.property'), 'pim_enrich_group_type_form.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.mass_edit.warning'), 'pim_mass_edit.warning', 90);
        $instance->add($this->get('pim_enrich.view_element.product.tab.attribute'), 'pim_product_edit.form_tab', 90);
        $instance->add($this->get('pim_enrich.view_element.product.tab.category'), 'pim_product_edit.form_tab', 100);
        $instance->add($this->get('pim_enrich.view_element.product.tab.association'), 'pim_product_edit.form_tab', 110);
        $instance->add($this->get('pim_enrich.view_element.product.tab.completeness'), 'pim_product_edit.form_tab', 120);
        $instance->add($this->get('pim_enrich.view_element.product.tab.history'), 'pim_product_edit.form_tab', 130);
        $instance->add($this->get('pim_comment.view_element.product.tab.comment'), 'pim_product_edit.form_tab', 125);

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.variant_group.tab.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_VariantGroup_Tab_AttributeService()
    {
        $this->services['pim_enrich.view_element.variant_group.tab.attribute'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.variant_group.tab.attribute', 'PimEnrichBundle:VariantGroup:Tab/attribute.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_variant_group_edit_attributes'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.variant_group.tab.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_VariantGroup_Tab_HistoryService()
    {
        $this->services['pim_enrich.view_element.variant_group.tab.history'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.variant_group.tab.history', 'PimEnrichBundle:Group:Tab/history.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.acl'), array('acl' => 'pim_enrich_variant_group_history'));

        return $instance;
    }

    /**
     * Gets the 'pim_enrich.view_element.variant_group.tab.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_VariantGroup_Tab_ProductService()
    {
        return $this->services['pim_enrich.view_element.variant_group.tab.product'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.variant_group.tab.product', 'PimEnrichBundle:Group:Tab/product.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.variant_group.tab.property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimEnrich_ViewElement_VariantGroup_Tab_PropertyService()
    {
        return $this->services['pim_enrich.view_element.variant_group.tab.property'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_enrich.variant_group.tab.property', 'PimEnrichBundle:Group:Tab/property.html.twig');
    }

    /**
     * Gets the 'pim_enrich.view_element.visibility_checker.acl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\Checker\AclVisibilityChecker A Pim\Bundle\EnrichBundle\ViewElement\Checker\AclVisibilityChecker instance.
     */
    protected function getPimEnrich_ViewElement_VisibilityChecker_AclService()
    {
        return $this->services['pim_enrich.view_element.visibility_checker.acl'] = new \Pim\Bundle\EnrichBundle\ViewElement\Checker\AclVisibilityChecker($this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'pim_enrich.view_element.visibility_checker.edit_form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\Checker\EditFormVisibilityChecker A Pim\Bundle\EnrichBundle\ViewElement\Checker\EditFormVisibilityChecker instance.
     */
    protected function getPimEnrich_ViewElement_VisibilityChecker_EditFormService()
    {
        return $this->services['pim_enrich.view_element.visibility_checker.edit_form'] = new \Pim\Bundle\EnrichBundle\ViewElement\Checker\EditFormVisibilityChecker();
    }

    /**
     * Gets the 'pim_enrich.view_element.visibility_checker.non_empty_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\Checker\NonEmptyPropertyVisibilityChecker A Pim\Bundle\EnrichBundle\ViewElement\Checker\NonEmptyPropertyVisibilityChecker instance.
     */
    protected function getPimEnrich_ViewElement_VisibilityChecker_NonEmptyPropertyService()
    {
        return $this->services['pim_enrich.view_element.visibility_checker.non_empty_property'] = new \Pim\Bundle\EnrichBundle\ViewElement\Checker\NonEmptyPropertyVisibilityChecker();
    }

    /**
     * Gets the 'pim_enrich.view_element.visibility_checker.voter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\Checker\VoterVisibilityChecker A Pim\Bundle\EnrichBundle\ViewElement\Checker\VoterVisibilityChecker instance.
     */
    protected function getPimEnrich_ViewElement_VisibilityChecker_VoterService()
    {
        return $this->services['pim_enrich.view_element.visibility_checker.voter'] = new \Pim\Bundle\EnrichBundle\ViewElement\Checker\VoterVisibilityChecker($this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'pim_filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gaufrette\Filesystem A Gaufrette\Filesystem instance.
     */
    protected function getPimFilesystemService()
    {
        return $this->services['pim_filesystem'] = new \Gaufrette\Filesystem(new \Gaufrette\Adapter\Local((dirname(dirname(__DIR__)).'/uploads/product'), true));
    }

    /**
     * Gets the 'pim_filter.ajax_choice_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\AjaxChoiceFilter A Pim\Bundle\FilterBundle\Filter\AjaxChoiceFilter instance.
     */
    protected function getPimFilter_AjaxChoiceFilterService()
    {
        return $this->services['pim_filter.ajax_choice_filter'] = new \Pim\Bundle\FilterBundle\Filter\AjaxChoiceFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.form.type.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType instance.
     */
    protected function getPimFilter_Form_Type_BooleanService()
    {
        return $this->services['pim_filter.form.type.boolean'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_filter.form.type.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\CategoryType A Pim\Bundle\FilterBundle\Form\Type\CategoryType instance.
     */
    protected function getPimFilter_Form_Type_CategoryService()
    {
        return $this->services['pim_filter.form.type.category'] = new \Pim\Bundle\FilterBundle\Form\Type\CategoryType();
    }

    /**
     * Gets the 'pim_filter.form.type.filter.ajax_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\AjaxChoiceFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\AjaxChoiceFilterType instance.
     */
    protected function getPimFilter_Form_Type_Filter_AjaxChoiceService()
    {
        return $this->services['pim_filter.form.type.filter.ajax_choice'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\AjaxChoiceFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_filter.form.type.filter.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\CategoryFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\CategoryFilterType instance.
     */
    protected function getPimFilter_Form_Type_Filter_CategoryService()
    {
        return $this->services['pim_filter.form.type.filter.category'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\CategoryFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_filter.form.type.filter.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\MetricFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\MetricFilterType instance.
     */
    protected function getPimFilter_Form_Type_Filter_MetricService()
    {
        return $this->services['pim_filter.form.type.filter.metric'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\MetricFilterType();
    }

    /**
     * Gets the 'pim_filter.form.type.filter.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\PriceFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\PriceFilterType instance.
     */
    protected function getPimFilter_Form_Type_Filter_PriceService()
    {
        return $this->services['pim_filter.form.type.filter.price'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\PriceFilterType($this->get('pim_catalog.manager.currency'));
    }

    /**
     * Gets the 'pim_filter.form.type.filter.scope' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Form\Type\Filter\ScopeFilterType A Pim\Bundle\FilterBundle\Form\Type\Filter\ScopeFilterType instance.
     */
    protected function getPimFilter_Form_Type_Filter_ScopeService()
    {
        return $this->services['pim_filter.form.type.filter.scope'] = new \Pim\Bundle\FilterBundle\Form\Type\Filter\ScopeFilterType($this->get('translator.default'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_filter.product_category_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\CategoryFilter A Pim\Bundle\FilterBundle\Filter\Product\CategoryFilter instance.
     */
    protected function getPimFilter_ProductCategoryFilterService()
    {
        return $this->services['pim_filter.product_category_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\CategoryFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_catalog.manager.product_category'));
    }

    /**
     * Gets the 'pim_filter.product_completeness_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\CompletenessFilter A Pim\Bundle\FilterBundle\Filter\Product\CompletenessFilter instance.
     */
    protected function getPimFilter_ProductCompletenessFilterService()
    {
        return $this->services['pim_filter.product_completeness_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\CompletenessFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_date_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter instance.
     */
    protected function getPimFilter_ProductDateFilterService()
    {
        return $this->services['pim_filter.product_date_filter'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_enabled_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\EnabledFilter A Pim\Bundle\FilterBundle\Filter\Product\EnabledFilter instance.
     */
    protected function getPimFilter_ProductEnabledFilterService()
    {
        return $this->services['pim_filter.product_enabled_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\EnabledFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_family_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\FamilyFilter A Pim\Bundle\FilterBundle\Filter\Product\FamilyFilter instance.
     */
    protected function getPimFilter_ProductFamilyFilterService()
    {
        return $this->services['pim_filter.product_family_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\FamilyFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_groups_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\GroupsFilter A Pim\Bundle\FilterBundle\Filter\Product\GroupsFilter instance.
     */
    protected function getPimFilter_ProductGroupsFilterService()
    {
        return $this->services['pim_filter.product_groups_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\GroupsFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_user.context.user'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_filter.product_in_group_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\InGroupFilter A Pim\Bundle\FilterBundle\Filter\Product\InGroupFilter instance.
     */
    protected function getPimFilter_ProductInGroupFilterService()
    {
        return $this->services['pim_filter.product_in_group_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\InGroupFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_datagrid.datagrid.request_parameters_extractor'));
    }

    /**
     * Gets the 'pim_filter.product_is_associated_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\IsAssociatedFilter A Pim\Bundle\FilterBundle\Filter\Product\IsAssociatedFilter instance.
     */
    protected function getPimFilter_ProductIsAssociatedFilterService()
    {
        return $this->services['pim_filter.product_is_associated_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\IsAssociatedFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_datagrid.datagrid.request_parameters_extractor'), $this->get('pim_catalog.repository.association_type'), $this->get('pim_catalog.manager.product'));
    }

    /**
     * Gets the 'pim_filter.product_scope_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\Product\ScopeFilter A Pim\Bundle\FilterBundle\Filter\Product\ScopeFilter instance.
     */
    protected function getPimFilter_ProductScopeFilterService()
    {
        return $this->services['pim_filter.product_scope_filter'] = new \Pim\Bundle\FilterBundle\Filter\Product\ScopeFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_filter.product_utility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductFilterUtility A Pim\Bundle\FilterBundle\Filter\ProductFilterUtility instance.
     */
    protected function getPimFilter_ProductUtilityService()
    {
        return $this->services['pim_filter.product_utility'] = new \Pim\Bundle\FilterBundle\Filter\ProductFilterUtility();
    }

    /**
     * Gets the 'pim_filter.product_value_boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\BooleanFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\BooleanFilter instance.
     */
    protected function getPimFilter_ProductValueBooleanService()
    {
        return $this->services['pim_filter.product_value_boolean'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\BooleanFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_value_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\ChoiceFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\ChoiceFilter instance.
     */
    protected function getPimFilter_ProductValueChoiceService()
    {
        return $this->services['pim_filter.product_value_choice'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\ChoiceFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('pim_user.context.user'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', $this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_filter.product_value_date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter instance.
     */
    protected function getPimFilter_ProductValueDateService()
    {
        return $this->services['pim_filter.product_value_date'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\DateRangeFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_value_datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\DateTimeRangeFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\DateTimeRangeFilter instance.
     */
    protected function getPimFilter_ProductValueDatetimeService()
    {
        return $this->services['pim_filter.product_value_datetime'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\DateTimeRangeFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_value_metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\MetricFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\MetricFilter instance.
     */
    protected function getPimFilter_ProductValueMetricService()
    {
        return $this->services['pim_filter.product_value_metric'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\MetricFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'), $this->get('translator.default'), $this->get('akeneo_measure.manager'));
    }

    /**
     * Gets the 'pim_filter.product_value_number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\NumberFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\NumberFilter instance.
     */
    protected function getPimFilter_ProductValueNumberService()
    {
        return $this->services['pim_filter.product_value_number'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\NumberFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_value_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\PriceFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\PriceFilter instance.
     */
    protected function getPimFilter_ProductValuePriceService()
    {
        return $this->services['pim_filter.product_value_price'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\PriceFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_filter.product_value_string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\FilterBundle\Filter\ProductValue\StringFilter A Pim\Bundle\FilterBundle\Filter\ProductValue\StringFilter instance.
     */
    protected function getPimFilter_ProductValueStringService()
    {
        return $this->services['pim_filter.product_value_string'] = new \Pim\Bundle\FilterBundle\Filter\ProductValue\StringFilter($this->get('form.factory'), $this->get('pim_filter.product_utility'));
    }

    /**
     * Gets the 'pim_import_export.controller.export_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Controller\ExportExecutionController A Pim\Bundle\ImportExportBundle\Controller\ExportExecutionController instance.
     * 
     * @throws InactiveScopeException when the 'pim_import_export.controller.export_execution' service is requested while the 'request' scope is not active
     */
    protected function getPimImportExport_Controller_ExportExecutionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_import_export.controller.export_execution', 'request');
        }

        return $this->services['pim_import_export.controller.export_execution'] = $this->scopedServices['request']['pim_import_export.controller.export_execution'] = new \Pim\Bundle\ImportExportBundle\Controller\ExportExecutionController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('akeneo_batch.logger.batch_log_handler'), $this->get('pim_base_connector.event_listener.archivist'), 'export', $this->get('pim_serializer'), $this->get('akeneo_batch.manager.job_execution'));
    }

    /**
     * Gets the 'pim_import_export.controller.export_profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Controller\ExportProfileController A Pim\Bundle\ImportExportBundle\Controller\ExportProfileController instance.
     * 
     * @throws InactiveScopeException when the 'pim_import_export.controller.export_profile' service is requested while the 'request' scope is not active
     */
    protected function getPimImportExport_Controller_ExportProfileService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_import_export.controller.export_profile', 'request');
        }

        return $this->services['pim_import_export.controller.export_profile'] = $this->scopedServices['request']['pim_import_export.controller.export_profile'] = new \Pim\Bundle\ImportExportBundle\Controller\ExportProfileController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('akeneo_batch.connectors'), 'export', dirname(dirname(__DIR__)), 'dev', $this->get('pim_import_export.form.type.job_instance'), $this->get('pim_import_export.factory.job_instance'), $this->get('pim_import_export.manager.job'));
    }

    /**
     * Gets the 'pim_import_export.controller.import_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Controller\ImportExecutionController A Pim\Bundle\ImportExportBundle\Controller\ImportExecutionController instance.
     * 
     * @throws InactiveScopeException when the 'pim_import_export.controller.import_execution' service is requested while the 'request' scope is not active
     */
    protected function getPimImportExport_Controller_ImportExecutionService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_import_export.controller.import_execution', 'request');
        }

        return $this->services['pim_import_export.controller.import_execution'] = $this->scopedServices['request']['pim_import_export.controller.import_execution'] = new \Pim\Bundle\ImportExportBundle\Controller\ImportExecutionController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('akeneo_batch.logger.batch_log_handler'), $this->get('pim_base_connector.event_listener.archivist'), 'import', $this->get('pim_serializer'), $this->get('akeneo_batch.manager.job_execution'));
    }

    /**
     * Gets the 'pim_import_export.controller.import_profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Controller\ImportProfileController A Pim\Bundle\ImportExportBundle\Controller\ImportProfileController instance.
     * 
     * @throws InactiveScopeException when the 'pim_import_export.controller.import_profile' service is requested while the 'request' scope is not active
     */
    protected function getPimImportExport_Controller_ImportProfileService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_import_export.controller.import_profile', 'request');
        }

        return $this->services['pim_import_export.controller.import_profile'] = $this->scopedServices['request']['pim_import_export.controller.import_profile'] = new \Pim\Bundle\ImportExportBundle\Controller\ImportProfileController($this->get('request'), $this->get('templating'), $this->get('router'), $this->get('security.context'), $this->get('form.factory'), $this->get('validator'), $this->get('translator.default'), $this->get('event_dispatcher'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('akeneo_batch.connectors'), 'import', dirname(dirname(__DIR__)), 'dev', $this->get('pim_import_export.form.type.job_instance'), $this->get('pim_import_export.factory.job_instance'), $this->get('pim_import_export.manager.job'));
    }

    /**
     * Gets the 'pim_import_export.datagrid.provider.job' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Datagrid\JobDatagridProvider A Pim\Bundle\ImportExportBundle\Datagrid\JobDatagridProvider instance.
     */
    protected function getPimImportExport_Datagrid_Provider_JobService()
    {
        return $this->services['pim_import_export.datagrid.provider.job'] = new \Pim\Bundle\ImportExportBundle\Datagrid\JobDatagridProvider($this->get('akeneo_batch.connectors'));
    }

    /**
     * Gets the 'pim_import_export.event_listener.inject_job_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener A Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener instance.
     */
    protected function getPimImportExport_EventListener_InjectJobTypeService()
    {
        return $this->services['pim_import_export.event_listener.inject_job_type'] = new \Pim\Bundle\DataGridBundle\EventListener\AddParametersToGridListener(array(0 => 'jobType'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_import_export.factory.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Factory\JobInstanceFactory A Pim\Bundle\ImportExportBundle\Factory\JobInstanceFactory instance.
     */
    protected function getPimImportExport_Factory_JobInstanceService()
    {
        return $this->services['pim_import_export.factory.job_instance'] = new \Pim\Bundle\ImportExportBundle\Factory\JobInstanceFactory('Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance');
    }

    /**
     * Gets the 'pim_import_export.form.jobinstance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getPimImportExport_Form_JobinstanceService()
    {
        return $this->services['pim_import_export.form.jobinstance'] = $this->get('form.factory')->createNamed('pim_import_export_jobInstance_type_form', 'pim_import_export_jobInstance_type');
    }

    /**
     * Gets the 'pim_import_export.form.type.job_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Form\Type\JobConfigurationType A Pim\Bundle\ImportExportBundle\Form\Type\JobConfigurationType instance.
     */
    protected function getPimImportExport_Form_Type_JobConfigurationService()
    {
        return $this->services['pim_import_export.form.type.job_configuration'] = new \Pim\Bundle\ImportExportBundle\Form\Type\JobConfigurationType();
    }

    /**
     * Gets the 'pim_import_export.form.type.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Form\Type\JobInstanceType A Pim\Bundle\ImportExportBundle\Form\Type\JobInstanceType instance.
     */
    protected function getPimImportExport_Form_Type_JobInstanceService()
    {
        return $this->services['pim_import_export.form.type.job_instance'] = new \Pim\Bundle\ImportExportBundle\Form\Type\JobInstanceType($this->get('akeneo_batch.connectors'), $this->get('translator.default'));
    }

    /**
     * Gets the 'pim_import_export.form.type.step_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Form\Type\StepConfigurationType A Pim\Bundle\ImportExportBundle\Form\Type\StepConfigurationType instance.
     */
    protected function getPimImportExport_Form_Type_StepConfigurationService()
    {
        return $this->services['pim_import_export.form.type.step_configuration'] = new \Pim\Bundle\ImportExportBundle\Form\Type\StepConfigurationType();
    }

    /**
     * Gets the 'pim_import_export.form.type.step_element_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Form\Type\StepElementConfigurationType A Pim\Bundle\ImportExportBundle\Form\Type\StepElementConfigurationType instance.
     */
    protected function getPimImportExport_Form_Type_StepElementConfigurationService()
    {
        return $this->services['pim_import_export.form.type.step_element_configuration'] = new \Pim\Bundle\ImportExportBundle\Form\Type\StepElementConfigurationType();
    }

    /**
     * Gets the 'pim_import_export.manager.job' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Manager\JobManager A Pim\Bundle\ImportExportBundle\Manager\JobManager instance.
     */
    protected function getPimImportExport_Manager_JobService()
    {
        return $this->services['pim_import_export.manager.job'] = new \Pim\Bundle\ImportExportBundle\Manager\JobManager($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'), 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution');
    }

    /**
     * Gets the 'pim_import_export.manager.job_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Manager\JobExecutionManager A Pim\Bundle\ImportExportBundle\Manager\JobExecutionManager instance.
     */
    protected function getPimImportExport_Manager_JobExecutionService()
    {
        return $this->services['pim_import_export.manager.job_execution'] = new \Pim\Bundle\ImportExportBundle\Manager\JobExecutionManager($this->get('pim_import_export.repository.job_execution'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'pim_import_export.normalizer.job_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Normalizer\JobExecutionNormalizer A Pim\Bundle\ImportExportBundle\Normalizer\JobExecutionNormalizer instance.
     */
    protected function getPimImportExport_Normalizer_JobExecutionService()
    {
        return $this->services['pim_import_export.normalizer.job_execution'] = new \Pim\Bundle\ImportExportBundle\Normalizer\JobExecutionNormalizer($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_import_export.normalizer.step_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Normalizer\StepExecutionNormalizer A Pim\Bundle\ImportExportBundle\Normalizer\StepExecutionNormalizer instance.
     */
    protected function getPimImportExport_Normalizer_StepExecutionService()
    {
        return $this->services['pim_import_export.normalizer.step_execution'] = new \Pim\Bundle\ImportExportBundle\Normalizer\StepExecutionNormalizer($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_import_export.repository.job_execution' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Entity\Repository\JobExecutionRepository A Pim\Bundle\ImportExportBundle\Entity\Repository\JobExecutionRepository instance.
     */
    protected function getPimImportExport_Repository_JobExecutionService()
    {
        return $this->services['pim_import_export.repository.job_execution'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution');
    }

    /**
     * Gets the 'pim_import_export.repository.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Entity\Repository\JobInstanceRepository A Pim\Bundle\ImportExportBundle\Entity\Repository\JobInstanceRepository instance.
     */
    protected function getPimImportExport_Repository_JobInstanceService()
    {
        return $this->services['pim_import_export.repository.job_instance'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance');
    }

    /**
     * Gets the 'pim_import_export.twig.normalize_configuration_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Twig\NormalizeConfigurationExtension A Pim\Bundle\ImportExportBundle\Twig\NormalizeConfigurationExtension instance.
     */
    protected function getPimImportExport_Twig_NormalizeConfigurationExtensionService()
    {
        return $this->services['pim_import_export.twig.normalize_configuration_extension'] = new \Pim\Bundle\ImportExportBundle\Twig\NormalizeConfigurationExtension($this->get('translator.default'));
    }

    /**
     * Gets the 'pim_import_export.validator.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\ImportExportBundle\Validator\Constraints\JobInstanceValidator A Pim\Bundle\ImportExportBundle\Validator\Constraints\JobInstanceValidator instance.
     */
    protected function getPimImportExport_Validator_JobInstanceService()
    {
        return $this->services['pim_import_export.validator.job_instance'] = new \Pim\Bundle\ImportExportBundle\Validator\Constraints\JobInstanceValidator($this->get('akeneo_batch.connectors'));
    }

    /**
     * Gets the 'pim_installer.fixture_loader.configuration_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\InstallerBundle\FixtureLoader\ConfigurationRegistry A Pim\Bundle\InstallerBundle\FixtureLoader\ConfigurationRegistry instance.
     */
    protected function getPimInstaller_FixtureLoader_ConfigurationRegistryService()
    {
        return $this->services['pim_installer.fixture_loader.configuration_registry'] = new \Pim\Bundle\InstallerBundle\FixtureLoader\ConfigurationRegistry($this, $this->get('property_accessor'), array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle', 'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle', 'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle', 'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle', 'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle', 'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle', 'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle', 'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle', 'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle', 'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle', 'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle', 'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle', 'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle', 'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle', 'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'), __DIR__, true);
    }

    /**
     * Gets the 'pim_installer.fixture_loader.job_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\InstallerBundle\FixtureLoader\FixtureJobLoader A Pim\Bundle\InstallerBundle\FixtureLoader\FixtureJobLoader instance.
     */
    protected function getPimInstaller_FixtureLoader_JobLoaderService()
    {
        return $this->services['pim_installer.fixture_loader.job_loader'] = new \Pim\Bundle\InstallerBundle\FixtureLoader\FixtureJobLoader($this, array(0 => 'PimInstallerBundle/Resources/config/fixtures_jobs.yml'));
    }

    /**
     * Gets the 'pim_installer.fixture_loader.loader_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\InstallerBundle\FixtureLoader\LoaderFactory A Pim\Bundle\InstallerBundle\FixtureLoader\LoaderFactory instance.
     */
    protected function getPimInstaller_FixtureLoader_LoaderFactoryService()
    {
        return $this->services['pim_installer.fixture_loader.loader_factory'] = new \Pim\Bundle\InstallerBundle\FixtureLoader\LoaderFactory($this->get('pim_transform.cache.doctrine_cache'), $this->get('pim_installer.fixture_loader.configuration_registry'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'pim_installer.fixture_loader.multiple_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\InstallerBundle\FixtureLoader\MultipleLoader A Pim\Bundle\InstallerBundle\FixtureLoader\MultipleLoader instance.
     */
    protected function getPimInstaller_FixtureLoader_MultipleLoaderService()
    {
        return $this->services['pim_installer.fixture_loader.multiple_loader'] = new \Pim\Bundle\InstallerBundle\FixtureLoader\MultipleLoader($this->get('pim_installer.fixture_loader.configuration_registry'), $this->get('pim_installer.fixture_loader.loader_factory'));
    }

    /**
     * Gets the 'pim_installer.reader.file.yaml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\InstallerBundle\FixtureLoader\YamlReader A Pim\Bundle\InstallerBundle\FixtureLoader\YamlReader instance.
     */
    protected function getPimInstaller_Reader_File_YamlService()
    {
        return $this->services['pim_installer.reader.file.yaml'] = new \Pim\Bundle\InstallerBundle\FixtureLoader\YamlReader();
    }

    /**
     * Gets the 'pim_internal_api_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getPimInternalApiSerializerService()
    {
        return $this->services['pim_internal_api_serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => $this->get('pim_enrich.normalizer.attribute_option_value_collection'), 1 => $this->get('pim_enrich.normalizer.attribute_option'), 2 => $this->get('pim_enrich.normalizer.attribute_option_value')), array(0 => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the 'pim_notification.controller.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Controller\NotificationController A Pim\Bundle\NotificationBundle\Controller\NotificationController instance.
     */
    protected function getPimNotification_Controller_NotificationService()
    {
        return $this->services['pim_notification.controller.notification'] = new \Pim\Bundle\NotificationBundle\Controller\NotificationController($this->get('templating'), $this->get('pim_notification.manager.notification'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_notification.event_subscriber.job_execution_notifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\EventSubscriber\JobExecutionNotifier A Pim\Bundle\NotificationBundle\EventSubscriber\JobExecutionNotifier instance.
     */
    protected function getPimNotification_EventSubscriber_JobExecutionNotifierService()
    {
        return $this->services['pim_notification.event_subscriber.job_execution_notifier'] = new \Pim\Bundle\NotificationBundle\EventSubscriber\JobExecutionNotifier($this->get('pim_notification.manager.notification'));
    }

    /**
     * Gets the 'pim_notification.factory.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Factory\NotificationFactory A Pim\Bundle\NotificationBundle\Factory\NotificationFactory instance.
     */
    protected function getPimNotification_Factory_NotificationService()
    {
        return $this->services['pim_notification.factory.notification'] = new \Pim\Bundle\NotificationBundle\Factory\NotificationFactory('Pim\\Bundle\\NotificationBundle\\Entity\\Notification');
    }

    /**
     * Gets the 'pim_notification.factory.user_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Factory\UserNotificationFactory A Pim\Bundle\NotificationBundle\Factory\UserNotificationFactory instance.
     */
    protected function getPimNotification_Factory_UserNotificationService()
    {
        return $this->services['pim_notification.factory.user_notification'] = new \Pim\Bundle\NotificationBundle\Factory\UserNotificationFactory('Pim\\Bundle\\NotificationBundle\\Entity\\UserNotification');
    }

    /**
     * Gets the 'pim_notification.manager.notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Manager\NotificationManager A Pim\Bundle\NotificationBundle\Manager\NotificationManager instance.
     */
    protected function getPimNotification_Manager_NotificationService()
    {
        return $this->services['pim_notification.manager.notification'] = new \Pim\Bundle\NotificationBundle\Manager\NotificationManager($this->get('doctrine.orm.default_entity_manager'), $this->get('pim_notification.repository.user_notification'), $this->get('pim_notification.factory.notification'), $this->get('pim_notification.factory.user_notification'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'pim_notification.repository.user_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Entity\Repository\UserNotificationRepository A Pim\Bundle\NotificationBundle\Entity\Repository\UserNotificationRepository instance.
     */
    protected function getPimNotification_Repository_UserNotificationService()
    {
        return $this->services['pim_notification.repository.user_notification'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\NotificationBundle\\Entity\\UserNotification');
    }

    /**
     * Gets the 'pim_notification.twig.notification_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\NotificationBundle\Twig\NotificationExtension A Pim\Bundle\NotificationBundle\Twig\NotificationExtension instance.
     */
    protected function getPimNotification_Twig_NotificationExtensionService()
    {
        return $this->services['pim_notification.twig.notification_extension'] = new \Pim\Bundle\NotificationBundle\Twig\NotificationExtension($this->get('pim_notification.manager.notification'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_pdf_generator.builder.dompdf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\PdfGeneratorBundle\Builder\DompdfBuilder A Pim\Bundle\PdfGeneratorBundle\Builder\DompdfBuilder instance.
     */
    protected function getPimPdfGenerator_Builder_DompdfService()
    {
        return $this->services['pim_pdf_generator.builder.dompdf'] = new \Pim\Bundle\PdfGeneratorBundle\Builder\DompdfBuilder(dirname(dirname(__DIR__)));
    }

    /**
     * Gets the 'pim_pdf_generator.controller.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\PdfGeneratorBundle\Controller\ProductController A Pim\Bundle\PdfGeneratorBundle\Controller\ProductController instance.
     * 
     * @throws InactiveScopeException when the 'pim_pdf_generator.controller.product' service is requested while the 'request' scope is not active
     */
    protected function getPimPdfGenerator_Controller_ProductService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('pim_pdf_generator.controller.product', 'request');
        }

        return $this->services['pim_pdf_generator.controller.product'] = $this->scopedServices['request']['pim_pdf_generator.controller.product'] = new \Pim\Bundle\PdfGeneratorBundle\Controller\ProductController($this->get('pim_catalog.manager.product'), $this->get('pim_pdf_generator.renderer.registry'));
    }

    /**
     * Gets the 'pim_pdf_generator.renderer.product_pdf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\PdfGeneratorBundle\Renderer\ProductPdfRenderer A Pim\Bundle\PdfGeneratorBundle\Renderer\ProductPdfRenderer instance.
     */
    protected function getPimPdfGenerator_Renderer_ProductPdfService()
    {
        return $this->services['pim_pdf_generator.renderer.product_pdf'] = new \Pim\Bundle\PdfGeneratorBundle\Renderer\ProductPdfRenderer($this->get('templating'), 'PimPdfGeneratorBundle:Product:renderPdf.html.twig', $this->get('pim_pdf_generator.builder.dompdf'), (dirname(dirname(__DIR__)).'/uploads/product'), NULL);
    }

    /**
     * Gets the 'pim_pdf_generator.renderer.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\PdfGeneratorBundle\Renderer\RendererRegistry A Pim\Bundle\PdfGeneratorBundle\Renderer\RendererRegistry instance.
     */
    protected function getPimPdfGenerator_Renderer_RegistryService()
    {
        $this->services['pim_pdf_generator.renderer.registry'] = $instance = new \Pim\Bundle\PdfGeneratorBundle\Renderer\RendererRegistry();

        $instance->addRenderer($this->get('pim_pdf_generator.renderer.product_pdf'));

        return $instance;
    }

    /**
     * Gets the 'pim_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getPimSerializerService()
    {
        $a = new \Pim\Bundle\TransformBundle\Normalizer\Flat\ProductNormalizer();
        $a->setFilters(array(0 => $this->get('pim_serializer.filter.flat_product_value')));

        return $this->services['pim_serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => $this->get('pim_import_export.normalizer.job_execution'), 1 => $this->get('pim_import_export.normalizer.step_execution'), 2 => $this->get('pim_serializer.normalizer.product'), 3 => $this->get('pim_serializer.normalizer.product_values'), 4 => $this->get('pim_serializer.normalizer.product_value'), 5 => $this->get('pim_serializer.normalizer.product_price'), 6 => $this->get('pim_serializer.normalizer.metric'), 7 => $this->get('pim_serializer.normalizer.media'), 8 => $this->get('pim_serializer.normalizer.datetime'), 9 => $this->get('pim_serializer.normalizer.category'), 10 => $this->get('pim_serializer.normalizer.attribute'), 11 => $this->get('pim_serializer.normalizer.attribute_option'), 12 => $this->get('pim_serializer.normalizer.family'), 13 => $this->get('pim_serializer.normalizer.attribute_group'), 14 => $this->get('pim_serializer.normalizer.association_type'), 15 => $this->get('pim_serializer.normalizer.group'), 16 => $this->get('pim_serializer.normalizer.job_instance'), 17 => $this->get('pim_serializer.normalizer.channel'), 18 => $this->get('pim_serializer.normalizer.label_translation'), 19 => $this->get('pim_serializer.denormalizer.product_values'), 20 => $this->get('pim_serializer.denormalizer.product_value'), 21 => $this->get('pim_serializer.denormalizer.base_value'), 22 => $this->get('pim_serializer.denormalizer.attribute_option'), 23 => $this->get('pim_serializer.denormalizer.attribute_options'), 24 => $this->get('pim_serializer.denormalizer.prices'), 25 => $this->get('pim_serializer.denormalizer.metric'), 26 => $this->get('pim_serializer.denormalizer.datetime'), 27 => $this->get('pim_serializer.denormalizer.media'), 28 => $this->get('pim_serializer.denormalizer.boolean'), 29 => $a, 30 => new \Pim\Bundle\TransformBundle\Normalizer\Flat\ProductValueNormalizer(), 31 => $this->get('pim_serializer.normalizer.flat.category'), 32 => $this->get('pim_serializer.normalizer.flat.attribute'), 33 => $this->get('pim_serializer.normalizer.flat.family'), 34 => $this->get('pim_serializer.normalizer.flat.attribute_group'), 35 => $this->get('pim_serializer.normalizer.flat.association_type'), 36 => $this->get('pim_serializer.normalizer.flat.group'), 37 => $this->get('pim_serializer.normalizer.flat.job_instance'), 38 => $this->get('pim_serializer.normalizer.flat.channel'), 39 => $this->get('pim_serializer.normalizer.flat.label_translation'), 40 => $this->get('pim_serializer.normalizer.flat.collection'), 41 => $this->get('pim_serializer.normalizer.flat.datetime'), 42 => $this->get('pim_serializer.normalizer.flat.media'), 43 => $this->get('pim_serializer.normalizer.flat.metric'), 44 => $this->get('pim_serializer.normalizer.flat.option'), 45 => $this->get('pim_serializer.normalizer.flat.price'), 46 => $this->get('pim_serializer.denormalizer.flat.product'), 47 => $this->get('pim_serializer.denormalizer.flat.family'), 48 => $this->get('pim_serializer.denormalizer.flat.category'), 49 => $this->get('pim_serializer.denormalizer.flat.group'), 50 => $this->get('pim_serializer.denormalizer.flat.association'), 51 => $this->get('pim_serializer.denormalizer.flat.product_value'), 52 => $this->get('pim_serializer.denormalizer.flat.base_value'), 53 => $this->get('pim_serializer.denormalizer.flat.attribute_option'), 54 => $this->get('pim_serializer.denormalizer.flat.attribute_options'), 55 => $this->get('pim_serializer.denormalizer.flat.prices'), 56 => $this->get('pim_serializer.denormalizer.flat.metric'), 57 => $this->get('pim_serializer.denormalizer.flat.datetime'), 58 => $this->get('pim_serializer.denormalizer.flat.media'), 59 => $this->get('pim_serializer.denormalizer.flat.product_values')), array(0 => new \Symfony\Component\Serializer\Encoder\XmlEncoder(), 1 => new \Symfony\Component\Serializer\Encoder\JsonEncoder(), 2 => new \Pim\Bundle\TransformBundle\Encoder\CsvEncoder()));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_AttributeOptionService()
    {
        return $this->services['pim_serializer.denormalizer.attribute_option'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionDenormalizer(array(0 => 'pim_catalog_simpleselect'), $this->get('pim_catalog.repository.attribute_option'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.attribute_options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionsDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionsDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_AttributeOptionsService()
    {
        return $this->services['pim_serializer.denormalizer.attribute_options'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\AttributeOptionsDenormalizer(array(0 => 'pim_catalog_multiselect'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.base_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BaseValueDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BaseValueDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_BaseValueService()
    {
        return $this->services['pim_serializer.denormalizer.base_value'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BaseValueDenormalizer(array(0 => 'pim_catalog_identifier', 1 => 'pim_catalog_text', 2 => 'pim_catalog_textarea', 3 => 'pim_catalog_number'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BooleanDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BooleanDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_BooleanService()
    {
        return $this->services['pim_serializer.denormalizer.boolean'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\BooleanDenormalizer(array(0 => 'pim_catalog_boolean'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\DateTimeDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\DateTimeDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_DatetimeService()
    {
        return $this->services['pim_serializer.denormalizer.datetime'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\DateTimeDenormalizer(array(0 => 'pim_catalog_date'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\AssociationDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\AssociationDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_AssociationService()
    {
        return $this->services['pim_serializer.denormalizer.flat.association'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\AssociationDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\Association', 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType', 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_AttributeOptionService()
    {
        return $this->services['pim_serializer.denormalizer.flat.attribute_option'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionDenormalizer(array(0 => 'pim_catalog_simpleselect'), $this->get('pim_catalog.repository.attribute_option'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.attribute_options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionsDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionsDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_AttributeOptionsService()
    {
        return $this->services['pim_serializer.denormalizer.flat.attribute_options'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\AttributeOptionsDenormalizer(array(0 => 'pim_catalog_multiselect'), $this->get('pim_serializer.denormalizer.flat.attribute_option'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.base_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\BaseValueDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\BaseValueDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_BaseValueService()
    {
        return $this->services['pim_serializer.denormalizer.flat.base_value'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\BaseValueDenormalizer(array(0 => 'pim_catalog_identifier', 1 => 'pim_catalog_text', 2 => 'pim_catalog_textarea', 3 => 'pim_catalog_number', 4 => 'pim_catalog_boolean'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\CategoryDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\CategoryDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_CategoryService()
    {
        return $this->services['pim_serializer.denormalizer.flat.category'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\CategoryDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Category');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\DateTimeDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\DateTimeDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_DatetimeService()
    {
        return $this->services['pim_serializer.denormalizer.flat.datetime'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\DateTimeDenormalizer(array(0 => 'pim_catalog_date'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\FamilyDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\FamilyDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_FamilyService()
    {
        return $this->services['pim_serializer.denormalizer.flat.family'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\FamilyDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Family');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\GroupDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\GroupDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_GroupService()
    {
        return $this->services['pim_serializer.denormalizer.flat.group'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\GroupDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', $this->get('pim_catalog.repository.group_type'), $this->get('pim_catalog.repository.attribute'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MediaDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MediaDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_MediaService()
    {
        return $this->services['pim_serializer.denormalizer.flat.media'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MediaDenormalizer(array(0 => 'pim_catalog_image', 1 => 'pim_catalog_file'), $this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MetricDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MetricDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_MetricService()
    {
        return $this->services['pim_serializer.denormalizer.flat.metric'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\MetricDenormalizer(array(0 => 'pim_catalog_metric'), $this->get('pim_catalog.factory.metric'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.prices' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\PricesDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\PricesDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_PricesService()
    {
        return $this->services['pim_serializer.denormalizer.flat.prices'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValue\PricesDenormalizer(array(0 => 'pim_catalog_price_collection'), $this->get('pim_catalog.builder.product'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_ProductService()
    {
        return $this->services['pim_serializer.denormalizer.flat.product'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product', $this->get('pim_catalog.builder.product'), $this->get('pim_transform.builder.field_name'), 'Pim\\Bundle\\CatalogBundle\\Model\\Association', 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', 'Pim\\Bundle\\CatalogBundle\\Entity\\Family', 'Pim\\Bundle\\CatalogBundle\\Entity\\Group', 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValueDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValueDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_ProductValueService()
    {
        return $this->services['pim_serializer.denormalizer.flat.product_value'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValueDenormalizer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.flat.product_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValuesDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValuesDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_Flat_ProductValuesService()
    {
        return $this->services['pim_serializer.denormalizer.flat.product_values'] = new \Pim\Bundle\TransformBundle\Denormalizer\Flat\ProductValuesDenormalizer($this->get('pim_serializer.denormalizer.flat.product_value'), $this->get('pim_transform.builder.field_name'), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MediaDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MediaDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_MediaService()
    {
        return $this->services['pim_serializer.denormalizer.media'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MediaDenormalizer(array(0 => 'pim_catalog_image', 1 => 'pim_catalog_file'), $this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MetricDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MetricDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_MetricService()
    {
        return $this->services['pim_serializer.denormalizer.metric'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\MetricDenormalizer(array(0 => 'pim_catalog_metric'), $this->get('pim_catalog.factory.metric'));
    }

    /**
     * Gets the 'pim_serializer.denormalizer.prices' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\PricesDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\PricesDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_PricesService()
    {
        return $this->services['pim_serializer.denormalizer.prices'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValue\PricesDenormalizer(array(0 => 'pim_catalog_price_collection'), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductPrice');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValueDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValueDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_ProductValueService()
    {
        return $this->services['pim_serializer.denormalizer.product_value'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValueDenormalizer('Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_serializer.denormalizer.product_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValuesDenormalizer A Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValuesDenormalizer instance.
     */
    protected function getPimSerializer_Denormalizer_ProductValuesService()
    {
        return $this->services['pim_serializer.denormalizer.product_values'] = new \Pim\Bundle\TransformBundle\Denormalizer\Structured\ProductValuesDenormalizer($this->get('pim_serializer.denormalizer.product_value'), $this->get('pim_catalog.repository.attribute'), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue');
    }

    /**
     * Gets the 'pim_serializer.filter.flat_product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Filter\FlatProductValueNormalizerFilter A Pim\Bundle\TransformBundle\Normalizer\Filter\FlatProductValueNormalizerFilter instance.
     */
    protected function getPimSerializer_Filter_FlatProductValueService()
    {
        return $this->services['pim_serializer.filter.flat_product_value'] = new \Pim\Bundle\TransformBundle\Normalizer\Filter\FlatProductValueNormalizerFilter();
    }

    /**
     * Gets the 'pim_serializer.filter.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Filter\ProductValueNormalizerFilter A Pim\Bundle\TransformBundle\Normalizer\Filter\ProductValueNormalizerFilter instance.
     */
    protected function getPimSerializer_Filter_ProductValueService()
    {
        return $this->services['pim_serializer.filter.product_value'] = new \Pim\Bundle\TransformBundle\Normalizer\Filter\ProductValueNormalizerFilter();
    }

    /**
     * Gets the 'pim_serializer.normalizer.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\AssociationTypeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\AssociationTypeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_AssociationTypeService()
    {
        return $this->services['pim_serializer.normalizer.association_type'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\AssociationTypeNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_AttributeService()
    {
        return $this->services['pim_serializer.normalizer.attribute'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeGroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeGroupNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_AttributeGroupService()
    {
        return $this->services['pim_serializer.normalizer.attribute_group'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeGroupNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_AttributeOptionService()
    {
        return $this->services['pim_serializer.normalizer.attribute_option'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\CategoryNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\CategoryNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_CategoryService()
    {
        return $this->services['pim_serializer.normalizer.category'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\CategoryNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ChannelNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ChannelNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_ChannelService()
    {
        return $this->services['pim_serializer.normalizer.channel'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ChannelNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_DatetimeService()
    {
        return $this->services['pim_serializer.normalizer.datetime'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\FamilyNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\FamilyNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_FamilyService()
    {
        return $this->services['pim_serializer.normalizer.family'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\FamilyNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_AssociationTypeService()
    {
        return $this->services['pim_serializer.normalizer.flat.association_type'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_AttributeService()
    {
        return $this->services['pim_serializer.normalizer.flat.attribute'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_AttributeGroupService()
    {
        return $this->services['pim_serializer.normalizer.flat.attribute_group'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_CategoryService()
    {
        return $this->services['pim_serializer.normalizer.flat.category'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_ChannelService()
    {
        return $this->services['pim_serializer.normalizer.flat.channel'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_CollectionService()
    {
        return $this->services['pim_serializer.normalizer.flat.collection'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_DatetimeService()
    {
        return $this->services['pim_serializer.normalizer.flat.datetime'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_FamilyService()
    {
        return $this->services['pim_serializer.normalizer.flat.family'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_GroupService()
    {
        return $this->services['pim_serializer.normalizer.flat.group'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_JobInstanceService()
    {
        return $this->services['pim_serializer.normalizer.flat.job_instance'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.label_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_LabelTranslationService()
    {
        return $this->services['pim_serializer.normalizer.flat.label_translation'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_MediaService()
    {
        return $this->services['pim_serializer.normalizer.flat.media'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_MetricService()
    {
        return $this->services['pim_serializer.normalizer.flat.metric'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_OptionService()
    {
        return $this->services['pim_serializer.normalizer.flat.option'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.flat.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_Flat_PriceService()
    {
        return $this->services['pim_serializer.normalizer.flat.price'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\GroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\GroupNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_GroupService()
    {
        return $this->services['pim_serializer.normalizer.group'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\GroupNormalizer($this->get('pim_serializer.normalizer.label_translation'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\JobInstanceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\JobInstanceNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_JobInstanceService()
    {
        return $this->services['pim_serializer.normalizer.job_instance'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\JobInstanceNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.label_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_LabelTranslationService()
    {
        return $this->services['pim_serializer.normalizer.label_translation'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_MediaService()
    {
        return $this->services['pim_serializer.normalizer.media'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_serializer.normalizer.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_MetricService()
    {
        return $this->services['pim_serializer.normalizer.metric'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_ProductService()
    {
        $this->services['pim_serializer.normalizer.product'] = $instance = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer();

        $instance->setFilters(array(0 => $this->get('pim_serializer.filter.product_value')));

        return $instance;
    }

    /**
     * Gets the 'pim_serializer.normalizer.product_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_ProductPriceService()
    {
        return $this->services['pim_serializer.normalizer.product_price'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_ProductValueService()
    {
        return $this->services['pim_serializer.normalizer.product_value'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer();
    }

    /**
     * Gets the 'pim_serializer.normalizer.product_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValuesNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValuesNormalizer instance.
     */
    protected function getPimSerializer_Normalizer_ProductValuesService()
    {
        return $this->services['pim_serializer.normalizer.product_values'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValuesNormalizer();
    }

    /**
     * Gets the 'pim_transform.builder.field_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Builder\FieldNameBuilder A Pim\Bundle\TransformBundle\Builder\FieldNameBuilder instance.
     */
    protected function getPimTransform_Builder_FieldNameService()
    {
        return $this->services['pim_transform.builder.field_name'] = new \Pim\Bundle\TransformBundle\Builder\FieldNameBuilder($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType', 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel', 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale');
    }

    /**
     * Gets the 'pim_transform.cache.attribute_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Cache\AttributeCache A Pim\Bundle\TransformBundle\Cache\AttributeCache instance.
     */
    protected function getPimTransform_Cache_AttributeCacheService()
    {
        return $this->services['pim_transform.cache.attribute_cache'] = new \Pim\Bundle\TransformBundle\Cache\AttributeCache($this->get('doctrine'), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute');
    }

    /**
     * Gets the 'pim_transform.cache.cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Cache\CacheClearer A Pim\Bundle\TransformBundle\Cache\CacheClearer instance.
     */
    protected function getPimTransform_Cache_CacheClearerService()
    {
        return $this->services['pim_transform.cache.cache_clearer'] = new \Pim\Bundle\TransformBundle\Cache\CacheClearer($this->get('pim_transform.cache.doctrine_cache'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'pim_transform.cache.doctrine_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Cache\DoctrineCache A Pim\Bundle\TransformBundle\Cache\DoctrineCache instance.
     */
    protected function getPimTransform_Cache_DoctrineCacheService()
    {
        return $this->services['pim_transform.cache.doctrine_cache'] = new \Pim\Bundle\TransformBundle\Cache\DoctrineCache($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'pim_transform.cache.product_cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Cache\CacheClearer A Pim\Bundle\TransformBundle\Cache\CacheClearer instance.
     */
    protected function getPimTransform_Cache_ProductCacheClearerService()
    {
        $this->services['pim_transform.cache.product_cache_clearer'] = $instance = new \Pim\Bundle\TransformBundle\Cache\CacheClearer($this->get('pim_transform.cache.doctrine_cache'), $this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));

        $instance->setNonClearableEntities(array(0 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 1 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', 2 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Family', 3 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel', 4 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale', 5 => 'Pim\\Bundle\\CatalogBundle\\Entity\\Currency', 6 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', 7 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOptionValue', 8 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup', 9 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeRequirement', 10 => 'Pim\\Bundle\\CatalogBundle\\Entity\\FamilyTranslation', 11 => 'Pim\\Bundle\\CatalogBundle\\Entity\\CategoryTranslation', 12 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeTranslation', 13 => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroupTranslation', 14 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance', 15 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution', 16 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution', 17 => 'Oro\\Bundle\\UserBundle\\Entity\\User,', 18 => 'Oro\\Bundle\\UserBundle\\Entity\\UserApi', 19 => 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit'));

        return $instance;
    }

    /**
     * Gets the 'pim_transform.converter.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Converter\MetricConverter A Pim\Bundle\TransformBundle\Converter\MetricConverter instance.
     */
    protected function getPimTransform_Converter_MetricService()
    {
        return $this->services['pim_transform.converter.metric'] = new \Pim\Bundle\TransformBundle\Converter\MetricConverter($this->get('akeneo_measure.measure_converter'));
    }

    /**
     * Gets the 'pim_transform.transformer.association' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\AssociationTransformer A Pim\Bundle\TransformBundle\Transformer\AssociationTransformer instance.
     */
    protected function getPimTransform_Transformer_AssociationService()
    {
        return $this->services['pim_transform.transformer.association'] = new \Pim\Bundle\TransformBundle\Transformer\AssociationTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType');
    }

    /**
     * Gets the 'pim_transform.transformer.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\AttributeTransformer A Pim\Bundle\TransformBundle\Transformer\AttributeTransformer instance.
     */
    protected function getPimTransform_Transformer_AttributeService()
    {
        return $this->services['pim_transform.transformer.attribute'] = new \Pim\Bundle\TransformBundle\Transformer\AttributeTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'), $this->get('pim_transform.transformer.registry'), $this->get('pim_catalog.manager.attribute'), $this->get('pim_catalog.manager.attribute_option'), $this->get('pim_transform.cache.doctrine_cache'));
    }

    /**
     * Gets the 'pim_transform.transformer.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\AttributeOptionTransformer A Pim\Bundle\TransformBundle\Transformer\AttributeOptionTransformer instance.
     */
    protected function getPimTransform_Transformer_AttributeOptionService()
    {
        return $this->services['pim_transform.transformer.attribute_option'] = new \Pim\Bundle\TransformBundle\Transformer\AttributeOptionTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'));
    }

    /**
     * Gets the 'pim_transform.transformer.column_info_transformer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\ColumnInfo\ColumnInfoTransformer A Pim\Bundle\TransformBundle\Transformer\ColumnInfo\ColumnInfoTransformer instance.
     */
    protected function getPimTransform_Transformer_ColumnInfoTransformerService()
    {
        return $this->services['pim_transform.transformer.column_info_transformer'] = new \Pim\Bundle\TransformBundle\Transformer\ColumnInfo\ColumnInfoTransformer('Pim\\Bundle\\TransformBundle\\Transformer\\ColumnInfo\\ColumnInfo');
    }

    /**
     * Gets the 'pim_transform.transformer.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\EntityTransformer A Pim\Bundle\TransformBundle\Transformer\EntityTransformer instance.
     */
    protected function getPimTransform_Transformer_EntityService()
    {
        return $this->services['pim_transform.transformer.entity'] = new \Pim\Bundle\TransformBundle\Transformer\EntityTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'));
    }

    /**
     * Gets the 'pim_transform.transformer.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\FamilyTransformer A Pim\Bundle\TransformBundle\Transformer\FamilyTransformer instance.
     */
    protected function getPimTransform_Transformer_FamilyService()
    {
        return $this->services['pim_transform.transformer.family'] = new \Pim\Bundle\TransformBundle\Transformer\FamilyTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'), $this->get('pim_transform.transformer.registry'), $this->get('pim_catalog.factory.family'), 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeRequirement');
    }

    /**
     * Gets the 'pim_transform.transformer.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\Guesser\ChainedGuesser A Pim\Bundle\TransformBundle\Transformer\Guesser\ChainedGuesser instance.
     */
    protected function getPimTransform_Transformer_GuesserService()
    {
        $a = $this->get('pim_transform.cache.doctrine_cache');
        $b = $this->get('akeneo_storage_utils.doctrine.smart_manager_registry');
        $c = $this->get('pim_transform.transformer.property.translation');
        $d = $this->get('pim_transform.transformer.property.nested_translation');

        $e = new \Pim\Bundle\TransformBundle\Transformer\Property\RelationTransformer($a);

        $f = new \Pim\Bundle\TransformBundle\Transformer\Property\DateTransformer();

        $this->services['pim_transform.transformer.guesser'] = $instance = new \Pim\Bundle\TransformBundle\Transformer\Guesser\ChainedGuesser();

        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\AttributeOptionGuesser($e, $b, 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\TypeGuesser($f, 'date'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\ArrayGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\ArrayTransformer($this->get('property_accessor')), 'array'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\TypeGuesser($f, 'datetime'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\TypeGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\BooleanTransformer(), 'boolean'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\RelationGuesser($e, $b));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\RegexpGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\SkipTransformer(), 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', array(0 => '/^type$/')));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\RegexpGuesser($c, 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', array(0 => '/^label-/')));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\TranslationGuesser($c));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\NestedTranslationGuesser($d));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\RegexpGuesser($d, 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', array(0 => '/^labels$/'), array('propertyPath' => 'label')));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\AttributeGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\MediaTransformer('Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia'), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'media'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\AttributeGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\PricesTransformer($this->get('pim_catalog.builder.product')), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'prices'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\AttributeGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\MetricTransformer($this->get('pim_catalog.factory.metric')), 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', 'metric'));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\RegexpGuesser($e, 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', array(0 => '/^products/'), array('class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product', 'multiple' => true)));
        $instance->addGuesser(new \Pim\Bundle\TransformBundle\Transformer\Guesser\DefaultGuesser(new \Pim\Bundle\TransformBundle\Transformer\Property\DefaultTransformer()));

        return $instance;
    }

    /**
     * Gets the 'pim_transform.transformer.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\JobInstanceTransformer A Pim\Bundle\TransformBundle\Transformer\JobInstanceTransformer instance.
     */
    protected function getPimTransform_Transformer_JobInstanceService()
    {
        return $this->services['pim_transform.transformer.job_instance'] = new \Pim\Bundle\TransformBundle\Transformer\JobInstanceTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'));
    }

    /**
     * Gets the 'pim_transform.transformer.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\ProductTransformer A Pim\Bundle\TransformBundle\Transformer\ProductTransformer instance.
     */
    protected function getPimTransform_Transformer_ProductService()
    {
        return $this->services['pim_transform.transformer.product'] = new \Pim\Bundle\TransformBundle\Transformer\ProductTransformer($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('property_accessor'), $this->get('pim_transform.transformer.guesser'), $this->get('pim_transform.transformer.column_info_transformer'), $this->get('pim_catalog.manager.product'), $this->get('pim_transform.cache.attribute_cache'), $this->get('pim_base_connector.reader.cached_association'), $this->get('pim_catalog.updater.product_template'));
    }

    /**
     * Gets the 'pim_transform.transformer.property.nested_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\Property\NestedTranslationTransformer A Pim\Bundle\TransformBundle\Transformer\Property\NestedTranslationTransformer instance.
     */
    protected function getPimTransform_Transformer_Property_NestedTranslationService()
    {
        return $this->services['pim_transform.transformer.property.nested_translation'] = new \Pim\Bundle\TransformBundle\Transformer\Property\NestedTranslationTransformer($this->get('property_accessor'));
    }

    /**
     * Gets the 'pim_transform.transformer.property.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\Property\TranslationTransformer A Pim\Bundle\TransformBundle\Transformer\Property\TranslationTransformer instance.
     */
    protected function getPimTransform_Transformer_Property_TranslationService()
    {
        return $this->services['pim_transform.transformer.property.translation'] = new \Pim\Bundle\TransformBundle\Transformer\Property\TranslationTransformer($this->get('property_accessor'));
    }

    /**
     * Gets the 'pim_transform.transformer.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Transformer\EntityTransformerRegistry A Pim\Bundle\TransformBundle\Transformer\EntityTransformerRegistry instance.
     */
    protected function getPimTransform_Transformer_RegistryService()
    {
        $this->services['pim_transform.transformer.registry'] = $instance = new \Pim\Bundle\TransformBundle\Transformer\EntityTransformerRegistry($this, 'pim_transform.transformer.entity');

        $instance->addEntityTransformer('Pim\\Bundle\\CatalogBundle\\Model\\Product', 'pim_transform.transformer.product');
        $instance->addEntityTransformer('Pim\\Bundle\\CatalogBundle\\Model\\Association', 'pim_transform.transformer.association');
        $instance->addEntityTransformer('Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', 'pim_transform.transformer.attribute');
        $instance->addEntityTransformer('Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption', 'pim_transform.transformer.attribute_option');
        $instance->addEntityTransformer('Pim\\Bundle\\CatalogBundle\\Entity\\Family', 'pim_transform.transformer.family');
        $instance->addEntityTransformer('Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance', 'pim_transform.transformer.job_instance');

        return $instance;
    }

    /**
     * Gets the 'pim_translation.form.type.translatable_field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TranslationBundle\Form\Type\TranslatableFieldType A Pim\Bundle\TranslationBundle\Form\Type\TranslatableFieldType instance.
     */
    protected function getPimTranslation_Form_Type_TranslatableFieldService()
    {
        return $this->services['pim_translation.form.type.translatable_field'] = new \Pim\Bundle\TranslationBundle\Form\Type\TranslatableFieldType($this->get('validator'), $this->get('pim_user.context.user'), $this->get('pim_catalog.helper.locale'));
    }

    /**
     * Gets the 'pim_translation.listener.add_locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TranslationBundle\EventListener\AddLocaleListener A Pim\Bundle\TranslationBundle\EventListener\AddLocaleListener instance.
     */
    protected function getPimTranslation_Listener_AddLocaleService()
    {
        return $this->services['pim_translation.listener.add_locale'] = new \Pim\Bundle\TranslationBundle\EventListener\AddLocaleListener();
    }

    /**
     * Gets the 'pim_ui.controller.ajax_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Controller\AjaxOptionController A Pim\Bundle\UIBundle\Controller\AjaxOptionController instance.
     */
    protected function getPimUi_Controller_AjaxOptionService()
    {
        return $this->services['pim_ui.controller.ajax_option'] = new \Pim\Bundle\UIBundle\Controller\AjaxOptionController($this->get('doctrine'));
    }

    /**
     * Gets the 'pim_ui.form.extension.help' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Extension\FormTypeHelpExtension A Pim\Bundle\UIBundle\Form\Extension\FormTypeHelpExtension instance.
     */
    protected function getPimUi_Form_Extension_HelpService()
    {
        return $this->services['pim_ui.form.extension.help'] = new \Pim\Bundle\UIBundle\Form\Extension\FormTypeHelpExtension();
    }

    /**
     * Gets the 'pim_ui.form.extension.select2' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Extension\FormTypeSelect2Extension A Pim\Bundle\UIBundle\Form\Extension\FormTypeSelect2Extension instance.
     */
    protected function getPimUi_Form_Extension_Select2Service()
    {
        return $this->services['pim_ui.form.extension.select2'] = new \Pim\Bundle\UIBundle\Form\Extension\FormTypeSelect2Extension();
    }

    /**
     * Gets the 'pim_ui.form.transformer.ajax_entity.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Transformer\AjaxEntityTransformerFactory A Pim\Bundle\UIBundle\Form\Transformer\AjaxEntityTransformerFactory instance.
     */
    protected function getPimUi_Form_Transformer_AjaxEntity_FactoryService()
    {
        return $this->services['pim_ui.form.transformer.ajax_entity.factory'] = new \Pim\Bundle\UIBundle\Form\Transformer\AjaxEntityTransformerFactory($this->get('doctrine'), 'Pim\\Bundle\\UIBundle\\Form\\Transformer\\AjaxEntityTransformer');
    }

    /**
     * Gets the 'pim_ui.form.type.ajax_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Type\AjaxEntityType A Pim\Bundle\UIBundle\Form\Type\AjaxEntityType instance.
     */
    protected function getPimUi_Form_Type_AjaxEntityService()
    {
        return $this->services['pim_ui.form.type.ajax_entity'] = new \Pim\Bundle\UIBundle\Form\Type\AjaxEntityType($this->get('router'), $this->get('pim_ui.form.transformer.ajax_entity.factory'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'pim_ui.form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Type\NumberType A Pim\Bundle\UIBundle\Form\Type\NumberType instance.
     */
    protected function getPimUi_Form_Type_NumberService()
    {
        return $this->services['pim_ui.form.type.number'] = new \Pim\Bundle\UIBundle\Form\Type\NumberType();
    }

    /**
     * Gets the 'pim_ui.form.type.switch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UIBundle\Form\Type\SwitchType A Pim\Bundle\UIBundle\Form\Type\SwitchType instance.
     */
    protected function getPimUi_Form_Type_SwitchService()
    {
        return $this->services['pim_ui.form.type.switch'] = new \Pim\Bundle\UIBundle\Form\Type\SwitchType();
    }

    /**
     * Gets the 'pim_user.context.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Context\UserContext A Pim\Bundle\UserBundle\Context\UserContext instance.
     */
    protected function getPimUser_Context_UserService()
    {
        $this->services['pim_user.context.user'] = $instance = new \Pim\Bundle\UserBundle\Context\UserContext($this->get('security.context'), $this->get('pim_catalog.manager.locale'), $this->get('pim_catalog.manager.channel'), $this->get('pim_catalog.manager.category'), 'en');

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'pim_user.event_listener.group_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getPimUser_EventListener_GroupUsersGridListenerService()
    {
        return $this->services['pim_user.event_listener.group_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('group_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_user.event_listener.role_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getPimUser_EventListener_RoleUsersGridListenerService()
    {
        return $this->services['pim_user.event_listener.role_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('role_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'pim_user.event_subscriber.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\EventSubscriber\GroupSubscriber A Pim\Bundle\UserBundle\EventSubscriber\GroupSubscriber instance.
     */
    protected function getPimUser_EventSubscriber_GroupService()
    {
        return $this->services['pim_user.event_subscriber.group'] = new \Pim\Bundle\UserBundle\EventSubscriber\GroupSubscriber();
    }

    /**
     * Gets the 'pim_user.event_subscriber.user_preferences' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\EventSubscriber\UserPreferencesSubscriber A Pim\Bundle\UserBundle\EventSubscriber\UserPreferencesSubscriber instance.
     */
    protected function getPimUser_EventSubscriber_UserPreferencesService()
    {
        $this->services['pim_user.event_subscriber.user_preferences'] = $instance = new \Pim\Bundle\UserBundle\EventSubscriber\UserPreferencesSubscriber();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'pim_user.form.subscriber.user_preferences' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Subscriber\UserPreferencesSubscriber A Pim\Bundle\UserBundle\Form\Subscriber\UserPreferencesSubscriber instance.
     */
    protected function getPimUser_Form_Subscriber_UserPreferencesService()
    {
        return $this->services['pim_user.form.subscriber.user_preferences'] = new \Pim\Bundle\UserBundle\Form\Subscriber\UserPreferencesSubscriber('Pim\\Bundle\\CatalogBundle\\Entity\\Category');
    }

    /**
     * Gets the 'pim_user.form.type.acl_access_level_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Type\AclAccessLevelSelectorType A Pim\Bundle\UserBundle\Form\Type\AclAccessLevelSelectorType instance.
     */
    protected function getPimUser_Form_Type_AclAccessLevelSelectorService()
    {
        return $this->services['pim_user.form.type.acl_access_level_selector'] = new \Pim\Bundle\UserBundle\Form\Type\AclAccessLevelSelectorType();
    }

    /**
     * Gets the 'pim_user.form.type.acl_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Form\Type\PrivilegeCollectionType A Pim\Bundle\UserBundle\Form\Type\PrivilegeCollectionType instance.
     */
    protected function getPimUser_Form_Type_AclCollectionService()
    {
        return $this->services['pim_user.form.type.acl_collection'] = new \Pim\Bundle\UserBundle\Form\Type\PrivilegeCollectionType();
    }

    /**
     * Gets the 'pim_user.repository.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Entity\Repository\GroupRepository A Pim\Bundle\UserBundle\Entity\Repository\GroupRepository instance.
     */
    protected function getPimUser_Repository_GroupService()
    {
        return $this->services['pim_user.repository.group'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Oro\\Bundle\\UserBundle\\Entity\\Group');
    }

    /**
     * Gets the 'pim_user.repository.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Entity\Repository\RoleRepository A Pim\Bundle\UserBundle\Entity\Repository\RoleRepository instance.
     */
    protected function getPimUser_Repository_RoleService()
    {
        return $this->services['pim_user.repository.role'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Oro\\Bundle\\UserBundle\\Entity\\Role');
    }

    /**
     * Gets the 'pim_user.twig.acl_groups_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\Twig\AclGroupsExtension A Pim\Bundle\UserBundle\Twig\AclGroupsExtension instance.
     */
    protected function getPimUser_Twig_AclGroupsExtensionService()
    {
        return $this->services['pim_user.twig.acl_groups_extension'] = new \Pim\Bundle\UserBundle\Twig\AclGroupsExtension(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle', 'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle', 'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle', 'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle', 'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle', 'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle', 'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle', 'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle', 'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle', 'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle', 'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle', 'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle', 'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle', 'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle', 'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle', 'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle', 'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle', 'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle', 'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle', 'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle', 'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle', 'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle', 'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle', 'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle', 'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'));
    }

    /**
     * Gets the 'pim_user.view_element.user.tab.additional' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimUser_ViewElement_User_Tab_AdditionalService()
    {
        return $this->services['pim_user.view_element.user.tab.additional'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_user.user.tab.additional', 'PimUserBundle:User:Tab/additional.html.twig');
    }

    /**
     * Gets the 'pim_user.view_element.user.tab.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimUser_ViewElement_User_Tab_BusinessUnitService()
    {
        return $this->services['pim_user.view_element.user.tab.business_unit'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_user.user.tab.business_unit', 'PimUserBundle:User:Tab/business_unit.html.twig');
    }

    /**
     * Gets the 'pim_user.view_element.user.tab.general' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimUser_ViewElement_User_Tab_GeneralService()
    {
        return $this->services['pim_user.view_element.user.tab.general'] = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_user.user.tab.general', 'PimUserBundle:User:Tab/general.html.twig');
    }

    /**
     * Gets the 'pim_user.view_element.user.tab.group_and_role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimUser_ViewElement_User_Tab_GroupAndRoleService()
    {
        $this->services['pim_user.view_element.user.tab.group_and_role'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_user.user.tab.group_and_role', 'PimUserBundle:User:Tab/group_and_role.html.twig');

        $instance->addVisibilityChecker($this->get('pim_user.view_element.visibility_checker.groups_and_roles'));

        return $instance;
    }

    /**
     * Gets the 'pim_user.view_element.user.tab.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement A Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement instance.
     */
    protected function getPimUser_ViewElement_User_Tab_PasswordService()
    {
        $this->services['pim_user.view_element.user.tab.password'] = $instance = new \Pim\Bundle\EnrichBundle\ViewElement\BaseViewElement('pim_user.user.tab.password', 'PimUserBundle:User:Tab/password.html.twig');

        $instance->addVisibilityChecker($this->get('pim_enrich.view_element.visibility_checker.non_empty_property'), array('property' => '[form].children[change_password]'));

        return $instance;
    }

    /**
     * Gets the 'pim_user.view_element.visibility_checker.groups_and_roles' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\UserBundle\ViewElement\Checker\GroupsAndRolesVisibilityChecker A Pim\Bundle\UserBundle\ViewElement\Checker\GroupsAndRolesVisibilityChecker instance.
     */
    protected function getPimUser_ViewElement_VisibilityChecker_GroupsAndRolesService()
    {
        return $this->services['pim_user.view_element.visibility_checker.groups_and_roles'] = new \Pim\Bundle\UserBundle\ViewElement\Checker\GroupsAndRolesVisibilityChecker();
    }

    /**
     * Gets the 'pim_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator A Symfony\Component\Validator\Validator instance.
     */
    protected function getPimValidatorService()
    {
        $a = new \Pim\Bundle\CatalogBundle\Validator\Mapping\DelegatingClassMetadataFactory();
        $a->addMetadataFactory(new \Pim\Bundle\CatalogBundle\Validator\Mapping\ProductValueMetadataFactory($this->get('pim_catalog.validator.constraint_guesser.chained_attribute')));
        $a->addMetadataFactory($this->get('validator.mapping.class_metadata_factory'));

        return $this->services['pim_validator'] = new \Symfony\Component\Validator\Validator($a, $this->get('validator.validator_factory'), $this->get('translator.default'), 'validators', array());
    }

    /**
     * Gets the 'pim_versioning.builder.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\Builder\VersionBuilder A Pim\Bundle\VersioningBundle\Builder\VersionBuilder instance.
     */
    protected function getPimVersioning_Builder_VersionService()
    {
        return $this->services['pim_versioning.builder.version'] = new \Pim\Bundle\VersioningBundle\Builder\VersionBuilder($this->get('pim_versioning.serializer'));
    }

    /**
     * Gets the 'pim_versioning.context.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\Manager\VersionContext A Pim\Bundle\VersioningBundle\Manager\VersionContext instance.
     */
    protected function getPimVersioning_Context_VersionService()
    {
        return $this->services['pim_versioning.context.version'] = new \Pim\Bundle\VersioningBundle\Manager\VersionContext();
    }

    /**
     * Gets the 'pim_versioning.doctrine.orm.pending_mass_persister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\Doctrine\ORM\PendingMassPersister A Pim\Bundle\VersioningBundle\Doctrine\ORM\PendingMassPersister instance.
     */
    protected function getPimVersioning_Doctrine_Orm_PendingMassPersisterService()
    {
        return $this->services['pim_versioning.doctrine.orm.pending_mass_persister'] = new \Pim\Bundle\VersioningBundle\Doctrine\ORM\PendingMassPersister($this->get('pim_versioning.builder.version'), $this->get('pim_versioning.manager.version'), $this->get('pim_serializer'), 'Pim\\Bundle\\VersioningBundle\\Model\\Version', $this->get('doctrine.dbal.default_connection'), $this->get('doctrine.orm.default_entity_manager'), $this->get('akeneo_storage_utils.doctrine.table_name_builder'));
    }

    /**
     * Gets the 'pim_versioning.event_subscriber.addcontext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\EventSubscriber\AddContextSubscriber A Pim\Bundle\VersioningBundle\EventSubscriber\AddContextSubscriber instance.
     */
    protected function getPimVersioning_EventSubscriber_AddcontextService()
    {
        return $this->services['pim_versioning.event_subscriber.addcontext'] = new \Pim\Bundle\VersioningBundle\EventSubscriber\AddContextSubscriber($this->get('pim_versioning.context.version'));
    }

    /**
     * Gets the 'pim_versioning.event_subscriber.adduser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\EventSubscriber\AddUserSubscriber A Pim\Bundle\VersioningBundle\EventSubscriber\AddUserSubscriber instance.
     */
    protected function getPimVersioning_EventSubscriber_AdduserService()
    {
        return $this->services['pim_versioning.event_subscriber.adduser'] = new \Pim\Bundle\VersioningBundle\EventSubscriber\AddUserSubscriber($this->get('pim_versioning.manager.version'), $this->get('security.context'));
    }

    /**
     * Gets the 'pim_versioning.event_subscriber.addversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\EventSubscriber\AddVersionSubscriber A Pim\Bundle\VersioningBundle\EventSubscriber\AddVersionSubscriber instance.
     */
    protected function getPimVersioning_EventSubscriber_AddversionService()
    {
        return $this->services['pim_versioning.event_subscriber.addversion'] = new \Pim\Bundle\VersioningBundle\EventSubscriber\AddVersionSubscriber($this->get('pim_versioning.manager.version'), $this->get('pim_versioning.update_guesser.chained'), $this->get('pim_versioning.serializer'), $this->get('pim_versioning.context.version'));
    }

    /**
     * Gets the 'pim_versioning.event_subscriber.timestampable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\EventSubscriber\TimestampableSubscriber A Pim\Bundle\VersioningBundle\EventSubscriber\TimestampableSubscriber instance.
     */
    protected function getPimVersioning_EventSubscriber_TimestampableService()
    {
        return $this->services['pim_versioning.event_subscriber.timestampable'] = new \Pim\Bundle\VersioningBundle\EventSubscriber\TimestampableSubscriber($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'));
    }

    /**
     * Gets the 'pim_versioning.manager.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\Manager\VersionManager A Pim\Bundle\VersioningBundle\Manager\VersionManager instance.
     */
    protected function getPimVersioning_Manager_VersionService()
    {
        return $this->services['pim_versioning.manager.version'] = new \Pim\Bundle\VersioningBundle\Manager\VersionManager($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), $this->get('pim_versioning.builder.version'), $this->get('pim_versioning.context.version'));
    }

    /**
     * Gets the 'pim_versioning.repository.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\Doctrine\ORM\VersionRepository A Pim\Bundle\VersioningBundle\Doctrine\ORM\VersionRepository instance.
     */
    protected function getPimVersioning_Repository_VersionService()
    {
        return $this->services['pim_versioning.repository.version'] = $this->get('doctrine.orm.default_entity_manager')->getRepository('Pim\\Bundle\\VersioningBundle\\Model\\Version');
    }

    /**
     * Gets the 'pim_versioning.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getPimVersioning_SerializerService()
    {
        $a = new \Pim\Bundle\TransformBundle\Normalizer\Flat\ProductNormalizer();
        $a->setFilters(array(0 => $this->get('pim_serializer.filter.flat_product_value')));

        return $this->services['pim_versioning.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => $this->get('pim_import_export.normalizer.job_execution'), 1 => $this->get('pim_import_export.normalizer.step_execution'), 2 => $this->get('pim_versioning.serializer.normalizer.label_translation'), 3 => $a, 4 => new \Pim\Bundle\TransformBundle\Normalizer\Flat\ProductValueNormalizer(), 5 => $this->get('pim_versioning.serializer.normalizer.flat.category'), 6 => $this->get('pim_versioning.serializer.normalizer.flat.attribute'), 7 => $this->get('pim_versioning.serializer.normalizer.flat.family'), 8 => $this->get('pim_versioning.serializer.normalizer.flat.attribute_group'), 9 => $this->get('pim_versioning.serializer.normalizer.flat.association_type'), 10 => $this->get('pim_versioning.serializer.normalizer.flat.group'), 11 => $this->get('pim_versioning.serializer.normalizer.flat.job_instance'), 12 => $this->get('pim_versioning.serializer.normalizer.flat.channel'), 13 => $this->get('pim_versioning.serializer.normalizer.flat.label_translation'), 14 => $this->get('pim_versioning.serializer.normalizer.flat.collection'), 15 => $this->get('pim_versioning.serializer.normalizer.flat.datetime'), 16 => $this->get('pim_versioning.serializer.normalizer.flat.media'), 17 => $this->get('pim_versioning.serializer.normalizer.flat.metric'), 18 => $this->get('pim_versioning.serializer.normalizer.flat.option'), 19 => $this->get('pim_versioning.serializer.normalizer.flat.price')), array(0 => new \Pim\Bundle\TransformBundle\Encoder\CsvEncoder()));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.association_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_AssociationTypeService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.association_type'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AssociationTypeNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_AttributeService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.attribute'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_AttributeGroupService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.attribute_group'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeGroupNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_CategoryService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.category'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\CategoryNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_ChannelService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.channel'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\ChannelNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_CollectionService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.collection'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\CollectionNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_DatetimeService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.datetime'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\DateTimeNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.family' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_FamilyService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.family'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\FamilyNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_GroupService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.group'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\GroupNormalizer($this->get('pim_serializer.normalizer.flat.label_translation'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.job_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_JobInstanceService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.job_instance'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\JobInstanceNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.label_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_LabelTranslationService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.label_translation'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\TranslationNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_MediaService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.media'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\MediaNormalizer($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_MetricService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.metric'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\MetricNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_OptionService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.option'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\AttributeOptionNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.flat.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_Flat_PriceService()
    {
        return $this->services['pim_versioning.serializer.normalizer.flat.price'] = new \Pim\Bundle\TransformBundle\Normalizer\Flat\PriceNormalizer();
    }

    /**
     * Gets the 'pim_versioning.serializer.normalizer.label_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer instance.
     */
    protected function getPimVersioning_Serializer_Normalizer_LabelTranslationService()
    {
        return $this->services['pim_versioning.serializer.normalizer.label_translation'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer();
    }

    /**
     * Gets the 'pim_versioning.update_guesser.attribute_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeGroupUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeGroupUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_AttributeGroupService()
    {
        return $this->services['pim_versioning.update_guesser.attribute_group'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeGroupUpdateGuesser();
    }

    /**
     * Gets the 'pim_versioning.update_guesser.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeOptionUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeOptionUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_AttributeOptionService()
    {
        return $this->services['pim_versioning.update_guesser.attribute_option'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\AttributeOptionUpdateGuesser($this->get('akeneo_storage_utils.doctrine.smart_manager_registry'), 'Pim\\Bundle\\CatalogBundle\\Model\\Product');
    }

    /**
     * Gets the 'pim_versioning.update_guesser.chained' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\ChainedUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\ChainedUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_ChainedService()
    {
        $this->services['pim_versioning.update_guesser.chained'] = $instance = new \Pim\Bundle\VersioningBundle\UpdateGuesser\ChainedUpdateGuesser();

        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.attribute_group'));
        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.attribute_option'));
        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.contains_products'));
        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.product_value'));
        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.translations'));
        $instance->addUpdateGuesser($this->get('pim_versioning.update_guesser.versionable'));

        return $instance;
    }

    /**
     * Gets the 'pim_versioning.update_guesser.contains_products' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\ContainsProductsUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\ContainsProductsUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_ContainsProductsService()
    {
        return $this->services['pim_versioning.update_guesser.contains_products'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\ContainsProductsUpdateGuesser();
    }

    /**
     * Gets the 'pim_versioning.update_guesser.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\ProductValueUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\ProductValueUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_ProductValueService()
    {
        return $this->services['pim_versioning.update_guesser.product_value'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\ProductValueUpdateGuesser();
    }

    /**
     * Gets the 'pim_versioning.update_guesser.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\TranslationsUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\TranslationsUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_TranslationsService()
    {
        return $this->services['pim_versioning.update_guesser.translations'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\TranslationsUpdateGuesser(array(0 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance'));
    }

    /**
     * Gets the 'pim_versioning.update_guesser.versionable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\VersioningBundle\UpdateGuesser\VersionableUpdateGuesser A Pim\Bundle\VersioningBundle\UpdateGuesser\VersionableUpdateGuesser instance.
     */
    protected function getPimVersioning_UpdateGuesser_VersionableService()
    {
        return $this->services['pim_versioning.update_guesser.versionable'] = new \Pim\Bundle\VersioningBundle\UpdateGuesser\VersionableUpdateGuesser(array(0 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance'));
    }

    /**
     * Gets the 'pim_webservice.handler.rest.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\WebServiceBundle\Handler\Rest\ProductHandler A Pim\Bundle\WebServiceBundle\Handler\Rest\ProductHandler instance.
     */
    protected function getPimWebservice_Handler_Rest_ProductService()
    {
        return $this->services['pim_webservice.handler.rest.product'] = new \Pim\Bundle\WebServiceBundle\Handler\Rest\ProductHandler($this->get('pim_webservice.serializer'));
    }

    /**
     * Gets the 'pim_webservice.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getPimWebservice_SerializerService()
    {
        return $this->services['pim_webservice.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => $this->get('pim_webservice.serializer.normalizer.product'), 1 => $this->get('pim_webservice.serializer.normalizer.product_value'), 2 => $this->get('pim_webservice.serializer.normalizer.product_price'), 3 => $this->get('pim_webservice.serializer.normalizer.metric'), 4 => $this->get('pim_webservice.serializer.normalizer.media'), 5 => $this->get('pim_webservice.serializer.normalizer.datetime'), 6 => $this->get('pim_webservice.serializer.normalizer.attribute_option')), array(0 => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.attribute_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_AttributeOptionService()
    {
        return $this->services['pim_webservice.serializer.normalizer.attribute_option'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\AttributeOptionNormalizer();
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_DatetimeService()
    {
        return $this->services['pim_webservice.serializer.normalizer.datetime'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\DateTimeNormalizer();
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_MediaService()
    {
        return $this->services['pim_webservice.serializer.normalizer.media'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\MediaNormalizer($this->get('pim_catalog.manager.media'));
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_MetricService()
    {
        return $this->services['pim_webservice.serializer.normalizer.metric'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\MetricNormalizer();
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_ProductService()
    {
        $this->services['pim_webservice.serializer.normalizer.product'] = $instance = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductNormalizer();

        $instance->setFilters(array(0 => $this->get('pim_serializer.filter.product_value')));

        return $instance;
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.product_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_ProductPriceService()
    {
        return $this->services['pim_webservice.serializer.normalizer.product_price'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductPriceNormalizer();
    }

    /**
     * Gets the 'pim_webservice.serializer.normalizer.product_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer A Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer instance.
     */
    protected function getPimWebservice_Serializer_Normalizer_ProductValueService()
    {
        return $this->services['pim_webservice.serializer.normalizer.product_value'] = new \Pim\Bundle\TransformBundle\Normalizer\Structured\ProductValueNormalizer();
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    protected function getProfilerService()
    {
        $a = $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $c->setKernel($b);
        }

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this->get('doctrine'));
        $d->addLogger('default', $this->get('doctrine.dbal.logger.profiling.default'));
        $d->addLogger('report_source', $this->get('doctrine.dbal.logger.profiling.report_source'));
        $d->addLogger('report_target', $this->get('doctrine.dbal.logger.profiling.report_target'));

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler'), '', '', 86400), $a);

        $instance->add($c);
        $instance->add($this->get('data_collector.request'));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add($this->get('data_collector.router'));
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add($d);

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this->get('profiler'), NULL, false, false);
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor();
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    protected function getRequestService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router A Symfony\Bundle\FrameworkBundle\Routing\Router instance.
     */
    protected function getRouterService()
    {
        return $this->services['router'] = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (dirname(dirname(__DIR__)).'/config/routing_dev.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevUrlMatcher', 'strict_requirements' => true), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    protected function getRouterListenerService()
    {
        $this->services['router_listener'] = $instance = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('router'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader($this->get('fos_rest.routing.loader.controller'));
        $d->addLoader($this->get('fos_rest.routing.loader.yaml_collection'));
        $d->addLoader($this->get('fos_rest.routing.loader.xml_collection'));
        $d->addLoader($this->get('liip_imagine.routing.loader'));
        $d->addLoader($this->get('oro_distribution.routing_loader'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this->get('controller_name_converter'), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $d);
    }

    /**
     * Gets the 'security.acl.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Cache\AclCache A Oro\Bundle\SecurityBundle\Acl\Cache\AclCache instance.
     */
    protected function getSecurity_Acl_CacheService()
    {
        return $this->services['security.acl.cache'] = new \Oro\Bundle\SecurityBundle\Acl\Cache\AclCache(new \Oro\Bundle\SecurityBundle\Acl\Cache\FilesystemCache((__DIR__.'/oro_acl')), $this->get('oro_security.acl.permission_granting_strategy'), 'sf2_acl_');
    }

    /**
     * Gets the 'security.acl.dbal.schema' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Acl\Dbal\Schema A Symfony\Component\Security\Acl\Dbal\Schema instance.
     */
    protected function getSecurity_Acl_Dbal_SchemaService()
    {
        return $this->services['security.acl.dbal.schema'] = new \Symfony\Component\Security\Acl\Dbal\Schema(array('class_table_name' => 'acl_classes', 'entry_table_name' => 'acl_entries', 'oid_table_name' => 'acl_object_identities', 'oid_ancestors_table_name' => 'acl_object_identity_ancestors', 'sid_table_name' => 'acl_security_identities'), $this->get('doctrine.dbal.default_connection'));
    }

    /**
     * Gets the 'security.acl.dbal.schema_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener A Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener instance.
     */
    protected function getSecurity_Acl_Dbal_SchemaListenerService()
    {
        return $this->services['security.acl.dbal.schema_listener'] = new \Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener($this);
    }

    /**
     * Gets the 'security.acl.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider A Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider instance.
     */
    protected function getSecurity_Acl_ProviderService()
    {
        return $this->services['security.acl.provider'] = new \Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider($this->get('doctrine.dbal.default_connection'), $this->get('oro_security.acl.permission_granting_strategy'), array('class_table_name' => 'acl_classes', 'entry_table_name' => 'acl_entries', 'oid_table_name' => 'acl_object_identities', 'oid_ancestors_table_name' => 'acl_object_identity_ancestors', 'sid_table_name' => 'acl_security_identities'), $this->get('security.acl.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.acl.voter.basic_permissions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter A Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter instance.
     */
    protected function getSecurity_Acl_Voter_BasicPermissionsService()
    {
        $a = $this->get('oro_security.acl.extension_selector');
        $b = $this->get('oro_security.acl.object_identity_factory');

        $c = new \Oro\Bundle\SecurityBundle\Acl\Domain\RootBasedAclProvider($b);
        $c->setBaseAclProvider($this->get('security.acl.provider'));

        $this->services['security.acl.voter.basic_permissions'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter($c, new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityRetrievalStrategy($b), new \Symfony\Component\Security\Acl\Domain\SecurityIdentityRetrievalStrategy($this->get('security.role_hierarchy'), $this->get('security.authentication.trust_resolver')), new \Oro\Bundle\SecurityBundle\Acl\Permission\PermissionMap($a), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE), true);

        $instance->setAclExtensionSelector($a);

        return $instance;
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     */
    protected function getSecurity_ContextService()
    {
        return $this->services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), false);
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('Oro\\Bundle\\UserBundle\\Entity\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder', 'arguments' => array(0 => 'sha512', 1 => true, 2 => 5000)), 'Symfony\\Component\\Security\\Core\\User\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder', 'arguments' => array(0 => false))));
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.dev' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/'), 'security.firewall.map.context.install' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/installer'), 'security.firewall.map.context.liip_imagine' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/media'), 'security.firewall.map.context.wsse_secured' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/(rest|soap).*'), 'security.firewall.map.context.login' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/user/(login|reset-request|send-email|check-email)$'), 'security.firewall.map.context.reset_password' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/user/reset/*'), 'security.firewall.map.context.main' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/'))), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.install' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_InstallService()
    {
        return $this->services['security.firewall.map.context.install'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.liip_imagine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_LiipImagineService()
    {
        return $this->services['security.firewall.map.context.liip_imagine'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_LoginService()
    {
        $a = $this->get('security.context');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.login'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'login', $b, $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '55f96b31b15c2', $b), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'login', NULL, NULL, NULL, $b));
    }

    /**
     * Gets the 'security.firewall.map.context.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = $this->get('security.http_utils');
        $b = $this->get('security.user.provider.concrete.chain_provider');
        $c = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.context');
        $e = $this->get('http_kernel');
        $f = $this->get('security.authentication.manager');
        $g = $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $h = new \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices(array(0 => $b), 'ThisTokenIsNotSoSecretChangeIt', 'main', array('name' => 'BAPRM', 'lifetime' => 1209600, 'path' => '/', 'domain' => NULL, 'secure' => false, 'httponly' => true, 'always_remember_me' => false, 'remember_me_parameter' => '_remember_me'), $c);

        $i = new \Symfony\Component\Security\Http\Firewall\LogoutListener($d, $a, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($a, '/'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => 'oro_user_security_logout'));
        $i->addHandler(new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler());
        $i->addHandler($h);

        $j = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, array('login_path' => 'oro_user_security_login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $j->setProviderKey('main');

        $k = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($d, $f, new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'), $a, 'main', $j, new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $a, array('login_path' => 'oro_user_security_login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'), $c), array('check_path' => 'oro_user_security_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $c, $g, $this->get('form.csrf_provider'));
        $k->setRememberMeServices($h);

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => $this->get('security.context_listener.0'), 2 => $i, 3 => $k, 4 => new \Symfony\Component\Security\Http\Firewall\RememberMeListener($d, $h, $f, $c, $g), 5 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($d, $this->get('security.authentication.trust_resolver'), $a, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($e, $a, 'oro_user_security_login', false), NULL, NULL, $c));
    }

    /**
     * Gets the 'security.firewall.map.context.reset_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_ResetPasswordService()
    {
        $a = $this->get('security.context');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.reset_password'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'reset_password', $b, $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '55f96b31b15c2', $b), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'reset_password', NULL, NULL, NULL, $b));
    }

    /**
     * Gets the 'security.firewall.map.context.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_WsseSecuredService()
    {
        return $this->services['security.firewall.map.context.wsse_secured'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => $this->get('security.context_listener.0'), 2 => $this->get('escape_wsse_authentication.listener.wsse_secured'), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($this->get('security.context'), $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'wsse_secured', $this->get('escape_wsse_authentication.entry_point.wsse_secured'), NULL, NULL, $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     */
    protected function getSecurity_SecureRandomService()
    {
        return $this->services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom((__DIR__.'/secure_random.seed'), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.context'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.webconfigurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\DistributionBundle\Configurator\Configurator A Sensio\Bundle\DistributionBundle\Configurator\Configurator instance.
     */
    protected function getSensioDistribution_WebconfiguratorService()
    {
        return $this->services['sensio_distribution.webconfigurator'] = new \Sensio\Bundle\DistributionBundle\Configurator\Configurator(dirname(dirname(__DIR__)));
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener instance.
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter A Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance.
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this->get('sensio_framework_extra.converter.manager'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance.
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add($this->get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance->add($this->get('sensio_framework_extra.converter.datetime'), 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    protected function getSessionService()
    {
        $this->services['session'] = $instance = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());

        $instance->registerBag($this->get('sylius.process_storage.session.bag'));

        return $instance;
    }

    /**
     * Gets the 'session.handler.pdo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler A Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler instance.
     */
    protected function getSession_Handler_PdoService()
    {
        return $this->services['session.handler.pdo'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler($this->get('doctrine.dbal.default.wrapped_connection'), array('db_table' => 'oro_session', 'db_id_col' => 'id'));
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance.
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'));
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('name' => 'BAPID', 'gc_maxlifetime' => 3600), NULL);
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(NULL);
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'stof_doctrine_extensions.event_listener.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\EnrichBundle\EventListener\UserContextListener A Pim\Bundle\EnrichBundle\EventListener\UserContextListener instance.
     */
    protected function getStofDoctrineExtensions_EventListener_LocaleService()
    {
        return $this->services['stof_doctrine_extensions.event_listener.locale'] = new \Pim\Bundle\EnrichBundle\EventListener\UserContextListener($this->get('security.context'), $this->get('pim_translation.listener.add_locale'), $this->get('pim_catalog.context.catalog'), $this->get('pim_user.context.user'));
    }

    /**
     * Gets the 'stof_doctrine_extensions.uploadable.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager A Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager instance.
     */
    protected function getStofDoctrineExtensions_Uploadable_ManagerService()
    {
        $a = new \Gedmo\Uploadable\UploadableListener(new \Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter());
        $a->setAnnotationReader($this->get('annotation_reader'));
        $a->setDefaultFileInfoClass('Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');

        return $this->services['stof_doctrine_extensions.uploadable.manager'] = new \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager($a, 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance.
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'), $this->get('swiftmailer.mailer.default.spool'));

        $instance->registerPlugin($this->get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_NullTransport A Swift_Transport_NullTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        return $this->services['swiftmailer.mailer.default.transport.real'] = new \Swift_Transport_NullTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'));
    }

    /**
     * Gets the 'sylius.controller.process' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Controller\ProcessController A Sylius\Bundle\FlowBundle\Controller\ProcessController instance.
     */
    protected function getSylius_Controller_ProcessService()
    {
        $this->services['sylius.controller.process'] = $instance = new \Sylius\Bundle\FlowBundle\Controller\ProcessController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.process.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder A Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder instance.
     */
    protected function getSylius_Process_BuilderService()
    {
        return $this->services['sylius.process.builder'] = new \Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder($this);
    }

    /**
     * Gets the 'sylius.process.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Process\Context\ProcessContext A Sylius\Bundle\FlowBundle\Process\Context\ProcessContext instance.
     */
    protected function getSylius_Process_ContextService()
    {
        return $this->services['sylius.process.context'] = new \Sylius\Bundle\FlowBundle\Process\Context\ProcessContext($this->get('sylius.process_storage.session'));
    }

    /**
     * Gets the 'sylius.process.coordinator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator A Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator instance.
     */
    protected function getSylius_Process_CoordinatorService()
    {
        $this->services['sylius.process.coordinator'] = $instance = new \Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator($this->get('router'), $this->get('sylius.process.builder'), $this->get('sylius.process.context'));

        $instance->registerScenario('oro_installer', $this->get('oro_installer.scenario'));

        return $instance;
    }

    /**
     * Gets the 'sylius.process_storage.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Storage\SessionStorage A Sylius\Bundle\FlowBundle\Storage\SessionStorage instance.
     */
    protected function getSylius_ProcessStorage_SessionService()
    {
        return $this->services['sylius.process_storage.session'] = new \Sylius\Bundle\FlowBundle\Storage\SessionStorage($this->get('session'));
    }

    /**
     * Gets the 'sylius.process_storage.session.bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag A Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag instance.
     */
    protected function getSylius_ProcessStorage_Session_BagService()
    {
        return $this->services['sylius.process_storage.session.bag'] = new \Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag();
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine A Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine instance.
     */
    protected function getTemplatingService()
    {
        $this->services['templating'] = $instance = new \Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine($this, array());

        $instance->addEngine($this->get('debug.templating.engine.twig'));
        $instance->addEngine($this->get('debug.templating.engine.php'));

        return $instance;
    }

    /**
     * Gets the 'templating.asset.package_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory A Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory instance.
     */
    protected function getTemplating_Asset_PackageFactoryService()
    {
        return $this->services['templating.asset.package_factory'] = new \Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory($this);
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.globals' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables A Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables instance.
     */
    protected function getTemplating_GlobalsService()
    {
        return $this->services['templating.globals'] = new \Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables($this);
    }

    /**
     * Gets the 'templating.helper.actions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper instance.
     */
    protected function getTemplating_Helper_ActionsService()
    {
        return $this->services['templating.helper.actions'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper($this->get('fragment.handler'));
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Templating\Helper\CoreAssetsHelper A Symfony\Component\Templating\Helper\CoreAssetsHelper instance.
     * 
     * @throws InactiveScopeException when the 'templating.helper.assets' service is requested while the 'request' scope is not active
     */
    protected function getTemplating_Helper_AssetsService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('templating.helper.assets', 'request');
        }

        return $this->services['templating.helper.assets'] = $this->scopedServices['request']['templating.helper.assets'] = new \Symfony\Component\Templating\Helper\CoreAssetsHelper(new \Symfony\Bundle\FrameworkBundle\Templating\Asset\PathPackage($this->get('request'), NULL, '%s?%s'), array());
    }

    /**
     * Gets the 'templating.helper.code' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper instance.
     */
    protected function getTemplating_Helper_CodeService()
    {
        return $this->services['templating.helper.code'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper(NULL, dirname(dirname(__DIR__)), 'UTF-8');
    }

    /**
     * Gets the 'templating.helper.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper instance.
     */
    protected function getTemplating_Helper_FormService()
    {
        return $this->services['templating.helper.form'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper(new \Symfony\Component\Form\FormRenderer(new \Symfony\Component\Form\Extension\Templating\TemplatingRendererEngine($this->get('debug.templating.engine.php'), array(0 => 'FrameworkBundle:Form')), $this->get('form.csrf_provider', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        $this->services['templating.helper.logout_url'] = $instance = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this, $this->get('router'));

        $instance->registerListener('main', 'oro_user_security_logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /**
     * Gets the 'templating.helper.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper instance.
     */
    protected function getTemplating_Helper_RequestService()
    {
        return $this->services['templating.helper.request'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper($this->get('request'));
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this->services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this->get('router'));
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.helper.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper instance.
     */
    protected function getTemplating_Helper_SessionService()
    {
        return $this->services['templating.helper.session'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper($this->get('request'));
    }

    /**
     * Gets the 'templating.helper.slots' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Templating\Helper\SlotsHelper A Symfony\Component\Templating\Helper\SlotsHelper instance.
     */
    protected function getTemplating_Helper_SlotsService()
    {
        return $this->services['templating.helper.slots'] = new \Symfony\Component\Templating\Helper\SlotsHelper();
    }

    /**
     * Gets the 'templating.helper.translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper instance.
     */
    protected function getTemplating_Helper_TranslatorService()
    {
        return $this->services['templating.helper.translator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper($this->get('translator.default'));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance.
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));
        $instance->addExtractor('navigation_translation_extractor', $this->get('oro_navigation.translation.extractor'));
        $instance->addExtractor('oro_translation_php_extractor', $this->get('oro_translation.extractor.php_code_extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance.
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Oro\Bundle\TranslationBundle\Translation\Translator A Oro\Bundle\TranslationBundle\Translation\Translator instance.
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Oro\Bundle\TranslationBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true));

        $instance->setFallbackLocales(array(0 => 'en_US'));
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 'el', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 'zh_CN', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 'sr_Cyrl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf'), 'sq', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 'hr', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 'mn', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 'pt', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 'bg', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 'ca', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 'en', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf'), 'af', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 'no', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nb.xlf'), 'nb', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 'eu', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 'he', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 'fr', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 'sl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 'sr_Latn', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 'sv', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 'tr', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 'de', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 'ja', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 'hu', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 'pl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 'vi', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf'), 'zh_TW', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 'fa', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 'ro', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 'az', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 'cs', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf'), 'cy', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 'pt_BR', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 'hy', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 'et', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 'th', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 'uk', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 'sk', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 'lt', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 'id', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 'nl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 'ar', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 'gl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 'da', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 'ru', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 'fi', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 'it', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 'lb', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 'es', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 'el', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 'zh_CN', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 'sr_Cyrl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 'hr', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf'), 'mn', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf'), 'pt', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 'lv', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 'bg', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 'ca', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 'en', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nb.xlf'), 'nb', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf'), 'eu', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 'he', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 'fr', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 'sl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 'sr_Latn', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 'sv', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 'de', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 'ja', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 'hu', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 'pl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 'fa', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 'ro', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 'az', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 'cs', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 'pt_BR', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf'), 'hy', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf'), 'et', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf'), 'uk', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 'sk', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 'lt', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 'id', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 'nl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 'ar', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 'gl', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 'da', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 'ru', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf'), 'fi', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 'it', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 'lb', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 'es', 'validators');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.he.xlf'), 'he', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sk.xlf'), 'sk', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sl.xlf'), 'sl', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.id.xlf'), 'id', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.it.xlf'), 'it', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ro.xlf'), 'ro', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.no.xlf'), 'no', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ua.xlf'), 'ua', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ja.xlf'), 'ja', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.fr.xlf'), 'fr', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.hr.xlf'), 'hr', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.fa.xlf'), 'fa', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.cs.xlf'), 'cs', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pt_BR.xlf'), 'pt_BR', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.az.xlf'), 'az', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pl.xlf'), 'pl', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.de.xlf'), 'de', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.zh_CN.xlf'), 'zh_CN', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.hu.xlf'), 'hu', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.bg.xlf'), 'bg', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.gl.xlf'), 'gl', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.el.xlf'), 'el', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ar.xlf'), 'ar', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ru.xlf'), 'ru', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.th.xlf'), 'th', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.da.xlf'), 'da', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.lt.xlf'), 'lt', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.en.xlf'), 'en', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.es.xlf'), 'es', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sr_Cyrl.xlf'), 'sr_Cyrl', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sr_Latn.xlf'), 'sr_Latn', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.tr.xlf'), 'tr', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.vi.xlf'), 'vi', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pt_PT.xlf'), 'pt_PT', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.nl.xlf'), 'nl', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sv.xlf'), 'sv', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.lb.xlf'), 'lb', 'security');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ca.xlf'), 'ca', 'security');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.de.yml'), 'de', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.fr.yml'), 'fr', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.en.yml'), 'en', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/translations/maintenance.en.yml'), 'en', 'maintenance');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/translations/maintenance.fr.yml'), 'fr', 'maintenance');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/translations/messages.hr.yml'), 'hr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/jsmessages.es.yml'), 'es', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/translations/config.en.yml'), 'en', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/translations/validators.en.yml'), 'en', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/translations/config.en.yml'), 'en', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/config.en.yml'), 'en', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/validators.en.yml'), 'en', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/measure-bundle/Akeneo/Bundle/MeasureBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/measure-bundle/Akeneo/Bundle/MeasureBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/FilterBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.en.yml'), 'en', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.fr.yml'), 'fr', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.ja.yml'), 'ja', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.nl.yml'), 'nl', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.de.yml'), 'de', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.it.yml'), 'it', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.ru.yml'), 'ru', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/translations/config.pt.yml'), 'pt', 'config');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.de.yml'), 'de', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.en.yml'), 'en', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.de.yml'), 'de', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.pt.yml'), 'pt', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.pt.yml'), 'pt', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.it.yml'), 'it', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.ja.yml'), 'ja', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.ru.yml'), 'ru', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.fr.yml'), 'fr', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.ru.yml'), 'ru', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.nl.yml'), 'nl', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.it.yml'), 'it', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.en.yml'), 'en', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/validators.nl.yml'), 'nl', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.fr.yml'), 'fr', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/translations/measures.ja.yml'), 'ja', 'measures');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.de.yml'), 'de', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.pt.yml'), 'pt', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.it.yml'), 'it', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.ja.yml'), 'ja', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.fr.yml'), 'fr', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.ru.yml'), 'ru', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.en.yml'), 'en', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/validators.nl.yml'), 'nl', 'validators');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.pt.yml'), 'pt', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.nl.yml'), 'nl', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.ru.yml'), 'ru', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.ja.yml'), 'ja', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.en.yml'), 'en', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.fr.yml'), 'fr', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.de.yml'), 'de', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/translations/jsmessages.it.yml'), 'it', 'jsmessages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/BaseConnectorBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.ja.yml'), 'ja', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.ru.yml'), 'ru', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.fr.yml'), 'fr', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.en.yml'), 'en', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.pt.yml'), 'pt', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.it.yml'), 'it', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.de.yml'), 'de', 'messages');
        $instance->addResource('yml', (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/translations/messages.nl.yml'), 'nl', 'messages');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/translations/messages.fr.xlf'), 'fr', 'messages');
        $instance->addResource('xlf', (dirname(dirname(dirname(__DIR__))).'/src/Foody/ImportProductBundle/Resources/translations/messages.fr.xlf'), 'fr', 'messages');

        return $instance;
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance.
     */
    protected function getTwigService()
    {
        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('exception_controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction', 'debug' => true, 'strict_variables' => true, 'autoescape_service' => NULL, 'autoescape_service_method' => NULL, 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array()));

        $instance->addExtension($this->get('twig.extension.intl'));
        $instance->addExtension(new \Symfony\Bundle\SecurityBundle\Twig\Extension\LogoutUrlExtension($this->get('templating.helper.logout_url')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator.default')));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\AssetsExtension($this));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($this));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, dirname(dirname(__DIR__)), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($this->get('router')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($this->get('fragment.handler')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension($this->get('twig.form.renderer')));
        $instance->addExtension(new \Twig_Extension_Debug());
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), $this->get('templating.name_parser'), false, array(), array(0 => 'OroAsseticBundle', 1 => 'OroUIBundle', 2 => 'OroUserBundle', 3 => 'OroFilterBundle', 4 => 'OroNavigationBundle', 5 => 'OroWindowsBundle', 6 => 'OroEntityExtendBundle', 7 => 'OroSecurityBundle', 8 => 'PimUIBundle', 9 => 'PimCatalogBundle', 10 => 'PimEnrichBundle', 11 => 'PimNotificationBundle', 14 => 'OroDataGridBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension($this->get('genemu.twig.extension.form'));
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerExtension($this->get('fos_rest.serializer')));
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension($this->get('knp_menu.helper')));
        $instance->addExtension($this->get('knp_paginator.twig.extension.pagination'));
        $instance->addExtension(new \Liip\ImagineBundle\Templating\ImagineExtension($this->get('liip_imagine.cache.manager')));
        $instance->addExtension($this->get('nelmio_api_doc.twig.extension.extra_markdown'));
        $instance->addExtension($this->get('oro_ui.twig.ceil_extension'));
        $instance->addExtension($this->get('oro_ui.twig.ui_extension'));
        $instance->addExtension($this->get('oro_ui.twig.md5_extension'));
        $instance->addExtension($this->get('oro_ui.twig.form_extension'));
        $instance->addExtension($this->get('oro_ui.twig.widget_extension'));
        $instance->addExtension($this->get('oro_ui.twig.date_extension'));
        $instance->addExtension($this->get('oro_ui.twig.skype_button_extension'));
        $instance->addExtension($this->get('oro_assetic.twig.extension'));
        $instance->addExtension($this->get('oro_config.twig.config_extension'));
        $instance->addExtension($this->get('oro_datagrid.twig.metadata'));
        $instance->addExtension($this->get('oro_entity_extend.twig.view_extension'));
        $instance->addExtension($this->get('oro_filter.twig.extension.render_layout'));
        $instance->addExtension($this->get('oro_filter.twig.extension.render_header'));
        $instance->addExtension($this->get('oro_form.twig.form_extension'));
        $instance->addExtension($this->get('oro_form.twig.js_validation_extension'));
        $instance->addExtension($this->get('oro_help.twig.extension'));
        $instance->addExtension($this->get('oro_locale.twig.date_format'));
        $instance->addExtension($this->get('oro_locale.twig.locale'));
        $instance->addExtension($this->get('oro_locale.twig.calendar'));
        $instance->addExtension($this->get('oro_locale.twig.date_time'));
        $instance->addExtension($this->get('oro_locale.twig.name'));
        $instance->addExtension($this->get('oro_locale.twig.address'));
        $instance->addExtension($this->get('oro_locale.twig.number'));
        $instance->addExtension($this->get('oro_menu.twig.extension'));
        $instance->addExtension($this->get('oro_navigation.title_service.twig.extension'));
        $instance->addExtension($this->get('oro_navigation.twig.hash_nav_extension'));
        $instance->addExtension($this->get('oro_organization.twig.get_owner'));
        $instance->addExtension($this->get('oro_organization.twig.business_units'));
        $instance->addExtension($this->get('oro_requirejs.twig.requirejs_extension'));
        $instance->addExtension($this->get('oro_security.twig.security_extension'));
        $instance->addExtension($this->get('oro_user.twig.user_extension'));
        $instance->addExtension($this->get('oro_windows.twig.extension'));
        $instance->addExtension($this->get('twig.extension.jsformvalidation'));
        $instance->addExtension($this->get('pim_user.twig.acl_groups_extension'));
        $instance->addExtension($this->get('pim_notification.twig.notification_extension'));
        $instance->addExtension($this->get('pim_import_export.twig.normalize_configuration_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.locale_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.category_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.channel_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.view_element_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.attribute_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.object_class_extension'));
        $instance->addExtension($this->get('pim_enrich.twig.version_extension'));
        $instance->addExtension($this->get('jdare_clank.twig.clank_extension'));
        $instance->addGlobal('app', $this->get('templating.globals'));
        $instance->addGlobal('bap', array('layout' => 'PimEnrichBundle::base.html.twig', 'start_route' => 'oro_default'));
        $instance->addGlobal('ws', array('port' => 8080, 'host' => '127.0.0.1'));
        $instance->addGlobal('uservoice_key', NULL);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('FOS\\RestBundle\\Controller\\ExceptionController::showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.extension.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Intl A Twig_Extensions_Extension_Intl instance.
     */
    protected function getTwig_Extension_IntlService()
    {
        return $this->services['twig.extension.intl'] = new \Twig_Extensions_Extension_Intl();
    }

    /**
     * Gets the 'twig.extension.jsformvalidation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pim\Bundle\JsFormValidationBundle\Twig\Extension\JsFormValidationTwigExtension A Pim\Bundle\JsFormValidationBundle\Twig\Extension\JsFormValidationTwigExtension instance.
     */
    protected function getTwig_Extension_JsformvalidationService()
    {
        return $this->services['twig.extension.jsformvalidation'] = new \Pim\Bundle\JsFormValidationBundle\Twig\Extension\JsFormValidationTwigExtension($this);
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this->get('templating.locator'), $this->get('templating.name_parser'));

        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), 'Security');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/views'), 'Doctrine');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/views'), 'A2lixTranslationForm');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/views'), 'GenemuForm');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/views'), 'JDareClank');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/views'), 'KnpPaginator');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/views'), 'LiipImagine');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/views'), 'NelmioApiDoc');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views'), 'OroUI');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views'), 'OroAssetic');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/views'), 'OroConfig');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views'), 'OroDataGrid');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/views'), 'OroEmail');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/views'), 'OroEntity');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/views'), 'OroEntityConfig');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views'), 'OroEntityExtend');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views'), 'OroFilter');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/views'), 'OroForm');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/views'), 'OroInstaller');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/views'), 'OroLocale');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views'), 'OroNavigation');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/views'), 'OroOrganization');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/views'), 'OroRequireJS');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views'), 'OroSecurity');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/views'), 'OroTranslation');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views'), 'OroUser');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views'), 'OroWindows');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/views'), 'OroDataAudit');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/apy/jsfv-bundle/APY/JsFormValidationBundle/Resources/views'), 'APYJsFormValidation');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/batch-bundle/Akeneo/Bundle/BatchBundle/Resources/views'), 'AkeneoBatch');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NavigationBundle/Resources/views'), 'PimNavigation');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/views'), 'PimUser');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/JsFormValidationBundle/Resources/views'), 'PimJsFormValidation');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DashboardBundle/Resources/views'), 'PimDashboard');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UIBundle/Resources/views'), 'PimUI');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/NotificationBundle/Resources/views'), 'PimNotification');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/views'), 'PimDataGrid');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/views'), 'PimImportExport');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/VersioningBundle/Resources/views'), 'PimVersioning');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/views'), 'PimEnrich');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CommentBundle/Resources/views'), 'PimComment');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/PdfGeneratorBundle/Resources/views'), 'PimPdfGenerator');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/views'), 'FoodyInstaller');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/src/Foody/ImportProductBundle/Resources/views'), 'FoodyImportProduct');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views'), 'SensioDistribution');
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));
        $instance->addPath((dirname(dirname(dirname(__DIR__))).'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));

        return $instance;
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator A Symfony\Component\Validator\Validator instance.
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = new \Symfony\Component\Validator\Validator($this->get('validator.mapping.class_metadata_factory'), $this->get('validator.validator_factory'), $this->get('translator.default'), 'validators', array(0 => $this->get('doctrine.orm.validator_initializer')));
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), array('data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig'), 'data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => 'SecurityBundle:Collector:security'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => 'DoctrineBundle:Collector:db')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this->get('twig'), false, 2, 'bottom');
    }

    /**
     * Updates the 'request' service.
     */
    protected function synchronizeRequestService()
    {
        if ($this->initialized('locale_listener')) {
            $this->get('locale_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('fragment.handler')) {
            $this->get('fragment.handler')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('router_listener')) {
            $this->get('router_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('oro_datagrid.datagrid.request_params')) {
                    if ($this->has('request')) {
    $this->get('oro_datagrid.datagrid.request_params')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_entity.event_listener.custom_entity_grid_subscriber')) {
                    if ($this->has('request')) {
    $this->get('oro_entity.event_listener.custom_entity_grid_subscriber')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_entity.event_listener.relation_entity_grid_subscriber')) {
                    if ($this->has('request')) {
    $this->get('oro_entity.event_listener.relation_entity_grid_subscriber')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_locale.locale_listener')) {
                    if ($this->has('request')) {
    $this->get('oro_locale.locale_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_user.form.handler.acl_role')) {
            $this->get('oro_user.form.handler.acl_role')->setRequest($this->get('request'));
        }
        if ($this->initialized('pim_user.context.user')) {
                    if ($this->has('request')) {
    $this->get('pim_user.context.user')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_datagrid.datagrid.product.context_configurator')) {
                    if ($this->has('request')) {
    $this->get('pim_datagrid.datagrid.product.context_configurator')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_datagrid.datagrid.product.group_columns_configurator')) {
                    if ($this->has('request')) {
    $this->get('pim_datagrid.datagrid.product.group_columns_configurator')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_datagrid.datagrid.request_parameters_extractor')) {
                    if ($this->has('request')) {
    $this->get('pim_datagrid.datagrid.request_parameters_extractor')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_enrich.event_listener.product_grid_after_listener')) {
                    if ($this->has('request')) {
    $this->get('pim_enrich.event_listener.product_grid_after_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_enrich.event_listener.product_group_grid_after_listener')) {
                    if ($this->has('request')) {
    $this->get('pim_enrich.event_listener.product_group_grid_after_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_enrich.event_listener.product_variant_group_grid_after_listener')) {
                    if ($this->has('request')) {
    $this->get('pim_enrich.event_listener.product_variant_group_grid_after_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('pim_enrich.event_listener.association_product_grid_after_listener')) {
                    if ($this->has('request')) {
    $this->get('pim_enrich.event_listener.association_product_grid_after_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance.
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), (dirname(dirname(__DIR__)).'/../web'), true);

        $instance->addWorker(new \Assetic\Factory\Worker\EnsureFilterWorker('/\\.less$/', $this->get('assetic.filter.lessphp')));

        return $instance;
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'doctrine.dbal.logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Doctrine\Logger\DbalLogger A Symfony\Bridge\Doctrine\Logger\DbalLogger instance.
     */
    protected function getDoctrine_Dbal_LoggerService()
    {
        return $this->services['doctrine.dbal.logger'] = new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.report_source' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_ReportSourceService()
    {
        return $this->services['doctrine.dbal.logger.profiling.report_source'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.report_target' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_ReportTargetService()
    {
        return $this->services['doctrine.dbal.logger.profiling.report_target'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.orm.listeners.resolve_target_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\ORM\Tools\ResolveTargetEntityListener A Doctrine\ORM\Tools\ResolveTargetEntityListener instance.
     */
    protected function getDoctrine_Orm_Listeners_ResolveTargetEntityService()
    {
        $this->services['doctrine.orm.listeners.resolve_target_entity'] = $instance = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();

        $instance->addResolveTargetEntity('placeholder', 'placeholder', array());
        $instance->addResolveTargetEntity('Oro\\Bundle\\EmailBundle\\Entity\\EmailAddress', 'OroEmail\\Cache\\OroEmailBundle\\Entity\\EmailAddressProxy', array());
        $instance->addResolveTargetEntity('Symfony\\Component\\Security\\Core\\User\\UserInterface', 'Oro\\Bundle\\UserBundle\\Entity\\User', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\AssociationInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\Association', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\AttributeInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\CompletenessInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\Completeness', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\LocaleInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\MetricInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\Metric', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ProductInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\Product', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ProductMediaInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ProductPriceInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\ProductPrice', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ProductValueInterface', 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\CategoryInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Category', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\CurrencyInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Currency', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\FamilyInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Family', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ChannelInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel', array());
        $instance->addResolveTargetEntity('Pim\\Bundle\\CatalogBundle\\Model\\ProductTemplateInterface', 'Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate', array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Metadata\MetadataFactory A Metadata\MetadataFactory instance.
     */
    protected function getJmsSerializer_MetadataFactoryService()
    {
        $this->services['jms_serializer.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.unserialize_object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor A JMS\Serializer\Construction\UnserializeObjectConstructor instance.
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the 'knp_menu.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Knp\Menu\Twig\Helper A Knp\Menu\Twig\Helper instance.
     */
    protected function getKnpMenu_HelperService()
    {
        return $this->services['knp_menu.helper'] = new \Knp\Menu\Twig\Helper($this->get('knp_menu.renderer_provider'), $this->get('knp_menu.menu_provider'));
    }

    /**
     * Gets the 'oro_email.email.owner.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider A Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider instance.
     */
    protected function getOroEmail_Email_Owner_ProviderService()
    {
        return $this->services['oro_email.email.owner.provider'] = new \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider($this->get('oro_email.email.owner.provider.storage'));
    }

    /**
     * Gets the 'oro_email.email.owner.provider.storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage A Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage instance.
     */
    protected function getOroEmail_Email_Owner_Provider_StorageService()
    {
        $this->services['oro_email.email.owner.provider.storage'] = $instance = new \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage();

        $instance->addProvider($this->get('oro_user.email.owner.provider'));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.ace_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Persistence\AceManipulationHelper A Oro\Bundle\SecurityBundle\Acl\Persistence\AceManipulationHelper instance.
     */
    protected function getOroSecurity_Acl_AceProviderService()
    {
        return $this->services['oro_security.acl.ace_provider'] = new \Oro\Bundle\SecurityBundle\Acl\Persistence\AceManipulationHelper();
    }

    /**
     * Gets the 'oro_security.acl.extension_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector A Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector instance.
     */
    protected function getOroSecurity_Acl_ExtensionSelectorService()
    {
        $a = $this->get('oro_security.acl.object_id_accessor');
        $b = $this->get('oro_entity.orm.entity_class_accessor');
        $c = $this->get('oro_security.owner.ownership_metadata_provider');

        $this->services['oro_security.acl.extension_selector'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector($a);

        $instance->addAclExtension(new \Oro\Bundle\SecurityBundle\Acl\Extension\ActionAclExtension($this->get('oro_security.action_metadata_provider')));
        $instance->addAclExtension(new \Oro\Bundle\SecurityBundle\Acl\Extension\EntityAclExtension($b, $a, $this->get('oro_entity.orm.entity_class_resolver'), $this->get('oro_security.entity_security_metadata_provider'), $c, new \Oro\Bundle\SecurityBundle\Owner\EntityOwnershipDecisionMaker($this->get('oro_security.ownership_tree_provider'), $b, $a, $this->get('oro_security.owner.entity_owner_accessor'), $c)));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.object_id_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor A Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor instance.
     */
    protected function getOroSecurity_Acl_ObjectIdAccessorService()
    {
        return $this->services['oro_security.acl.object_id_accessor'] = new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor();
    }

    /**
     * Gets the 'oro_security.acl.permission_granting_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy A Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy instance.
     */
    protected function getOroSecurity_Acl_PermissionGrantingStrategyService()
    {
        $this->services['oro_security.acl.permission_granting_strategy'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy();

        $instance->setContext($this->get('oro_security.acl.voter_link'));

        return $instance;
    }

    /**
     * Gets the 'oro_security.action_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider A Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider instance.
     */
    protected function getOroSecurity_ActionMetadataProviderService()
    {
        return $this->services['oro_security.action_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider($this->get('oro_security.acl.annotation_provider'), new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/oro_acl_annotations')));
    }

    /**
     * Gets the 'oro_security.entity_security_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider A Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider instance.
     */
    protected function getOroSecurity_EntitySecurityMetadataProviderService()
    {
        return $this->services['oro_security.entity_security_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider($this->get('oro_entity_config.provider.security'), $this->get('oro_entity_config.provider.entity'), new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/oro_ownership_metadata')));
    }

    /**
     * Gets the 'oro_user.security.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Oro\Bundle\UserBundle\Security\UserProvider A Oro\Bundle\UserBundle\Security\UserProvider instance.
     */
    protected function getOroUser_Security_ProviderService()
    {
        return $this->services['oro_user.security.provider'] = new \Oro\Bundle\UserBundle\Security\UserProvider($this->get('oro_user.manager'));
    }

    /**
     * Gets the 'pim_catalog.validator.constraint_guesser.chained_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\ChainedAttributeConstraintGuesser A Pim\Bundle\CatalogBundle\Validator\ChainedAttributeConstraintGuesser instance.
     */
    protected function getPimCatalog_Validator_ConstraintGuesser_ChainedAttributeService()
    {
        $this->services['pim_catalog.validator.constraint_guesser.chained_attribute'] = $instance = new \Pim\Bundle\CatalogBundle\Validator\ChainedAttributeConstraintGuesser();

        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\EmailGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\FileGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\LengthGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\NotBlankGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\DateGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\NumericGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\RangeGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\RegexGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\NotDecimalGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\UrlGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\UniqueValueGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\PriceCollectionGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\MetricGuesser());
        $instance->addConstraintGuesser(new \Pim\Bundle\CatalogBundle\Validator\ConstraintGuesser\IdentifierGuesser());

        return $instance;
    }

    /**
     * Gets the 'pim_catalog.validator.helper.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Pim\Bundle\CatalogBundle\Validator\AttributeValidatorHelper A Pim\Bundle\CatalogBundle\Validator\AttributeValidatorHelper instance.
     */
    protected function getPimCatalog_Validator_Helper_AttributeService()
    {
        return $this->services['pim_catalog.validator.helper.attribute'] = new \Pim\Bundle\CatalogBundle\Validator\AttributeValidatorHelper($this->get('pim_catalog.repository.locale'), $this->get('pim_catalog.repository.channel'));
    }

    /**
     * Gets the 'pim_enrich.form.type.product.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Pim\Bundle\EnrichBundle\Form\View\ProductFormView A Pim\Bundle\EnrichBundle\Form\View\ProductFormView instance.
     */
    protected function getPimEnrich_Form_Type_Product_ViewService()
    {
        return $this->services['pim_enrich.form.type.product.view'] = new \Pim\Bundle\EnrichBundle\Form\View\ProductFormView($this->get('pim_enrich.form.view.view_updater.registry'));
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        return $this->services['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($this->get('security.role_hierarchy')), 1 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($this->get('security.authentication.trust_resolver')), 2 => $this->get('security.acl.voter.basic_permissions')), 'affirmative', false, true);
    }

    /**
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance.
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.context'), $this->get('security.access.decision_manager'), $this->get('security.access_map'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance.
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/'), array(0 => 'ROLE_ADMIN'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/rest/(latest|v1)/pinbars'), array(0 => 'ROLE_USER'), NULL);

        return $instance;
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = new \Symfony\Component\Security\Core\User\UserChecker();

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => $this->get('escape_wsse_authentication.provider.wsse_secured'), 1 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('55f96b31b15c2'), 2 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('55f96b31b15c2'), 3 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($this->get('security.user.provider.concrete.chain_provider'), $a, 'main', $this->get('security.encoder_factory'), true), 4 => new \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider($a, 'ThisTokenIsNotSoSecretChangeIt', 'main')), true);

        $instance->setEventDispatcher($this->get('event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance.
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener($this->get('security.access_map'), new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.context_listener.0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener A Symfony\Component\Security\Http\Firewall\ContextListener instance.
     */
    protected function getSecurity_ContextListener_0Service()
    {
        return $this->services['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener($this->get('security.context'), array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'main', $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\HttpUtils A Symfony\Component\Security\Http\HttpUtils instance.
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a);
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array());
    }

    /**
     * Gets the 'security.user.provider.concrete.chain_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\User\ChainUserProvider A Symfony\Component\Security\Core\User\ChainUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_ChainProviderService()
    {
        return $this->services['security.user.provider.concrete.chain_provider'] = new \Symfony\Component\Security\Core\User\ChainUserProvider(array(0 => $this->get('security.user.provider.concrete.in_memory'), 1 => $this->get('oro_user.security.provider')));
    }

    /**
     * Gets the 'security.user.provider.concrete.in_memory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\User\InMemoryUserProvider A Symfony\Component\Security\Core\User\InMemoryUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_InMemoryService()
    {
        return $this->services['security.user.provider.concrete.in_memory'] = new \Symfony\Component\Security\Core\User\InMemoryUserProvider();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this->get('file_locator'), __DIR__);
    }

    /**
     * Gets the 'twig.form.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Twig\Form\TwigRenderer A Symfony\Bridge\Twig\Form\TwigRenderer instance.
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'form_div_layout.html.twig', 1 => 'OroUIBundle:Form:fields.html.twig', 2 => 'GenemuFormBundle:Form:div_layout.html.twig', 3 => 'GenemuFormBundle:Form:jquery_layout.html.twig', 4 => 'GenemuFormBundle:Form:stylesheet_layout.html.twig', 5 => 'OroFormBundle:Form:fields.html.twig', 6 => 'OroTranslationBundle:Form:fields.html.twig', 7 => 'OroOrganizationBundle:Form:fields.html.twig', 8 => 'OroSecurityBundle:Form:fields.html.twig', 9 => 'PimUIBundle:Form:pim-fields.html.twig', 10 => 'LiipImagineBundle:Form:form_div_layout.html.twig', 11 => 'OroUIBundle:Form:translateable.html.twig')), $this->get('form.csrf_provider', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'validator.mapping.class_metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Validator\Mapping\ClassMetadataFactory A Symfony\Component\Validator\Mapping\ClassMetadataFactory instance.
     */
    protected function getValidator_Mapping_ClassMetadataFactoryService()
    {
        return $this->services['validator.mapping.class_metadata_factory'] = new \Symfony\Component\Validator\Mapping\ClassMetadataFactory(new \Symfony\Component\Validator\Mapping\Loader\LoaderChain(array(0 => new \Symfony\Component\Validator\Mapping\Loader\AnnotationLoader($this->get('annotation_reader')), 1 => new \Symfony\Component\Validator\Mapping\Loader\StaticMethodLoader(), 2 => new \Symfony\Component\Validator\Mapping\Loader\XmlFilesLoader(array(0 => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml'))), 3 => new \Symfony\Component\Validator\Mapping\Loader\YamlFilesLoader(array(0 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/validation.yml'), 1 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/validation.yml'), 2 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/validation.yml'), 3 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/validation.yml'), 4 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/validation.yml'), 5 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/validation.yml'), 6 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/config/validation.yml'), 7 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/config/validation.yml'), 8 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/completeness.yml'), 9 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/group.yml'), 10 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/associationType.yml'), 11 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/attributegroup.yml'), 12 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/attribute.yml'), 13 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/grouptype.yml'), 14 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/family.yml'), 15 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/channel.yml'), 16 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/product.yml'), 17 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/category.yml'), 18 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/config/validation/datagrid_view.yml'), 19 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/config/validation/jobinstance.yml'), 20 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/config/validation/validation.yml'))))), NULL);
    }

    /**
     * Gets the 'validator.validator_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory A Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory instance.
     */
    protected function getValidator_ValidatorFactoryService()
    {
        return $this->services['validator.validator_factory'] = new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('security.validator.user_password' => 'security.validator.user_password', 'doctrine.orm.validator.unique' => 'doctrine.orm.validator.unique', 'oro_email.variables_validator' => 'oro_email.validator.variables_validator', 'pim_metric_validator' => 'pim_catalog.validator.constraint.valid_metric', 'pim_single_identifier_attribute_validator' => 'pim_catalog.validator.constraint.single_identifier', 'pim_unique_variant_axis_validator' => 'pim_catalog.validator.constraint.unique_variant_axis', 'pim_unique_variant_group_validator' => 'pim_catalog.validator.constraint.unique_variant_group', 'pim_unique_value_validator' => 'pim_catalog.validator.constraint.unique_value', 'pim_immutable_validator' => 'pim_catalog.validator.constraint.immutable', 'pim_variant_group_values_validator' => 'pim_catalog.validator.constraint.variant_group_values', 'pim_variant_group_axis_validator' => 'pim_catalog.validator.constraint.variant_group_axis', 'pim_has_variant_axes_validator' => 'pim_catalog.validator.constraint.has_variant_axes', 'pim_job_instance_validator' => 'pim_import_export.validator.job_instance', 'channel_validator' => 'pim_base_connector.validator.constraints.channel_validator'));
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $this->parameterBag = new FrozenParameterBag($this->parameters);
        }

        return $this->parameterBag;
    }
    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' => dirname(dirname(__DIR__)),
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'ap_',
            'kernel.cache_dir' => __DIR__,
            'kernel.logs_dir' => (dirname(dirname(__DIR__)).'/logs'),
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle',
                'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle',
                'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle',
                'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle',
                'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle',
                'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle',
                'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle',
                'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle',
                'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle',
                'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle',
                'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle',
                'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle',
                'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle',
                'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle',
                'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle',
                'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle',
                'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle',
                'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle',
                'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle',
                'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle',
                'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle',
                'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle',
                'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle',
                'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle',
                'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle',
                'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle',
                'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle',
                'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle',
                'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle',
                'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle',
                'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle',
                'APYJsFormValidationBundle' => 'APY\\JsFormValidationBundle\\APYJsFormValidationBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'AkeneoMeasureBundle' => 'Akeneo\\Bundle\\MeasureBundle\\AkeneoMeasureBundle',
                'AkeneoBatchBundle' => 'Akeneo\\Bundle\\BatchBundle\\AkeneoBatchBundle',
                'AkeneoStorageUtilsBundle' => 'Akeneo\\Bundle\\StorageUtilsBundle\\AkeneoStorageUtilsBundle',
                'PimNavigationBundle' => 'Pim\\Bundle\\NavigationBundle\\PimNavigationBundle',
                'PimFilterBundle' => 'Pim\\Bundle\\FilterBundle\\PimFilterBundle',
                'PimUserBundle' => 'Pim\\Bundle\\UserBundle\\PimUserBundle',
                'PimJsFormValidationBundle' => 'Pim\\Bundle\\JsFormValidationBundle\\PimJsFormValidationBundle',
                'PimEntityBundle' => 'Pim\\Bundle\\EntityBundle\\PimEntityBundle',
                'PimDashboardBundle' => 'Pim\\Bundle\\DashboardBundle\\PimDashboardBundle',
                'PimInstallerBundle' => 'Pim\\Bundle\\InstallerBundle\\PimInstallerBundle',
                'PimUIBundle' => 'Pim\\Bundle\\UIBundle\\PimUIBundle',
                'PimNotificationBundle' => 'Pim\\Bundle\\NotificationBundle\\PimNotificationBundle',
                'PimCatalogBundle' => 'Pim\\Bundle\\CatalogBundle\\PimCatalogBundle',
                'PimDataGridBundle' => 'Pim\\Bundle\\DataGridBundle\\PimDataGridBundle',
                'PimTranslationBundle' => 'Pim\\Bundle\\TranslationBundle\\PimTranslationBundle',
                'PimImportExportBundle' => 'Pim\\Bundle\\ImportExportBundle\\PimImportExportBundle',
                'PimVersioningBundle' => 'Pim\\Bundle\\VersioningBundle\\PimVersioningBundle',
                'PimWebServiceBundle' => 'Pim\\Bundle\\WebServiceBundle\\PimWebServiceBundle',
                'PimEnrichBundle' => 'Pim\\Bundle\\EnrichBundle\\PimEnrichBundle',
                'PimBaseConnectorBundle' => 'Pim\\Bundle\\BaseConnectorBundle\\PimBaseConnectorBundle',
                'PimTransformBundle' => 'Pim\\Bundle\\TransformBundle\\PimTransformBundle',
                'PimCommentBundle' => 'Pim\\Bundle\\CommentBundle\\PimCommentBundle',
                'PimPdfGeneratorBundle' => 'Pim\\Bundle\\PdfGeneratorBundle\\PimPdfGeneratorBundle',
                'FoodyInstallerBundle' => 'Foody\\InstallerBundle\\FoodyInstallerBundle',
                'FoodyImportProductBundle' => 'Foody\\ImportProductBundle\\FoodyImportProductBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'oro_email.entity.cache_dir' => (dirname(dirname(__DIR__)).'/emails'),
            'oro_email.entity.cache_namespace' => 'OroEmail\\Cache\\OroEmailBundle\\Entity',
            'oro_email.entity.proxy_name_template' => '%sProxy',
            'database_unix_socket' => NULL,
            'mailer_transport' => 'smtp',
            'mailer_host' => 'localhost',
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'mailer_from_address' => 'no-reply@example.com',
            'mailer_from_name' => 'Akeneo Admin',
            'websocket_host' => '127.0.0.1',
            'websocket_port' => 8080,
            'session_handler' => NULL,
            'upload_dir' => (dirname(dirname(__DIR__)).'/uploads/product'),
            'archive_dir' => (dirname(dirname(__DIR__)).'/archive'),
            'installed' => '2015-09-15T11:41:37+02:00',
            'installer_data' => 'FoodyInstallerBundle:main',
            'uservoice_key' => NULL,
            'mass_edit_limit' => 1000,
            'pim_catalog_product_storage_driver' => 'doctrine/orm',
            'doctrine_migrations_dir' => (dirname(dirname(__DIR__)).'/../upgrades/schema'),
            'database_driver' => 'pdo_mysql',
            'database_host' => 'localhost',
            'database_port' => NULL,
            'database_name' => 'pim_foody',
            'database_user' => 'root',
            'database_password' => 'hoang',
            'locale' => 'en',
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'max_products_category_removal' => 100,
            'apy_js_form_validation.yui_js' => false,
            'controller_resolver.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener',
            'event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' => 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' => 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' => 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' => 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' => 'Symfony\\Component\\HttpKernel\\UriSigner',
            'fragment.handler.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\FragmentHandler',
            'fragment.renderer.inline.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' => 'Symfony\\Bundle\\FrameworkBundle\\Fragment\\ContainerAwareHIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'translator.class' => 'Oro\\Bundle\\TranslationBundle\\Translation\\Translator',
            'translator.identity.class' => 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' => 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' => 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' => 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' => 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' => 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' => 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' => 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' => 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' => 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' => 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' => 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.dumper.php.class' => 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' => 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' => 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' => 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' => 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' => 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' => 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' => 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.res.class' => 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' => 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' => 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'debug.errors_logger_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener',
            'debug.event_dispatcher.class' => 'Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher',
            'debug.stopwatch.class' => 'Symfony\\Component\\Stopwatch\\Stopwatch',
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'debug.controller_resolver.class' => 'Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'en',
            'session.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.native.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session_listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' => array(
                'name' => 'BAPID',
                'gc_maxlifetime' => 3600,
            ),
            'session.save_path' => (dirname(__DIR__).'/sessions'),
            'form.resolved_type_factory.class' => 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' => 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' => 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' => 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'form.csrf_provider.class' => 'Symfony\\Component\\Form\\Extension\\Csrf\\CsrfProvider\\SessionCsrfProvider',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.engine.delegating.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.locator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\TemplateLocator',
            'templating.loader.filesystem.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' => 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' => 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.engine.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\PhpEngine',
            'templating.helper.slots.class' => 'Symfony\\Component\\Templating\\Helper\\SlotsHelper',
            'templating.helper.assets.class' => 'Symfony\\Component\\Templating\\Helper\\CoreAssetsHelper',
            'templating.helper.actions.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\ActionsHelper',
            'templating.helper.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.request.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RequestHelper',
            'templating.helper.session.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\SessionHelper',
            'templating.helper.code.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\CodeHelper',
            'templating.helper.translator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\TranslatorHelper',
            'templating.helper.form.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\FormHelper',
            'templating.form.engine.class' => 'Symfony\\Component\\Form\\Extension\\Templating\\TemplatingRendererEngine',
            'templating.form.renderer.class' => 'Symfony\\Component\\Form\\FormRenderer',
            'templating.globals.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\GlobalVariables',
            'templating.asset.path_package.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Asset\\PathPackage',
            'templating.asset.url_package.class' => 'Symfony\\Component\\Templating\\Asset\\UrlPackage',
            'templating.asset.package_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Asset\\PackageFactory',
            'templating.helper.code.file_link_format' => NULL,
            'templating.helper.form.resources' => array(
                0 => 'FrameworkBundle:Form',
            ),
            'templating.debugger.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Debugger',
            'debug.templating.engine.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TimedPhpEngine',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
                1 => 'php',
            ),
            'validator.class' => 'Symfony\\Component\\Validator\\Validator',
            'validator.mapping.class_metadata_factory.class' => 'Symfony\\Component\\Validator\\Mapping\\ClassMetadataFactory',
            'validator.mapping.cache.apc.class' => 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.loader.loader_chain.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\LoaderChain',
            'validator.mapping.loader.static_method_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\StaticMethodLoader',
            'validator.mapping.loader.annotation_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\AnnotationLoader',
            'validator.mapping.loader.xml_files_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\XmlFilesLoader',
            'validator.mapping.loader.yaml_files_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\YamlFilesLoader',
            'validator.validator_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.mapping.loader.xml_files_loader.mapping_files' => array(
                0 => (dirname(dirname(dirname(__DIR__))).'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml'),
            ),
            'validator.mapping.loader.yaml_files_loader.mapping_files' => array(
                0 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/validation.yml'),
                1 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/validation.yml'),
                2 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/validation.yml'),
                3 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/validation.yml'),
                4 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/validation.yml'),
                5 => (dirname(dirname(dirname(__DIR__))).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/validation.yml'),
                6 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/UserBundle/Resources/config/validation.yml'),
                7 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/config/validation.yml'),
                8 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/completeness.yml'),
                9 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/group.yml'),
                10 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/associationType.yml'),
                11 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/attributegroup.yml'),
                12 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/attribute.yml'),
                13 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/grouptype.yml'),
                14 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/family.yml'),
                15 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/channel.yml'),
                16 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/product.yml'),
                17 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/CatalogBundle/Resources/config/validation/category.yml'),
                18 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/DataGridBundle/Resources/config/validation/datagrid_view.yml'),
                19 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/ImportExportBundle/Resources/config/validation/jobinstance.yml'),
                20 => (dirname(dirname(dirname(__DIR__))).'/vendor/akeneo/pim-community-dev/src/Pim/Bundle/EnrichBundle/Resources/config/validation/validation.yml'),
            ),
            'validator.translation_domain' => 'validators',
            'fragment.listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener',
            'profiler.class' => 'Symfony\\Component\\HttpKernel\\Profiler\\Profiler',
            'profiler_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener',
            'data_collector.config.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ConfigDataCollector',
            'data_collector.request.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector',
            'data_collector.exception.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ExceptionDataCollector',
            'data_collector.events.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\EventDataCollector',
            'data_collector.logger.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\LoggerDataCollector',
            'data_collector.time.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\TimeDataCollector',
            'data_collector.memory.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\MemoryDataCollector',
            'data_collector.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector',
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'profiler.storage.username' => '',
            'profiler.storage.password' => '',
            'profiler.storage.lifetime' => 86400,
            'router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\Router',
            'router.request_context.class' => 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' => 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' => 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' => 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' => 'appDevUrlMatcher',
            'router.options.generator.cache_class' => 'appDevUrlGenerator',
            'router_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => (dirname(dirname(__DIR__)).'/config/routing_dev.yml'),
            'router.cache_class_prefix' => 'appDev',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'annotations.reader.class' => 'Doctrine\\Common\\Annotations\\AnnotationReader',
            'annotations.cached_reader.class' => 'Doctrine\\Common\\Annotations\\CachedReader',
            'annotations.file_cache_reader.class' => 'Doctrine\\Common\\Annotations\\FileCacheReader',
            'serializer.class' => 'Symfony\\Component\\Serializer\\Serializer',
            'serializer.encoder.xml.class' => 'Symfony\\Component\\Serializer\\Encoder\\XmlEncoder',
            'serializer.encoder.json.class' => 'Symfony\\Component\\Serializer\\Encoder\\JsonEncoder',
            'security.context.class' => 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' => 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' => 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' => 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' => 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.firewall.class' => 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.role_hierarchy.class' => 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' => 'Symfony\\Component\\Security\\Http\\HttpUtils',
            'security.validator.user_password.class' => 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.authentication.retry_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.basic.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.listener.anonymous.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AnonymousAuthenticationListener',
            'security.authentication.switchuser_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.session.class' => 'Symfony\\Component\\Security\\Http\\Logout\\SessionLogoutHandler',
            'security.logout.handler.cookie_clearing.class' => 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' => 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.exception_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener',
            'security.context_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\DaoAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.provider.rememberme.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' => 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' => 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'security.role_hierarchy.roles' => array(

            ),
            'security.acl.permission_granting_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\PermissionGrantingStrategy',
            'security.acl.voter.class' => 'Symfony\\Component\\Security\\Acl\\Voter\\AclVoter',
            'security.acl.permission.map.class' => 'Symfony\\Component\\Security\\Acl\\Permission\\BasicPermissionMap',
            'security.acl.object_identity_retrieval_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\ObjectIdentityRetrievalStrategy',
            'security.acl.security_identity_retrieval_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\SecurityIdentityRetrievalStrategy',
            'security.acl.cache.doctrine.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\DoctrineAclCache',
            'security.acl.collection_cache.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\AclCollectionCache',
            'security.acl.dbal.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Dbal\\MutableAclProvider',
            'security.acl.dbal.schema.class' => 'Symfony\\Component\\Security\\Acl\\Dbal\\Schema',
            'security.acl.dbal.schema_listener.class' => 'Symfony\\Bundle\\SecurityBundle\\EventListener\\AclSchemaListener',
            'security.acl.dbal.class_table_name' => 'acl_classes',
            'security.acl.dbal.entry_table_name' => 'acl_entries',
            'security.acl.dbal.oid_table_name' => 'acl_object_identities',
            'security.acl.dbal.oid_ancestors_table_name' => 'acl_object_identity_ancestors',
            'security.acl.dbal.sid_table_name' => 'acl_security_identities',
            'twig.class' => 'Twig_Environment',
            'twig.loader.filesystem.class' => 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' => 'Twig_Loader_Chain',
            'templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' => 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' => 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.assets.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\AssetsExtension',
            'twig.extension.actions.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' => 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' => 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' => 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' => 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' => 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.form.engine.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' => 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.exception.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\ExceptionController',
            'twig.exception_listener.controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction',
            'twig.form.resources' => array(
                0 => 'form_div_layout.html.twig',
                1 => 'OroUIBundle:Form:fields.html.twig',
                2 => 'GenemuFormBundle:Form:div_layout.html.twig',
                3 => 'GenemuFormBundle:Form:jquery_layout.html.twig',
                4 => 'GenemuFormBundle:Form:stylesheet_layout.html.twig',
                5 => 'OroFormBundle:Form:fields.html.twig',
                6 => 'OroTranslationBundle:Form:fields.html.twig',
                7 => 'OroOrganizationBundle:Form:fields.html.twig',
                8 => 'OroSecurityBundle:Form:fields.html.twig',
                9 => 'PimUIBundle:Form:pim-fields.html.twig',
                10 => 'LiipImagineBundle:Form:form_div_layout.html.twig',
                11 => 'OroUIBundle:Form:translateable.html.twig',
            ),
            'debug.templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\Debug\\TimedTwigEngine',
            'twig.options' => array(
                'exception_controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction',
                'debug' => true,
                'strict_variables' => true,
                'autoescape_service' => NULL,
                'autoescape_service_method' => NULL,
                'cache' => (__DIR__.'/twig'),
                'charset' => 'UTF-8',
                'paths' => array(

                ),
            ),
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handlers_to_channels' => array(
                'monolog.handler.firephp' => NULL,
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.delivery.enabled' => false,
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => 'localhost',
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => false,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'OroAsseticBundle',
                1 => 'OroUIBundle',
                2 => 'OroUserBundle',
                3 => 'OroFilterBundle',
                4 => 'OroNavigationBundle',
                5 => 'OroWindowsBundle',
                6 => 'OroEntityExtendBundle',
                7 => 'OroSecurityBundle',
                8 => 'PimUIBundle',
                9 => 'PimCatalogBundle',
                10 => 'PimEnrichBundle',
                11 => 'PimNotificationBundle',
                14 => 'OroDataGridBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => true,
            'assetic.use_controller' => false,
            'assetic.enable_profiler' => false,
            'assetic.read_from' => (dirname(dirname(__DIR__)).'/../web'),
            'assetic.write_to' => (dirname(dirname(__DIR__)).'/../web'),
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/local/bin/sass',
            'assetic.filter.lessphp.class' => 'Assetic\\Filter\\LessphpFilter',
            'assetic.filter.lessphp.presets' => array(

            ),
            'assetic.filter.lessphp.paths' => array(

            ),
            'assetic.filter.lessphp.formatter' => NULL,
            'assetic.filter.lessphp.preserve_comments' => NULL,
            'assetic.filter.cssrewrite.class' => 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.twig_extension.functions' => array(

            ),
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(
                'datetime' => array(
                    'class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateTimeType',
                    'commented' => true,
                ),
            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
                'report_source' => 'doctrine.dbal.report_source_connection',
                'report_target' => 'doctrine.dbal.report_target_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ArrayApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\ORM\\Mapping\\Driver\\DriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'a2lix_translation_form.locales' => array(
                0 => 'en',
                1 => 'fr',
            ),
            'a2lix_translation_form.default_required' => true,
            'a2lix_translation_form.default.service.translation.class' => 'A2lix\\TranslationFormBundle\\TranslationForm\\DefaultTranslationForm',
            'a2lix_translation_form.default.listener.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\EventListener\\DefaultTranslationsListener',
            'a2lix_translation_form.default.type.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType',
            'a2lix_translation_form.default.type.translationsfields.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFieldsType',
            'a2lix_translation_form.default.type.translationsforms.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFormsType',
            'a2lix_translation_form.default.type.translationslocalesselector.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsLocalesSelectorType',
            'a2lix_translation_form.templating' => 'OroUIBundle:Form:translateable.html.twig',
            'besimple.soap.request_format.listener.class' => 'BeSimple\\SoapBundle\\EventListener\\RequestFormatListener',
            'besimple.soap.definition.loader.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'besimple.soap.definition.loader.class' => 'Symfony\\Component\\Config\\Loader\\DelegatingLoader',
            'besimple.soap.definition.loader.annot_dir.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationDirectoryLoader',
            'besimple.soap.definition.loader.annot_file.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationFileLoader',
            'besimple.soap.definition.loader.annot_class.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationClassLoader',
            'besimple.soap.definition.loader.annot_complextype.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationComplexTypeLoader',
            'besimple.soap.converter.collection.class' => 'BeSimple\\SoapCommon\\Converter\\TypeConverterCollection',
            'besimple.soap.converter.date_time.class' => 'BeSimple\\SoapCommon\\Converter\\DateTimeTypeConverter',
            'besimple.soap.converter.date.class' => 'BeSimple\\SoapCommon\\Converter\\DateTypeConverter',
            'besimple.soap.response.class' => 'BeSimple\\SoapBundle\\Soap\\SoapResponse',
            'besimple.soap.response.listener.class' => 'BeSimple\\SoapBundle\\EventListener\\SoapResponseListener',
            'besimple.soap.exception_listener.class' => 'BeSimple\\SoapBundle\\EventListener\\SoapExceptionListener',
            'besimple.soap.context.class' => 'BeSimple\\SoapBundle\\WebServiceContext',
            'besimple.soap.binder.request_header.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestHeaderMessageBinder',
            'besimple.soap.binder.request.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestMessageBinder',
            'besimple.soap.binder.response.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralResponseMessageBinder',
            'besimple.soap.binder.request.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedRequestMessageBinder',
            'besimple.soap.binder.request_header.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedRequestHeaderMessageBinder',
            'besimple.soap.binder.response.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedResponseMessageBinder',
            'besimple.soap.type.repository.class' => 'BeSimple\\SoapCommon\\Definition\\Type\\TypeRepository',
            'besimple.soap.server.classmap.class' => 'BeSimple\\SoapServer\\Classmap',
            'besimple.soap.cache.class' => 'BeSimple\\SoapBundle\\Cache',
            'besimple.soap.cache.dir' => (__DIR__.'/besimple/soap'),
            'besimple.soap.cache.type' => 1,
            'besimple.soap.cache.lifetime' => 86400,
            'besimple.soap.cache.limit' => 5,
            'besimple.soap.definition.dumper.options.stylesheet' => NULL,
            'besimple.soap.exception_listener.controller' => 'BeSimpleSoapBundle:SoapWebService:exception',
            'escape_wsse_authentication.provider.class' => 'Oro\\Bundle\\UserBundle\\Security\\WsseUserProvider',
            'escape_wsse_authentication.listener.class' => 'Oro\\Bundle\\UserBundle\\Security\\WsseAuthListener',
            'escape_wsse_authentication.entry_point.class' => 'Escape\\WSSEAuthenticationBundle\\Security\\Http\\EntryPoint\\EntryPoint',
            'escape_wsse_authentication.encoder.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'escape_wsse_authentication.nonce_cache.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => '',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\Rest\\Util\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Util\\Inflector\\DoctrineInflector',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => (__DIR__.'/fos_rest'),
            'fos_rest.formats' => array(
                'json' => false,
                'xml' => false,
                'html' => true,
            ),
            'fos_rest.default_engine' => 'php',
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.routing.loader.default_format' => 'json',
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.exception.codes' => array(
                'Pim\\Bundle\\EnrichBundle\\Exception\\DeleteException' => 409,
            ),
            'fos_rest.exception.messages' => array(
                'Pim\\Bundle\\EnrichBundle\\Exception\\DeleteException' => true,
                'Symfony\\Component\\HttpKernel\\Exception\\ConflictHttpException' => true,
            ),
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'fos_rest.default_priorities' => array(
                0 => 'html',
                1 => '*/*',
            ),
            'fos_rest.prefer_extension' => true,
            'fos_rest.fallback_format' => 'html',
            'fos_rest.mime_types' => array(

            ),
            'genemu.form.recaptcha.public_key' => '',
            'genemu.form.recaptcha.private_key' => '',
            'genemu.form.recaptcha.server_url' => '',
            'genemu.form.recaptcha.code' => '',
            'genemu.form.recaptcha.options' => array(

            ),
            'genemu.form.recaptcha.validation.options' => array(

            ),
            'genemu.form.captcha.options' => array(
                'enabled' => true,
                'driver' => 'gd',
                'width' => 100,
                'height' => 30,
                'length' => 4,
                'format' => 'png',
                'chars' => array(
                    0 => 0,
                    1 => 1,
                    2 => 2,
                    3 => 3,
                    4 => 4,
                    5 => 5,
                    6 => 6,
                    7 => 7,
                    8 => 8,
                    9 => 9,
                ),
                'font_size' => 18,
                'grayscale' => false,
                'font_color' => array(
                    0 => '252525',
                    1 => '8B8787',
                    2 => '550707',
                    3 => '3526E6',
                    4 => '88531E',
                ),
                'fonts' => array(
                    0 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/akbar.ttf'),
                    1 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/brushcut.ttf'),
                    2 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/molten.ttf'),
                    3 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/planetbe.ttf'),
                    4 => (dirname(dirname(__DIR__)).'/../web/bundles/genemuform/fonts/whoobub.ttf'),
                ),
                'background_color' => 'DDDDDD',
                'border_color' => '000000',
                'code' => NULL,
            ),
            'genemu.form.tinymce.configs' => array(
                'theme' => 'advanced',
            ),
            'genemu.form.color.options' => array(

            ),
            'genemu.form.date.options' => array(

            ),
            'genemu.form.rating.options' => array(

            ),
            'genemu.form.file.root_dir' => (dirname(dirname(__DIR__)).'/../web'),
            'genemu.form.file.folder' => '/upload',
            'genemu.form.file.upload_dir' => (dirname(dirname(__DIR__)).'/../web/upload'),
            'genemu.form.file.options' => array(

            ),
            'genemu.form.image.selected' => '',
            'genemu.form.image.thumbnails' => array(

            ),
            'genemu.form.image.filters' => array(

            ),
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.infer_types_from_doctrine_metadata' => true,
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Integration\\Symfony\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.listener.voters.class' => 'Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener',
            'knp_menu.voter.router.class' => 'Knp\\Menu\\Matcher\\Voter\\RouteVoter',
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => 'knp_menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'knp_paginator.class' => 'Knp\\Component\\Pager\\Paginator',
            'knp_paginator.templating.helper.pagination.class' => 'Knp\\Bundle\\PaginatorBundle\\Templating\\PaginationHelper',
            'knp_paginator.helper.processor.class' => 'Knp\\Bundle\\PaginatorBundle\\Helper\\Processor',
            'knp_paginator.template.pagination' => 'OroUIBundle::pager.html.twig',
            'knp_paginator.template.filtration' => 'KnpPaginatorBundle:Pagination:filtration.html.twig',
            'knp_paginator.template.sortable' => 'KnpPaginatorBundle:Pagination:sortable_link.html.twig',
            'knp_paginator.page_range' => 5,
            'lexik_maintenance.listener.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Listener\\MaintenanceListener',
            'lexik_maintenance.driver_factory.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\DriverFactory',
            'lexik_maintenance.driver.database.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\DatabaseDriver',
            'lexik_maintenance.driver' => array(
                'class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\FileDriver',
                'options' => array(
                    'file_path' => (dirname(__DIR__).'/lock'),
                ),
                'ttl' => NULL,
            ),
            'lexik_maintenance.authorized.path' => 'maintenance|.*\\.js',
            'lexik_maintenance.authorized.host' => NULL,
            'lexik_maintenance.authorized.ips' => NULL,
            'lexik_maintenance.authorized.query' => array(

            ),
            'lexik_maintenance.authorized.route' => NULL,
            'lexik_maintenance.authorized.attributes' => array(

            ),
            'liip_imagine.filter.configuration.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterConfiguration',
            'liip_imagine.filter.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterManager',
            'liip_imagine.data.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\DataManager',
            'liip_imagine.cache.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager',
            'liip_imagine.controller.class' => 'Liip\\ImagineBundle\\Controller\\ImagineController',
            'liip_imagine.routing.loader.class' => 'Liip\\ImagineBundle\\Routing\\ImagineLoader',
            'liip_imagine.twig.extension.class' => 'Liip\\ImagineBundle\\Templating\\ImagineExtension',
            'liip_imagine.templating.helper.class' => 'Liip\\ImagineBundle\\Templating\\Helper\\ImagineHelper',
            'liip_imagine.gd.class' => 'Imagine\\Gd\\Imagine',
            'liip_imagine.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'liip_imagine.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'liip_imagine.filter.loader.relative_resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RelativeResizeFilterLoader',
            'liip_imagine.filter.loader.resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResizeFilterLoader',
            'liip_imagine.filter.loader.thumbnail.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ThumbnailFilterLoader',
            'liip_imagine.filter.loader.crop.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'liip_imagine.filter.loader.paste.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\PasteFilterLoader',
            'liip_imagine.filter.loader.watermark.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\WatermarkFilterLoader',
            'liip_imagine.filter.loader.strip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\StripFilterLoader',
            'liip_imagine.filter.loader.background.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\BackgroundFilterLoader',
            'liip_imagine.filter.loader.upscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\UpscaleFilterLoader',
            'liip_imagine.data.loader.filesystem.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\Loader\\FileSystemLoader',
            'liip_imagine.data.loader.stream.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\Loader\\StreamLoader',
            'liip_imagine.cache.resolver.web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\WebPathResolver',
            'liip_imagine.cache.resolver.no_cache.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\NoCacheResolver',
            'liip_imagine.form.type.image.class' => 'Liip\\ImagineBundle\\Form\\Type\\ImageType',
            'liip_imagine.cache.clearer.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheClearer',
            'liip_imagine.cache_prefix' => '/media/cache',
            'liip_imagine.web_root' => (dirname(dirname(__DIR__)).'/../web'),
            'liip_imagine.data_root' => (dirname(dirname(__DIR__)).'/../web'),
            'liip_imagine.cache_mkdir_mode' => 511,
            'liip_imagine.formats' => array(

            ),
            'liip_imagine.cache.resolver.default' => 'web_path',
            'liip_imagine.filter_sets' => array(
                'avatar_med' => array(
                    'quality' => 95,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 58,
                                1 => 58,
                            ),
                            'mode' => 'outbound',
                        ),
                        'strip' => array(

                        ),
                    ),
                    'format' => NULL,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'controller_action' => NULL,
                    'route' => array(

                    ),
                ),
                'thumbnail_small' => array(
                    'cache' => 'local_dir',
                    'quality' => 95,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 80,
                                1 => 120,
                            ),
                            'mode' => 'inset',
                        ),
                        'strip' => array(

                        ),
                    ),
                    'format' => NULL,
                    'data_loader' => NULL,
                    'controller_action' => NULL,
                    'route' => array(

                    ),
                ),
                'thumbnail' => array(
                    'cache' => 'local_dir',
                    'quality' => 95,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 320,
                                1 => 240,
                            ),
                            'mode' => 'inset',
                        ),
                        'strip' => array(

                        ),
                    ),
                    'format' => NULL,
                    'data_loader' => NULL,
                    'controller_action' => NULL,
                    'route' => array(

                    ),
                ),
                'image_preview' => array(
                    'cache' => 'local_dir',
                    'quality' => 95,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 900,
                                1 => 600,
                            ),
                            'mode' => 'inset',
                        ),
                        'strip' => array(

                        ),
                    ),
                    'format' => NULL,
                    'data_loader' => NULL,
                    'controller_action' => NULL,
                    'route' => array(

                    ),
                ),
            ),
            'liip_imagine.data.loader.default' => 'filesystem',
            'liip_imagine.controller_action' => 'liip_imagine.controller:filterAction',
            'liip_imagine.cache.resolver.base_path' => '',
            'nelmio_api_doc.motd.template' => 'NelmioApiDocBundle::Components/motd.html.twig',
            'nelmio_api_doc.api_name' => 'API documentation',
            'nelmio_api_doc.sandbox.enabled' => true,
            'nelmio_api_doc.sandbox.endpoint' => NULL,
            'nelmio_api_doc.sandbox.request_format.method' => 'format_param',
            'nelmio_api_doc.sandbox.accept_type' => '',
            'nelmio_api_doc.sandbox.body_format' => 'form',
            'nelmio_api_doc.sandbox.request_format.default_format' => 'json',
            'nelmio_api_doc.formatter.abstract_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\AbstractFormatter',
            'nelmio_api_doc.formatter.markdown_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\MarkdownFormatter',
            'nelmio_api_doc.formatter.simple_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\SimpleFormatter',
            'nelmio_api_doc.formatter.html_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\HtmlFormatter',
            'nelmio_api_doc.sandbox.authentication' => NULL,
            'nelmio_api_doc.extractor.api_doc_extractor.class' => 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor',
            'nelmio_api_doc.form.extension.description_form_type_extension.class' => 'Nelmio\\ApiDocBundle\\Form\\Extension\\DescriptionFormTypeExtension',
            'nelmio_api_doc.twig.extension.extra_markdown.class' => 'Nelmio\\ApiDocBundle\\Twig\\Extension\\MarkdownExtension',
            'nelmio_api_doc.doc_comment_extractor.class' => 'Nelmio\\ApiDocBundle\\Util\\DocCommentExtractor',
            'nelmio_api_doc.extractor.handler.fos_rest.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\FosRestHandler',
            'nelmio_api_doc.extractor.handler.jms_security.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\JmsSecurityExtraHandler',
            'nelmio_api_doc.extractor.handler.sensio_framework_extra.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\SensioFrameworkExtraHandler',
            'nelmio_api_doc.extractor.handler.phpdoc.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\PhpDocHandler',
            'nelmio_api_doc.request_listener.parameter' => '_doc',
            'nelmio_api_doc.event_listener.request.class' => 'Nelmio\\ApiDocBundle\\EventListener\\RequestListener',
            'stof_doctrine_extensions.event_listener.locale.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.event_listener.blame.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener',
            'stof_doctrine_extensions.uploadable.manager.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadableManager',
            'stof_doctrine_extensions.uploadable.mime_type_guesser.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\MimeTypeGuesserAdapter',
            'stof_doctrine_extensions.uploadable.default_file_info.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.default_file_path' => NULL,
            'stof_doctrine_extensions.translation_fallback' => true,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.uploadable.validate_writable_directory' => true,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'sylius.process.builder.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Builder\\ProcessBuilder',
            'sylius.process.context.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Context\\ProcessContext',
            'sylius.controller.process.class' => 'Sylius\\Bundle\\FlowBundle\\Controller\\ProcessController',
            'sylius.process.coordinator.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Coordinator\\Coordinator',
            'sylius.process_storage.session.class' => 'Sylius\\Bundle\\FlowBundle\\Storage\\SessionStorage',
            'sylius.process_storage.session.bag.class' => 'Sylius\\Bundle\\FlowBundle\\Storage\\SessionFlowsBag',
            'oro_ui.twig.ceil.class' => 'Oro\\Bundle\\UIBundle\\Twig\\CeilExtension',
            'oro_ui.twig.extension.class' => 'Oro\\Bundle\\UIBundle\\Twig\\UiExtension',
            'oro_ui.twig.md5.class' => 'Oro\\Bundle\\UIBundle\\Twig\\Md5Extension',
            'oro_ui.router.class' => 'Oro\\Bundle\\UIBundle\\Route\\Router',
            'oro_ui.twig.widget.class' => 'Oro\\Bundle\\UIBundle\\Twig\\WidgetExtension',
            'oro_ui.twig.date.class' => 'Oro\\Bundle\\UIBundle\\Twig\\DateExtension',
            'oro_ui.twig.skype_button.class' => 'Oro\\Bundle\\UIBundle\\Twig\\SkypeButtonExtension',
            'oro_ui.view.listener.class' => 'Oro\\Bundle\\UIBundle\\EventListener\\TemplateListener',
            'oro_ui.twig.form.class' => 'Oro\\Bundle\\UIBundle\\Twig\\FormExtension',
            'oro_ui.format_converter.date_time.jquery_ui.class' => 'Oro\\Bundle\\UIBundle\\Converter\\JqueryUiDateTimeFormatConverter',
            'oro_ui.wrap_class' => 'block-wrap',
            'oro_ui.placeholders' => array(
                'header_logo' => array(
                    'label' => 'Header Logo',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroUIBundle:Default:logo.html.twig',
                            'name' => 'logo',
                        ),
                    ),
                ),
                'user_menu' => array(
                    'label' => 'Profile menu',
                    'items' => array(
                        0 => array(
                            'order' => 50,
                            'template' => 'PimNotificationBundle:Default:notifications.html.twig',
                            'name' => 'notifications',
                        ),
                        1 => array(
                            'order' => 100,
                            'template' => 'OroUserBundle:Menu:menuProfile.html.twig',
                            'name' => 'menu_user',
                        ),
                        2 => array(
                            'order' => 200,
                            'template' => 'OroUIBundle:Default:help.html.twig',
                            'name' => 'help',
                        ),
                    ),
                ),
                'form_buttons' => array(
                    'label' => 'Profile menu',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroUIBundle:Form:buttons.html.twig',
                            'name' => 'add_update_delete',
                        ),
                    ),
                ),
                'head_style' => array(
                    'label' => 'Head styles',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroAsseticBundle:Assets:oro_css.html.twig',
                            'name' => 'assets_css',
                        ),
                    ),
                ),
                'head_script' => array(
                    'label' => 'Head scripts',
                ),
                'requirejs_config_extend' => array(
                    'items' => array(
                        0 => array(
                            'order' => 10,
                            'template' => 'OroUIBundle::requirejs.config.js.twig',
                            'name' => 'ui_requirejs_config',
                        ),
                        1 => array(
                            'order' => 100,
                            'template' => 'OroTranslationBundle::requirejs.config.js.twig',
                            'name' => 'translation_requirejs_config',
                        ),
                        2 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Js:requirejs.config.js.twig',
                            'name' => 'routing_requirejs_config',
                        ),
                        3 => array(
                            'order' => 110,
                            'template' => 'PimUIBundle::pim.requirejs.config.js.twig',
                            'name' => 'require_js_config',
                        ),
                    ),
                    'lable' => 'RequireJS Configuration Run Time Extend',
                ),
                'scripts_after' => array(
                    'items' => array(
                        0 => array(
                            'order' => 200,
                            'template' => 'OroWindowsBundle:Include:javascript.html.twig',
                            'name' => 'window_bundle_js',
                        ),
                        1 => array(
                            'order' => 500,
                            'template' => 'OroLocaleBundle::locale_settings.html.twig',
                            'name' => 'locale_settings',
                        ),
                    ),
                    'label' => 'Scripts After',
                ),
                'scripts_before' => array(
                    'label' => 'Scripts Before',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Js:dot.menu.js.twig',
                            'name' => 'dot_menu_js',
                        ),
                        1 => array(
                            'order' => 200,
                            'template' => 'OroNavigationBundle:Js:pinbar.js.twig',
                            'name' => 'pinbar_js',
                        ),
                    ),
                ),
                'hash_nav' => array(
                    'label' => 'Hash Navigation',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:HashNav:script.js.twig',
                            'name' => 'hashNavigation',
                        ),
                    ),
                ),
                'navbar' => array(
                    'label' => 'Navigation Bar',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Shortcut:shortcuts.html.twig',
                            'name' => 'shortcuts',
                        ),
                    ),
                ),
                'application_menu' => array(
                    'label' => 'Application Menu',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:applicationMenu.html.twig',
                            'name' => 'application_menu',
                        ),
                    ),
                ),
                'before_navigation' => array(
                    'label' => 'Top Navigation Before',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:dotsMenu.html.twig',
                            'name' => 'dots_menu',
                        ),
                    ),
                ),
                'after_navigation' => array(
                    'label' => 'Top Navigation After',
                ),
                'pin_button' => array(
                    'label' => 'Pinbar buttons',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:pinButton.html.twig',
                            'name' => 'pin_button',
                        ),
                    ),
                ),
                'breadcrumb' => array(
                    'label' => 'Breadcrumbs',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:breabcrumbs.html.twig',
                            'name' => 'breadcrumbs',
                        ),
                    ),
                ),
                'change_history_block' => array(
                    'label' => 'Change history block',
                    'items' => array(
                        0 => array(
                            'template' => 'OroDataAuditBundle::change_history_link.html.twig',
                            'name' => 'change_history_link',
                        ),
                    ),
                ),
            ),
            'oro_assetic.twig_extension.class' => 'Oro\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'oro_assetic.asset_manager.class' => 'Oro\\Bundle\\AsseticBundle\\Factory\\OroAssetManager',
            'oro_assetic.assets_groups' => array(
                'css' => array(
                    0 => 'UI',
                    1 => 'config',
                    2 => 'grids',
                    3 => 'email',
                    4 => 'entityextend',
                    5 => 'filters',
                    6 => 'user',
                    7 => 'windows',
                    8 => 'pim_ui',
                ),
            ),
            'oro_assetic.compiled_assets_groups' => array(
                'css' => array(

                ),
            ),
            'oro_assetic.assets' => array(
                'css' => array(
                    'compress' => array(
                        0 => array(
                            0 => 'bundles/oroui/css/less/main.less',
                            1 => 'bundles/oroui/css/all.css',
                            2 => 'bundles/oroui/lib/jstree/themes/default/style.css',
                            3 => 'bundles/oroui/css/jquery-ui.grid.css',
                            4 => 'bundles/oroui/lib/font-awesome/css/font-awesome.css',
                            5 => 'bundles/oroconfig/css/style.css',
                            6 => 'bundles/orodatagrid/lib/backgrid/backgrid.css',
                            7 => 'bundles/orodatagrid/lib/backgrid/extensions/paginator/backgrid-paginator.css',
                            8 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.css',
                            9 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.filter.css',
                            10 => 'bundles/orodatagrid/css/oro.grid.css',
                            11 => 'bundles/oroemail/css/style.css',
                            12 => 'bundles/oroentityextend/css/extend.css',
                            13 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.css',
                            14 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.filter.css',
                            15 => 'bundles/orofilter/css/oro.filter.css',
                            16 => 'bundles/orouser/css/jquery-ui-1.10.2.custom.css',
                            17 => 'bundles/orowindows/css/jquery.dialog.extended.css',
                            18 => 'bundles/pimui/css/slimbox2.css',
                            19 => 'bundles/pimui/css/flags.less',
                        ),
                    ),
                    'uncompress' => array(
                        0 => array(

                        ),
                    ),
                ),
            ),
            'oro_config.global.class' => 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager',
            'oro_config.user.class' => 'Oro\\Bundle\\ConfigBundle\\Config\\UserConfigManager',
            'oro_config.twig_extension.class' => 'Oro\\Bundle\\ConfigBundle\\Twig\\ConfigExtension',
            'oro_config.provider.system_configuration.form_provider.class' => 'Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider',
            'oro_config.form.config_subscriber.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\EventListener\\ConfigSubscriber',
            'oro_config.form.handler.config.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Handler\\ConfigHandler',
            'oro_config.type.form.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\FormType',
            'oro_config.type.form_field.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\FormFieldType',
            'oro_config.type.config_checkbox.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\ConfigCheckbox',
            'oro_config.entities' => array(
                'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array(
                    'name' => 'entity.email_template.name',
                    'description' => 'entity.email_template.description',
                ),
                'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array(
                    'icon_class' => 'icon-envelope',
                    'name' => 'entity.email.name',
                    'description' => 'entity.email.description',
                ),
                'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array(
                    'name' => 'entity.business_unit.name',
                    'description' => 'entity.business_unit.description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\User' => array(
                    'icon_class' => 'icon-user',
                    'name' => 'entity.user.name',
                    'description' => 'entity.user.description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\Role' => array(
                    'icon_class' => 'icon-signal',
                    'name' => 'entity.role.name',
                    'description' => 'entity.role.description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\Group' => array(
                    'icon_class' => 'icon-home',
                    'name' => 'entity.group.name',
                    'description' => 'entity.group.description',
                ),
                'Pim\\Bundle\\CatalogBundle\\Entity\\Category' => array(
                    'icon_class' => 'icon-category',
                    'name' => 'Category',
                    'description' => 'Category allows to organize products',
                ),
                'Pim\\Bundle\\CatalogBundle\\Model\\Product' => array(
                    'icon_class' => 'icon-product',
                    'name' => 'Product',
                    'description' => 'Product description',
                ),
            ),
            'oro_datagrid.datagrid.base.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Datagrid',
            'oro_datagrid.extension.acceptor.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Acceptor',
            'oro_datagrid.datagrid.manager.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Manager',
            'oro_datagrid.datagrid.builder.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder',
            'oro_datagrid.datagrid.request_params.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\RequestParameters',
            'oro_datagrid.provider.resolver.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\SystemAwareResolver',
            'oro_datagrid.twig.metadata.class' => 'Oro\\Bundle\\DataGridBundle\\Twig\\MetadataExtension',
            'oro_datagrid.event_listener.base_orm_relation.class' => 'Oro\\Bundle\\DataGridBundle\\EventListener\\BaseOrmRelationDatagridListener',
            'oro_datagrid.configuration.provider.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\ConfigurationProvider',
            'oro_datagrid.configuration.provider.chain.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\ChainConfigurationProvider',
            'oro_datagrid.extension.toolbar.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Toolbar\\ToolbarExtension',
            'oro_datagrid.extension.formatter.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\FormatterExtension',
            'oro_datagrid.extension.orm_pager.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Pager\\OrmPagerExtension',
            'oro_datagrid.extension.pager.orm.pager.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Pager\\Orm\\Pager',
            'oro_datagrid.extension.orm_sorter.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension',
            'oro_datagrid.extension.action.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\ActionExtension',
            'oro_datagrid.extension.mass_action.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionExtension',
            'oro_datagrid.extension.views.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\GridViews\\GridViewsExtension',
            'oro_datagrid.datasource.orm.class' => 'Oro\\Bundle\\DataGridBundle\\Datasource\\Orm\\OrmDatasource',
            'oro_datagrid.extension.formatter.property.field_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\FieldProperty',
            'oro_datagrid.extension.formatter.property.url_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\UrlProperty',
            'oro_datagrid.extension.formatter.property.twig_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\TwigTemplateProperty',
            'oro_datagrid.extension.formatter.property.translateable_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\TranslateableProperty',
            'oro_datagrid.extension.formatter.property.callback_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\CallbackProperty',
            'oro_datagrid.extension.action.type.navigate.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\NavigateAction',
            'oro_datagrid.extension.action.type.ajax.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\AjaxAction',
            'oro_datagrid.extension.action.type.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\DeleteAction',
            'oro_datagrid.extension.mass_action.handler.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\DeleteMassActionHandler',
            'oro_datagrid.mass_action.parameters_parser.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionParametersParser',
            'oro_datagrid.mass_action.dispatcher.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionDispatcher',
            'oro_datagrid.extension.mass_action.type.ajax.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Ajax\\AjaxMassAction',
            'oro_datagrid.extension.mass_action.type.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Ajax\\DeleteMassAction',
            'oro_datagrid.extension.mass_action.type.redirect.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Redirect\\RedirectMassAction',
            'oro_datagrid.extension.mass_action.type.widget.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Widget\\WidgetMassAction',
            'oro_datagrid.extension.mass_action.type.window.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Widget\\WindowMassAction',
            'oro_distribution.routing_loader.class' => 'Oro\\Bundle\\DistributionBundle\\Routing\\OroAutoLoader',
            'oro_email.email.entity.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Email',
            'oro_email.email.cache.manager.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EmailCacheManager',
            'oro_email.email.address.manager.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailAddressManager',
            'oro_email.email.owner.provider.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Provider\\EmailOwnerProvider',
            'oro_email.email.owner.provider.storage.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Provider\\EmailOwnerProviderStorage',
            'oro_email.email.owner.manager.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailOwnerManager',
            'oro_email.email.entity.builder.class' => 'Oro\\Bundle\\EmailBundle\\Builder\\EmailEntityBuilder',
            'oro_email.email.entity.batch_processor.class' => 'Oro\\Bundle\\EmailBundle\\Builder\\EmailEntityBatchProcessor',
            'oro_email.email_body_loader_selector.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\EmailBodyLoaderSelector',
            'oro_email.listener.entity_subscriber.class' => 'Oro\\Bundle\\EmailBundle\\EventListener\\EntitySubscriber',
            'oro_email.manager.email.api.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailApiEntityManager',
            'oro_email.entity.cache.warmer.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EntityCacheWarmer',
            'oro_email.entity.cache.clearer.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EntityCacheClearer',
            'oro_email.direct_mailer.class' => 'Oro\\Bundle\\EmailBundle\\Mailer\\DirectMailer',
            'oro_email.emailtemplate.entity.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate',
            'oro_email.manager.emailtemplate.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_email.listener.config_subscriber.class' => 'Oro\\Bundle\\EmailBundle\\EventListener\\ConfigSubscriber',
            'oro_email.provider.variable_provider.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\VariablesProvider',
            'oro_email.cache.available_in_template_key' => 'oro_email.available_in_template_fields',
            'oro_email.email_renderer.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer',
            'oro_email.twig.email_security_policy.class' => 'Twig_Sandbox_SecurityPolicy',
            'oro_email.datagrid_query_factory.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailQueryFactory',
            'oro_email.emailtemplate.datagrid_view_list.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailTemplatesViewList',
            'oro_email.emailtemplate.datagrid_helper.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailTemplatesGridHelper',
            'oro_email.form.subscriber.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\EventListener\\BuildTemplateFormSubscriber',
            'oro_email.form.type.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateType',
            'oro_email.form.type.emailtemplate_select.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateSelectType',
            'oro_email.form.type.emailtemplate_translation.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateTranslationType',
            'oro_email.form.handler.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Handler\\EmailTemplateHandler',
            'oro_email.form.type.emailtemplate.api.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateApiType',
            'oro_email.form.handler.email.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Handler\\EmailHandler',
            'oro_email.form.type.email.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailType',
            'oro_email.form.type.email_address.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailAddressType',
            'oro_entity.orm.entity_class_resolver.class' => 'Pim\\Bundle\\EntityBundle\\ORM\\EntityClassResolver',
            'oro_entity.orm.entity_class_accessor.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\EntityClassAccessor',
            'oro_entity.orm.query.filter_collection.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\Query\\FilterCollection',
            'oro_entity.form.type.custom_entity.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\CustomEntityType',
            'oro_entity.form.type.entity_choice.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntityChoiceType',
            'oro_entity.form.type.entity_field_choice.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntityFieldChoiceType',
            'oro_entity.form.type.option_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\OptionSelectType',
            'oro_entity.form.type.entity_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntitySelectType',
            'oro_entity.form.handler.entity_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Handler\\EntitySelectHandler',
            'oro_entity.listener.navigation_listener.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\NavigationListener',
            'oro_entity.owner.entity_config_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\EntityConfigSubscriber',
            'oro_entity.datagrid.extension.class' => 'Oro\\Bundle\\EntityBundle\\Grid\\ExtendExtension',
            'oro_entity.event_listener.custom_entity_grid_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener',
            'oro_entity.event_listener.relation_entity_grid_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\RelationEntityGridListener',
            'oro_entity.entity_provider.class' => 'Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider',
            'oro_entity.entity_field_provider.class' => 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider',
            'oro_entity_config.config_manager.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigManager',
            'oro_entity_config.config_model_manager.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigModelManager',
            'oro_entity_config.config_audit_mamanger.class' => 'Oro\\Bundle\\EntityConfigBundle\\Audit\\AuditManager',
            'oro_entity_config.cache.cache.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigCache',
            'oro_entity_config.provider_bag.class' => 'Oro\\Bundle\\EntityConfigBundle\\Provider\\ConfigProviderBag',
            'oro_entity_config.event_listener.option_set_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\OptionSetListener',
            'oro_entity_config.event_listener.entityconfig_grid_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener',
            'oro_entity_config.event_listener.entityfields_grid_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener',
            'oro_entity_config.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'oro_entity_config.metadata.annotation_driver.class' => 'Oro\\Bundle\\EntityConfigBundle\\Metadata\\Driver\\AnnotationDriver',
            'oro_entity_config.type.config.class' => 'Oro\\Bundle\\EntityConfigBundle\\Form\\Type\\ConfigType',
            'oro_entity_config.extension.config.class' => 'Oro\\Bundle\\EntityConfigBundle\\Form\\Extension\\ConfigExtension',
            'oro_entity_extend.entity.cache.warmer.class' => 'Oro\\Bundle\\EntityExtendBundle\\Cache\\EntityCacheWarmer',
            'oro_entity_extend.extend.extend_manager.class' => 'Oro\\Bundle\\EntityExtendBundle\\Extend\\ExtendManager',
            'oro_entity_extend.extension.extend_entity.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Extension\\ExtendEntityExtension',
            'oro_entity_extend.tools.dumper.class' => 'Oro\\Bundle\\EntityExtendBundle\\Tools\\ExtendConfigDumper',
            'oro_entity_extend.listener.config_subscriber.class' => 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\ConfigSubscriber',
            'oro_entity_extend.listener.entity_subscriber.class' => 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\DoctrineSubscriber',
            'oro_entity_extend.twig.view_extension.class' => 'Oro\\Bundle\\EntityExtendBundle\\Twig\\ViewExtension',
            'oro_entity_extend.type.field.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\FieldType',
            'oro_entity_extend.type.relation.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\RelationType',
            'oro_entity_extend.type.option_set.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\OptionSetType',
            'oro_entity_extend.type.option_set_collection.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\OptionSetCollectionType',
            'oro_filter.twig.layout' => 'PimFilterBundle:Filter:pim-layout.js.twig',
            'oro_filter.twig.header' => 'OroFilterBundle:Filter:header.html.twig',
            'oro_filter.twig.extension.render_layout.class' => 'Oro\\Bundle\\FilterBundle\\Twig\\RenderLayoutExtension',
            'oro_filter.twig.extension.render_header.class' => 'Oro\\Bundle\\FilterBundle\\Twig\\RenderHeaderExtension',
            'oro_filter.extension.orm_filter.class' => 'Oro\\Bundle\\FilterBundle\\Grid\\Extension\\OrmFilterExtension',
            'oro_filter.filter_utility.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\FilterUtility',
            'oro_filter.string_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\StringFilter',
            'oro_filter.select_row_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\SelectRowFilter',
            'oro_filter.number_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\NumberFilter',
            'oro_filter.percent_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\PercentFilter',
            'oro_filter.choice_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\ChoiceFilter',
            'oro_filter.entity_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\EntityFilter',
            'oro_filter.boolean_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\BooleanFilter',
            'oro_filter.date_range_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\DateRangeFilter',
            'oro_filter.datetime_range_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\DateTimeRangeFilter',
            'oro_form.autocomplete.security.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\Security',
            'oro_form.autocomplete.search_registry.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\SearchRegistry',
            'oro_form.autocomplete.search_handler.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\SearchHandler',
            'oro_form.autocomplete.full_name.search_handler.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\FullNameSearchHandler',
            'oro_form.type.date.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroDateType',
            'oro_form.type.datetime.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroDateTimeType',
            'oro_form.type.money.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroMoneyType',
            'oro_form.type.entity_identifier.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\EntityIdentifierType',
            'oro_form.type.jqueryselect2_hidden.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroJquerySelect2HiddenType',
            'oro_form.type.icon.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroIconType',
            'oro_form.type.multiple_entity.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\MultipleEntityType',
            'oro_form.type.collection.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\CollectionType',
            'oro_form.extension.data_block.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\DataBlockExtension',
            'oro_form.extension.client_validation.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\ClientValidationExtension',
            'oro_form.extension.constraint_as_option.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\ConstraintAsOptionExtension',
            'oro_form.extension.tooltip.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\TooltipFormExtension',
            'oro_form.extension.js_validation.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidationExtension',
            'oro_form.extension.js_validation.constraints_provider.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidation\\ConstraintsProvider',
            'oro_form.extension.js_validation.repeated.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidation\\RepeatedTypeExtension',
            'oro_form.importexport.primary_item_collection_normalizer.class' => 'Oro\\Bundle\\FormBundle\\ImportExport\\Serializer\\Normalizer\\PrimaryItemCollectionNormalizer',
            'oro_form.validator.constraint_factory.class' => 'Oro\\Bundle\\FormBundle\\Validator\\ConstraintFactory',
            'oro_form.twig.form.class' => 'Oro\\Bundle\\FormBundle\\Twig\\FormExtension',
            'oro_form.twig.js_validation_extension.class' => 'Oro\\Bundle\\FormBundle\\Twig\\JsValidationExtension',
            'oro_help.model.help_link_provider.class' => 'Oro\\Bundle\\HelpBundle\\Model\\HelpLinkProvider',
            'oro_help.twig.extension.class' => 'Oro\\Bundle\\HelpBundle\\Twig\\HelpExtension',
            'oro_help.listener.help_link.class' => 'Oro\\Bundle\\HelpBundle\\EventListener\\HelpLinkRequestListener',
            'oro_imap.connector.factory.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnectorFactory',
            'oro_imap.connector.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnector',
            'oro_imap.services.factory.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapServicesFactory',
            'oro_imap.search_string_manager.gmail.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\GmailSearchStringManager',
            'oro_imap.search_string_manager.other.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\SearchStringManager',
            'oro_imap.storage.gmail.class' => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\GmailImap',
            'oro_imap.storage.other.class' => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\Imap',
            'oro_imap.email_body_loader.class' => 'Oro\\Bundle\\ImapBundle\\Provider\\ImapEmailBodyLoader',
            'oro_imap.email_synchronizer.class' => 'Oro\\Bundle\\ImapBundle\\Sync\\ImapEmailSynchronizer',
            'oro_imap.form.type.configuration.class' => 'Oro\\Bundle\\ImapBundle\\Form\\Type\\ConfigurationType',
            'oro_installer.scenario.class' => 'Oro\\Bundle\\InstallerBundle\\Process\\InstallerScenario',
            'oro_installer.requirements.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\OroRequirements',
            'oro_installer.requirements.settings.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\SettingsRequirements',
            'oro_installer.requirements.extensions.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\ExtensionsRequirements',
            'oro_installer.requirements.filesystem.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\FilesystemRequirements',
            'oro_installer.yaml_persister.class' => 'Oro\\Bundle\\InstallerBundle\\Persister\\YamlPersister',
            'oro_installer.listener.request.class' => 'Oro\\Bundle\\InstallerBundle\\EventListener\\RequestListener',
            'oro_installer.form.type.configuration.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\ConfigurationType',
            'oro_installer.form.type.configuration.database.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\DatabaseType',
            'oro_installer.form.type.configuration.mailer.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\MailerType',
            'oro_installer.form.type.configuration.system.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\SystemType',
            'oro_installer.form.type.configuration.ws.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\WebsocketType',
            'oro_installer.form.type.setup.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\SetupType',
            'oro_locale.format.name' => array(
                'en' => '%prefix% %first_name% %middle_name% %last_name% %suffix%',
                'en_US' => '%prefix% %first_name% %middle_name% %last_name% %suffix%',
                'ru' => '%last_name% %first_name% %middle_name%',
                'ru_RU' => '%last_name% %first_name% %middle_name%',
            ),
            'oro_locale.format.address' => array(
                'AD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'parish',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AG' => array(
                    'require' => array(
                        0 => 'street',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AR' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%POSTAL_CODE% %CITY%\\n%region%\\n%country%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AS' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AT' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AU' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AX' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nAX-%postal_code% %city%\\n%country%\\nÅLAND',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'AX-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nAZ %postal_code% %city%\\n%country%',
                    'postprefix' => 'AZ ',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BB' => array(
                    'region_name_type' => 'parish',
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% - %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BE' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BF' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BL' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BR' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY%-%REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                        2 => 'city',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BY' => array(
                    'format' => '%country%\\n%region%\\n%postal_code% %city% %street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CA' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION%, %COUNTRY% %POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CC' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CH' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nCH-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'CH-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CI' => array(
                    'format' => '%name%\\n%organization% %street% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CN' => array(
                    'format' => '%postal_code%\\n%COUNTRY%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%, %city%\\n%REGION%, %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'has_disputed' => true,
                    'format_charset' => 'GB2312',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                ),
                'CO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CX' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DK' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\n%postal_code%',
                    'direction' => 'rtl',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ES' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ET' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FI' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nFI-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'FI-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FM' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nFO%postal_code% %city%\\n%country%',
                    'postprefix' => 'FO',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FR' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GB' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%region%\\n%country%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'county',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nGUERNSEY\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%country%',
                    'require' => array(
                        0 => 'street',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GN' => array(
                    'format' => '%name%\\n%organization%\\n%postal_code% %street% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GP' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%- %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GU' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HK' => array(
                    'format' => '%REGION%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'area',
                    'format_charset' => 'Big5',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'HM' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nHR-%postal_code% %city%\\n%country%',
                    'postprefix' => 'HR-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nHT%postal_code% %city%\\n%country%',
                    'postprefix' => 'HT',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HU' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%CITY%\\n%STREET%\\n%COUNTRY%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ID' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'region_name_type' => 'county',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'direction' => 'rtl',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IQ' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY%, %REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nJERSEY\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'region_name_type' => 'parish',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JP' => array(
                    'format' => '〒%postal_code%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'prefecture',
                    'format_charset' => 'ISO-2022-JP',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'KE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KG' => array(
                    'format' => '%postal_code% %country% %city% %street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KI' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%REGION%\\n%CITY%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KR' => array(
                    'format' => '%country%\\n%region% %city%\\n%street%\\n%organization%\\n%name%\\nSEOUL %POSTAL_CODE%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\nSEOUL %POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'do_si',
                    'format_charset' => 'EUC-KR',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'KW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KZ' => array(
                    'format' => '%postal_code%\\n%country%\\n%region%\\n%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LB' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LI' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nFL-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'FL-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LT' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nLT-%postal_code% %city%\\n%country%',
                    'postprefix' => 'LT-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LU' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nL-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'L-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %country%, %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nMC-%postal_code% %city%\\n%country%',
                    'postprefix' => 'MC-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nMD-%postal_code% %city%\\n%country%',
                    'postprefix' => 'MD-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ME' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MH' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region% %city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MO' => array(
                    'format' => '%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%',
                    'require' => array(
                        0 => 'street',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MP' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MQ' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %POSTAL_CODE%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MU' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MX' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE% %CITY%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NC' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NF' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%CITY%, %REGION%\\n%COUNTRY%',
                    'region_name_type' => 'department',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NL' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NP' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'district',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'OM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PF' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code% %region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%-%postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PM' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PR' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% PR %postal_code%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'postprefix' => 'PR',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PW' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RE' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RO' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RU' => array(
                    'format' => '%postal_code% %COUNTRY% %CITY%\\n%STREET%\\n%organization%\\n%name%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SE' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nSE-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'SE-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nSINGAPORE %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nSI- %postal_code% %city%\\n%country%',
                    'postprefix' => 'SI-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SJ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SO' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%, %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SR' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%city% %REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ST' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%-%CITY%\\n%REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SZ' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%',
                    'format_charset' => 'TIS-620',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'TJ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%/%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TV' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TW' => array(
                    'format' => '%postal_code%\\n%country%\\n%region%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %region% %country% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'county',
                    'format_charset' => 'Big5',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'UA' => array(
                    'format' => '%postal_code% %country% %city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UM' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'US' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %REGION_CODE% %COUNTRY_ISO2% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%\\n%REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VG' => array(
                    'require' => array(
                        0 => 'street',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VI' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'WF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'YE' => array(
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'YT' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ZA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ZM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
            ),
            'oro_locale.locale_data' => array(
                'AD' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '376',
                    'default_locale' => 'ca',
                ),
                'AE' => array(
                    'currency_code' => 'AED',
                    'phone_prefix' => '971',
                    'default_locale' => 'ar_AE',
                ),
                'AF' => array(
                    'currency_code' => 'AFN',
                    'phone_prefix' => '93',
                    'default_locale' => 'fa_AF',
                ),
                'AG' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-268',
                    'default_locale' => 'en_AG',
                ),
                'AI' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-264',
                    'default_locale' => 'en',
                ),
                'AL' => array(
                    'currency_code' => 'ALL',
                    'phone_prefix' => '355',
                    'default_locale' => 'sq',
                ),
                'AM' => array(
                    'currency_code' => 'AMD',
                    'phone_prefix' => '374',
                    'default_locale' => 'hy',
                ),
                'AO' => array(
                    'currency_code' => 'AOA',
                    'phone_prefix' => '244',
                    'default_locale' => 'pt_AO',
                ),
                'AR' => array(
                    'currency_code' => 'ARS',
                    'phone_prefix' => '54',
                    'default_locale' => 'es_AR',
                ),
                'AS' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-684',
                    'default_locale' => 'en_AS',
                ),
                'AT' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '43',
                    'default_locale' => 'de_AT',
                ),
                'AU' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                    'default_locale' => 'en_AU',
                ),
                'AW' => array(
                    'currency_code' => 'AWG',
                    'phone_prefix' => '297',
                    'default_locale' => 'nl_AW',
                ),
                'AX' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '+358-18',
                    'default_locale' => 'sv_AX',
                ),
                'AZ' => array(
                    'currency_code' => 'AZN',
                    'phone_prefix' => '994',
                    'default_locale' => 'az',
                ),
                'BA' => array(
                    'currency_code' => 'BAM',
                    'phone_prefix' => '387',
                    'default_locale' => 'bs',
                ),
                'BB' => array(
                    'currency_code' => 'BBD',
                    'phone_prefix' => '+1-246',
                    'default_locale' => 'en_BB',
                ),
                'BD' => array(
                    'currency_code' => 'BDT',
                    'phone_prefix' => '880',
                    'default_locale' => 'bn_BD',
                ),
                'BE' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '32',
                    'default_locale' => 'nl_BE',
                ),
                'BF' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '226',
                    'default_locale' => 'fr_BF',
                ),
                'BG' => array(
                    'currency_code' => 'BGN',
                    'phone_prefix' => '359',
                    'default_locale' => 'bg',
                ),
                'BH' => array(
                    'currency_code' => 'BHD',
                    'phone_prefix' => '973',
                    'default_locale' => 'ar_BH',
                ),
                'BI' => array(
                    'currency_code' => 'BIF',
                    'phone_prefix' => '257',
                    'default_locale' => 'fr_BI',
                ),
                'BJ' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '229',
                    'default_locale' => 'fr_BJ',
                ),
                'BL' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                    'default_locale' => 'fr',
                ),
                'BM' => array(
                    'currency_code' => 'BMD',
                    'phone_prefix' => '+1-441',
                    'default_locale' => 'en_BM',
                ),
                'BN' => array(
                    'currency_code' => 'BND',
                    'phone_prefix' => '673',
                    'default_locale' => 'ms_BN',
                ),
                'BO' => array(
                    'currency_code' => 'BOB',
                    'phone_prefix' => '591',
                    'default_locale' => 'es_BO',
                ),
                'BQ' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '599',
                    'default_locale' => 'nl',
                ),
                'BR' => array(
                    'currency_code' => 'BRL',
                    'phone_prefix' => '55',
                    'default_locale' => 'pt_BR',
                ),
                'BS' => array(
                    'currency_code' => 'BSD',
                    'phone_prefix' => '+1-242',
                    'default_locale' => 'en_BS',
                ),
                'BT' => array(
                    'currency_code' => 'BTN',
                    'phone_prefix' => '975',
                    'default_locale' => 'dz',
                ),
                'BW' => array(
                    'currency_code' => 'BWP',
                    'phone_prefix' => '267',
                    'default_locale' => 'en_BW',
                ),
                'BY' => array(
                    'currency_code' => 'BYR',
                    'phone_prefix' => '375',
                    'default_locale' => 'be',
                ),
                'BZ' => array(
                    'currency_code' => 'BZD',
                    'phone_prefix' => '501',
                    'default_locale' => 'en_BZ',
                ),
                'CA' => array(
                    'currency_code' => 'CAD',
                    'phone_prefix' => '1',
                    'default_locale' => 'en_CA',
                ),
                'CC' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                    'default_locale' => 'ms',
                ),
                'CD' => array(
                    'currency_code' => 'CDF',
                    'phone_prefix' => '243',
                    'default_locale' => 'fr_CD',
                ),
                'CF' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '236',
                    'default_locale' => 'fr_CF',
                ),
                'CG' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '242',
                    'default_locale' => 'fr_CG',
                ),
                'CH' => array(
                    'currency_code' => 'CHF',
                    'phone_prefix' => '41',
                    'default_locale' => 'de_CH',
                ),
                'CI' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '225',
                    'default_locale' => 'fr_CI',
                ),
                'CK' => array(
                    'currency_code' => 'NZD',
                    'phone_prefix' => '682',
                    'default_locale' => 'en',
                ),
                'CL' => array(
                    'currency_code' => 'CLP',
                    'phone_prefix' => '56',
                    'default_locale' => 'es_CL',
                ),
                'CM' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '237',
                    'default_locale' => 'en_CM',
                ),
                'CN' => array(
                    'currency_code' => 'CNY',
                    'phone_prefix' => '86',
                    'default_locale' => 'zh_CN',
                ),
                'CO' => array(
                    'currency_code' => 'COP',
                    'phone_prefix' => '57',
                    'default_locale' => 'es_CO',
                ),
                'CR' => array(
                    'currency_code' => 'CRC',
                    'phone_prefix' => '506',
                    'default_locale' => 'es_CR',
                ),
                'CU' => array(
                    'currency_code' => 'CUP',
                    'phone_prefix' => '53',
                    'default_locale' => 'es_CU',
                ),
                'CV' => array(
                    'currency_code' => 'CVE',
                    'phone_prefix' => '238',
                    'default_locale' => 'pt_CV',
                ),
                'CW' => array(
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                    'default_locale' => 'nl',
                ),
                'CX' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                    'default_locale' => 'en',
                ),
                'CY' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '357',
                    'default_locale' => 'el_CY',
                ),
                'CZ' => array(
                    'currency_code' => 'CZK',
                    'phone_prefix' => '420',
                    'default_locale' => 'cs',
                ),
                'DE' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '49',
                    'default_locale' => 'de',
                ),
                'DJ' => array(
                    'currency_code' => 'DJF',
                    'phone_prefix' => '253',
                    'default_locale' => 'fr_DJ',
                ),
                'DK' => array(
                    'currency_code' => 'DKK',
                    'phone_prefix' => '45',
                    'default_locale' => 'da_DK',
                ),
                'DM' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-767',
                    'default_locale' => 'en_DM',
                ),
                'DO' => array(
                    'currency_code' => 'DOP',
                    'phone_prefix' => '+1-809',
                    'default_locale' => 'es_DO',
                ),
                'DZ' => array(
                    'currency_code' => 'DZD',
                    'phone_prefix' => '213',
                    'default_locale' => 'ar_DZ',
                ),
                'EC' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '593',
                    'default_locale' => 'es_EC',
                ),
                'EE' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '372',
                    'default_locale' => 'et',
                ),
                'EG' => array(
                    'currency_code' => 'EGP',
                    'phone_prefix' => '20',
                    'default_locale' => 'ar_EG',
                ),
                'EH' => array(
                    'currency_code' => 'MAD',
                    'phone_prefix' => '212',
                    'default_locale' => 'ar',
                ),
                'ER' => array(
                    'currency_code' => 'ERN',
                    'phone_prefix' => '291',
                    'default_locale' => 'ti_ER',
                ),
                'ES' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '34',
                    'default_locale' => 'es_ES',
                ),
                'ET' => array(
                    'currency_code' => 'ETB',
                    'phone_prefix' => '251',
                    'default_locale' => 'am',
                ),
                'FI' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '358',
                    'default_locale' => 'fi_FI',
                ),
                'FJ' => array(
                    'currency_code' => 'FJD',
                    'phone_prefix' => '679',
                    'default_locale' => 'en_FJ',
                ),
                'FK' => array(
                    'currency_code' => 'FKP',
                    'phone_prefix' => '500',
                    'default_locale' => 'en',
                ),
                'FM' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '691',
                    'default_locale' => 'en_FM',
                ),
                'FO' => array(
                    'currency_code' => 'DKK',
                    'phone_prefix' => '298',
                    'default_locale' => 'fo',
                ),
                'FR' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '33',
                    'default_locale' => 'fr_FR',
                ),
                'GA' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '241',
                    'default_locale' => 'fr_GA',
                ),
                'GB' => array(
                    'currency_code' => 'GBP',
                    'phone_prefix' => '44',
                    'default_locale' => 'en_GB',
                ),
                'GD' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-473',
                    'default_locale' => 'en_GD',
                ),
                'GE' => array(
                    'currency_code' => 'GEL',
                    'phone_prefix' => '995',
                    'default_locale' => 'ka',
                ),
                'GF' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '594',
                    'default_locale' => 'fr_GF',
                ),
                'GG' => array(
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1481',
                    'default_locale' => 'en',
                ),
                'GH' => array(
                    'currency_code' => 'GHS',
                    'phone_prefix' => '233',
                    'default_locale' => 'en_GH',
                ),
                'GI' => array(
                    'currency_code' => 'GIP',
                    'phone_prefix' => '350',
                    'default_locale' => 'en_GI',
                ),
                'GL' => array(
                    'currency_code' => 'DKK',
                    'phone_prefix' => '299',
                    'default_locale' => 'kl',
                ),
                'GM' => array(
                    'currency_code' => 'GMD',
                    'phone_prefix' => '220',
                    'default_locale' => 'en_GM',
                ),
                'GN' => array(
                    'currency_code' => 'GNF',
                    'phone_prefix' => '224',
                    'default_locale' => 'fr_GN',
                ),
                'GP' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                    'default_locale' => 'fr_GP',
                ),
                'GQ' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '240',
                    'default_locale' => 'es_GQ',
                ),
                'GR' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '30',
                    'default_locale' => 'el_GR',
                ),
                'GS' => array(
                    'currency_code' => 'GBP',
                    'default_locale' => 'en',
                ),
                'GT' => array(
                    'currency_code' => 'GTQ',
                    'phone_prefix' => '502',
                    'default_locale' => 'es_GT',
                ),
                'GU' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-671',
                    'default_locale' => 'en_GU',
                ),
                'GW' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '245',
                    'default_locale' => 'pt_GW',
                ),
                'GY' => array(
                    'currency_code' => 'GYD',
                    'phone_prefix' => '592',
                    'default_locale' => 'en_GY',
                ),
                'HK' => array(
                    'currency_code' => 'HKD',
                    'phone_prefix' => '852',
                    'default_locale' => 'zh_HK',
                ),
                'HN' => array(
                    'currency_code' => 'HNL',
                    'phone_prefix' => '504',
                    'default_locale' => 'es_HN',
                ),
                'HR' => array(
                    'currency_code' => 'HRK',
                    'phone_prefix' => '385',
                    'default_locale' => 'hr_HR',
                ),
                'HT' => array(
                    'currency_code' => 'HTG',
                    'phone_prefix' => '509',
                    'default_locale' => 'fr',
                ),
                'HU' => array(
                    'currency_code' => 'HUF',
                    'phone_prefix' => '36',
                    'default_locale' => 'hu_HU',
                ),
                'ID' => array(
                    'currency_code' => 'IDR',
                    'phone_prefix' => '62',
                    'default_locale' => 'id',
                ),
                'IE' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '353',
                    'default_locale' => 'en_IE',
                ),
                'IL' => array(
                    'currency_code' => 'ILS',
                    'phone_prefix' => '972',
                    'default_locale' => 'he',
                ),
                'IM' => array(
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1624',
                    'default_locale' => 'en',
                ),
                'IN' => array(
                    'currency_code' => 'INR',
                    'phone_prefix' => '91',
                    'default_locale' => 'en_IN',
                ),
                'IO' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '246',
                    'default_locale' => 'en',
                ),
                'IQ' => array(
                    'currency_code' => 'IQD',
                    'phone_prefix' => '964',
                    'default_locale' => 'ar_IQ',
                ),
                'IR' => array(
                    'currency_code' => 'IRR',
                    'phone_prefix' => '98',
                    'default_locale' => 'fa_IR',
                ),
                'IS' => array(
                    'currency_code' => 'ISK',
                    'phone_prefix' => '354',
                    'default_locale' => 'is',
                ),
                'IT' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '39',
                    'default_locale' => 'it_IT',
                ),
                'JE' => array(
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1534',
                    'default_locale' => 'en',
                ),
                'JM' => array(
                    'currency_code' => 'JMD',
                    'phone_prefix' => '+1-876',
                    'default_locale' => 'en_JM',
                ),
                'JO' => array(
                    'currency_code' => 'JOD',
                    'phone_prefix' => '962',
                    'default_locale' => 'ar_JO',
                ),
                'JP' => array(
                    'currency_code' => 'JPY',
                    'phone_prefix' => '81',
                    'default_locale' => 'ja',
                ),
                'KE' => array(
                    'currency_code' => 'KES',
                    'phone_prefix' => '254',
                    'default_locale' => 'en_KE',
                ),
                'KG' => array(
                    'currency_code' => 'KGS',
                    'phone_prefix' => '996',
                    'default_locale' => 'ru',
                ),
                'KH' => array(
                    'currency_code' => 'KHR',
                    'phone_prefix' => '855',
                    'default_locale' => 'km',
                ),
                'KI' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '686',
                    'default_locale' => 'en_KI',
                ),
                'KM' => array(
                    'currency_code' => 'KMF',
                    'phone_prefix' => '269',
                    'default_locale' => 'ar',
                ),
                'KN' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-869',
                    'default_locale' => 'en_KN',
                ),
                'KP' => array(
                    'currency_code' => 'KPW',
                    'phone_prefix' => '850',
                    'default_locale' => 'ko_KP',
                ),
                'KR' => array(
                    'currency_code' => 'KRW',
                    'phone_prefix' => '82',
                    'default_locale' => 'ko_KR',
                ),
                'XK' => array(
                    'currency_code' => 'EUR',
                    'default_locale' => 'sq',
                ),
                'KW' => array(
                    'currency_code' => 'KWD',
                    'phone_prefix' => '965',
                    'default_locale' => 'ar_KW',
                ),
                'KY' => array(
                    'currency_code' => 'KYD',
                    'phone_prefix' => '+1-345',
                    'default_locale' => 'en_KY',
                ),
                'KZ' => array(
                    'currency_code' => 'KZT',
                    'phone_prefix' => '7',
                    'default_locale' => 'kk',
                ),
                'LA' => array(
                    'currency_code' => 'LAK',
                    'phone_prefix' => '856',
                    'default_locale' => 'lo',
                ),
                'LB' => array(
                    'currency_code' => 'LBP',
                    'phone_prefix' => '961',
                    'default_locale' => 'ar_LB',
                ),
                'LC' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-758',
                    'default_locale' => 'en_LC',
                ),
                'LI' => array(
                    'currency_code' => 'CHF',
                    'phone_prefix' => '423',
                    'default_locale' => 'de_LI',
                ),
                'LK' => array(
                    'currency_code' => 'LKR',
                    'phone_prefix' => '94',
                    'default_locale' => 'si',
                ),
                'LR' => array(
                    'currency_code' => 'LRD',
                    'phone_prefix' => '231',
                    'default_locale' => 'en_LR',
                ),
                'LS' => array(
                    'currency_code' => 'LSL',
                    'phone_prefix' => '266',
                    'default_locale' => 'en_LS',
                ),
                'LT' => array(
                    'currency_code' => 'LTL',
                    'phone_prefix' => '370',
                    'default_locale' => 'lt',
                ),
                'LU' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '352',
                    'default_locale' => 'fr',
                ),
                'LV' => array(
                    'currency_code' => 'LVL',
                    'phone_prefix' => '371',
                    'default_locale' => 'lv',
                ),
                'LY' => array(
                    'currency_code' => 'LYD',
                    'phone_prefix' => '218',
                    'default_locale' => 'ar_LY',
                ),
                'MA' => array(
                    'currency_code' => 'MAD',
                    'phone_prefix' => '212',
                    'default_locale' => 'ar_MA',
                ),
                'MC' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '377',
                    'default_locale' => 'fr_MC',
                ),
                'MD' => array(
                    'currency_code' => 'MDL',
                    'phone_prefix' => '373',
                    'default_locale' => 'ro',
                ),
                'ME' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '382',
                    'default_locale' => 'sr',
                ),
                'MF' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                    'default_locale' => 'fr',
                ),
                'MG' => array(
                    'currency_code' => 'MGA',
                    'phone_prefix' => '261',
                    'default_locale' => 'fr_MG',
                ),
                'MH' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '692',
                    'default_locale' => 'en',
                ),
                'MK' => array(
                    'currency_code' => 'MKD',
                    'phone_prefix' => '389',
                    'default_locale' => 'mk',
                ),
                'ML' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '223',
                    'default_locale' => 'fr_ML',
                ),
                'MM' => array(
                    'currency_code' => 'MMK',
                    'phone_prefix' => '95',
                    'default_locale' => 'my',
                ),
                'MN' => array(
                    'currency_code' => 'MNT',
                    'phone_prefix' => '976',
                    'default_locale' => 'mn',
                ),
                'MO' => array(
                    'currency_code' => 'MOP',
                    'phone_prefix' => '853',
                    'default_locale' => 'zh',
                ),
                'MP' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-670',
                    'default_locale' => 'fil',
                ),
                'MQ' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '596',
                    'default_locale' => 'fr_MQ',
                ),
                'MR' => array(
                    'currency_code' => 'MRO',
                    'phone_prefix' => '222',
                    'default_locale' => 'ar_MR',
                ),
                'MS' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-664',
                    'default_locale' => 'en',
                ),
                'MT' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '356',
                    'default_locale' => 'mt',
                ),
                'MU' => array(
                    'currency_code' => 'MUR',
                    'phone_prefix' => '230',
                    'default_locale' => 'en_MU',
                ),
                'MV' => array(
                    'currency_code' => 'MVR',
                    'phone_prefix' => '960',
                    'default_locale' => 'en',
                ),
                'MW' => array(
                    'currency_code' => 'MWK',
                    'phone_prefix' => '265',
                    'default_locale' => 'en',
                ),
                'MX' => array(
                    'currency_code' => 'MXN',
                    'phone_prefix' => '52',
                    'default_locale' => 'es_MX',
                ),
                'MY' => array(
                    'currency_code' => 'MYR',
                    'phone_prefix' => '60',
                    'default_locale' => 'ms_MY',
                ),
                'MZ' => array(
                    'currency_code' => 'MZN',
                    'phone_prefix' => '258',
                    'default_locale' => 'pt_MZ',
                ),
                'NA' => array(
                    'currency_code' => 'NAD',
                    'phone_prefix' => '264',
                    'default_locale' => 'en_NA',
                ),
                'NC' => array(
                    'currency_code' => 'XPF',
                    'phone_prefix' => '687',
                    'default_locale' => 'fr_NC',
                ),
                'NE' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '227',
                    'default_locale' => 'fr_NE',
                ),
                'NF' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '672',
                    'default_locale' => 'en',
                ),
                'NG' => array(
                    'currency_code' => 'NGN',
                    'phone_prefix' => '234',
                    'default_locale' => 'en_NG',
                ),
                'NI' => array(
                    'currency_code' => 'NIO',
                    'phone_prefix' => '505',
                    'default_locale' => 'es_NI',
                ),
                'NL' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '31',
                    'default_locale' => 'nl_NL',
                ),
                'NO' => array(
                    'currency_code' => 'NOK',
                    'phone_prefix' => '47',
                    'default_locale' => 'no',
                ),
                'NP' => array(
                    'currency_code' => 'NPR',
                    'phone_prefix' => '977',
                    'default_locale' => 'ne',
                ),
                'NR' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '674',
                    'default_locale' => 'en',
                ),
                'NU' => array(
                    'currency_code' => 'NZD',
                    'phone_prefix' => '683',
                    'default_locale' => 'en',
                ),
                'NZ' => array(
                    'currency_code' => 'NZD',
                    'phone_prefix' => '64',
                    'default_locale' => 'en_NZ',
                ),
                'OM' => array(
                    'currency_code' => 'OMR',
                    'phone_prefix' => '968',
                    'default_locale' => 'ar_OM',
                ),
                'PA' => array(
                    'currency_code' => 'PAB',
                    'phone_prefix' => '507',
                    'default_locale' => 'es_PA',
                ),
                'PE' => array(
                    'currency_code' => 'PEN',
                    'phone_prefix' => '51',
                    'default_locale' => 'es_PE',
                ),
                'PF' => array(
                    'currency_code' => 'XPF',
                    'phone_prefix' => '689',
                    'default_locale' => 'fr_PF',
                ),
                'PG' => array(
                    'currency_code' => 'PGK',
                    'phone_prefix' => '675',
                    'default_locale' => 'en_PG',
                ),
                'PH' => array(
                    'currency_code' => 'PHP',
                    'phone_prefix' => '63',
                    'default_locale' => 'tl',
                ),
                'PK' => array(
                    'currency_code' => 'PKR',
                    'phone_prefix' => '92',
                    'default_locale' => 'ur_PK',
                ),
                'PL' => array(
                    'currency_code' => 'PLN',
                    'phone_prefix' => '48',
                    'default_locale' => 'pl',
                ),
                'PM' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '508',
                    'default_locale' => 'fr',
                ),
                'PN' => array(
                    'currency_code' => 'NZD',
                    'phone_prefix' => '870',
                    'default_locale' => 'en',
                ),
                'PR' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-787',
                    'default_locale' => 'en_PR',
                ),
                'PS' => array(
                    'currency_code' => 'ILS',
                    'phone_prefix' => '970',
                    'default_locale' => 'ar_PS',
                ),
                'PT' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '351',
                    'default_locale' => 'pt_PT',
                ),
                'PW' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '680',
                    'default_locale' => 'en',
                ),
                'PY' => array(
                    'currency_code' => 'PYG',
                    'phone_prefix' => '595',
                    'default_locale' => 'es_PY',
                ),
                'QA' => array(
                    'currency_code' => 'QAR',
                    'phone_prefix' => '974',
                    'default_locale' => 'ar_QA',
                ),
                'RE' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '262',
                    'default_locale' => 'fr_RE',
                ),
                'RO' => array(
                    'currency_code' => 'RON',
                    'phone_prefix' => '40',
                    'default_locale' => 'ro',
                ),
                'RS' => array(
                    'currency_code' => 'RSD',
                    'phone_prefix' => '381',
                    'default_locale' => 'sr',
                ),
                'RU' => array(
                    'currency_code' => 'RUB',
                    'phone_prefix' => '7',
                    'default_locale' => 'ru',
                ),
                'RW' => array(
                    'currency_code' => 'RWF',
                    'phone_prefix' => '250',
                    'default_locale' => 'rw',
                ),
                'SA' => array(
                    'currency_code' => 'SAR',
                    'phone_prefix' => '966',
                    'default_locale' => 'ar_SA',
                ),
                'SB' => array(
                    'currency_code' => 'SBD',
                    'phone_prefix' => '677',
                    'default_locale' => 'en_SB',
                ),
                'SC' => array(
                    'currency_code' => 'SCR',
                    'phone_prefix' => '248',
                    'default_locale' => 'en_SC',
                ),
                'SD' => array(
                    'currency_code' => 'SDG',
                    'phone_prefix' => '249',
                    'default_locale' => 'ar_SD',
                ),
                'SS' => array(
                    'currency_code' => 'SSP',
                    'phone_prefix' => '211',
                    'default_locale' => 'en',
                ),
                'SE' => array(
                    'currency_code' => 'SEK',
                    'phone_prefix' => '46',
                    'default_locale' => 'sv_SE',
                ),
                'SG' => array(
                    'currency_code' => 'SGD',
                    'phone_prefix' => '65',
                    'default_locale' => 'en',
                ),
                'SH' => array(
                    'currency_code' => 'SHP',
                    'phone_prefix' => '290',
                    'default_locale' => 'en',
                ),
                'SI' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '386',
                    'default_locale' => 'sl',
                ),
                'SJ' => array(
                    'currency_code' => 'NOK',
                    'phone_prefix' => '47',
                    'default_locale' => 'no',
                ),
                'SK' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '421',
                    'default_locale' => 'sk',
                ),
                'SL' => array(
                    'currency_code' => 'SLL',
                    'phone_prefix' => '232',
                    'default_locale' => 'en_SL',
                ),
                'SM' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '378',
                    'default_locale' => 'it_SM',
                ),
                'SN' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '221',
                    'default_locale' => 'fr_SN',
                ),
                'SO' => array(
                    'currency_code' => 'SOS',
                    'phone_prefix' => '252',
                    'default_locale' => 'so_SO',
                ),
                'SR' => array(
                    'currency_code' => 'SRD',
                    'phone_prefix' => '597',
                    'default_locale' => 'nl_SR',
                ),
                'ST' => array(
                    'currency_code' => 'STD',
                    'phone_prefix' => '239',
                    'default_locale' => 'pt_ST',
                ),
                'SV' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '503',
                    'default_locale' => 'es_SV',
                ),
                'SX' => array(
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                    'default_locale' => 'nl',
                ),
                'SY' => array(
                    'currency_code' => 'SYP',
                    'phone_prefix' => '963',
                    'default_locale' => 'ar_SY',
                ),
                'SZ' => array(
                    'currency_code' => 'SZL',
                    'phone_prefix' => '268',
                    'default_locale' => 'en_SZ',
                ),
                'TC' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-649',
                    'default_locale' => 'en_TC',
                ),
                'TD' => array(
                    'currency_code' => 'XAF',
                    'phone_prefix' => '235',
                    'default_locale' => 'fr_TD',
                ),
                'TF' => array(
                    'currency_code' => 'EUR',
                    'default_locale' => 'fr',
                ),
                'TG' => array(
                    'currency_code' => 'XOF',
                    'phone_prefix' => '228',
                    'default_locale' => 'fr_TG',
                ),
                'TH' => array(
                    'currency_code' => 'THB',
                    'phone_prefix' => '66',
                    'default_locale' => 'th',
                ),
                'TJ' => array(
                    'currency_code' => 'TJS',
                    'phone_prefix' => '992',
                    'default_locale' => 'fr',
                ),
                'TK' => array(
                    'currency_code' => 'NZD',
                    'phone_prefix' => '690',
                    'default_locale' => 'en',
                ),
                'TL' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '670',
                    'default_locale' => 'pt',
                ),
                'TM' => array(
                    'currency_code' => 'TMT',
                    'phone_prefix' => '993',
                    'default_locale' => 'ru',
                ),
                'TN' => array(
                    'currency_code' => 'TND',
                    'phone_prefix' => '216',
                    'default_locale' => 'ar_TN',
                ),
                'TO' => array(
                    'currency_code' => 'TOP',
                    'phone_prefix' => '676',
                    'default_locale' => 'to',
                ),
                'TR' => array(
                    'currency_code' => 'TRY',
                    'phone_prefix' => '90',
                    'default_locale' => 'tr_TR',
                ),
                'TT' => array(
                    'currency_code' => 'TTD',
                    'phone_prefix' => '+1-868',
                    'default_locale' => 'en_TT',
                ),
                'TV' => array(
                    'currency_code' => 'AUD',
                    'phone_prefix' => '688',
                    'default_locale' => 'en',
                ),
                'TW' => array(
                    'currency_code' => 'TWD',
                    'phone_prefix' => '886',
                    'default_locale' => 'zh_TW',
                ),
                'TZ' => array(
                    'currency_code' => 'TZS',
                    'phone_prefix' => '255',
                    'default_locale' => 'sw_TZ',
                ),
                'UA' => array(
                    'currency_code' => 'UAH',
                    'phone_prefix' => '380',
                    'default_locale' => 'uk',
                ),
                'UG' => array(
                    'currency_code' => 'UGX',
                    'phone_prefix' => '256',
                    'default_locale' => 'en_UG',
                ),
                'UM' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '1',
                    'default_locale' => 'en_UM',
                ),
                'US' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '1',
                    'default_locale' => 'en_US',
                ),
                'UY' => array(
                    'currency_code' => 'UYU',
                    'phone_prefix' => '598',
                    'default_locale' => 'es_UY',
                ),
                'UZ' => array(
                    'currency_code' => 'UZS',
                    'phone_prefix' => '998',
                    'default_locale' => 'uz',
                ),
                'VA' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '379',
                    'default_locale' => 'it',
                ),
                'VC' => array(
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-784',
                    'default_locale' => 'en_VC',
                ),
                'VE' => array(
                    'currency_code' => 'VEF',
                    'phone_prefix' => '58',
                    'default_locale' => 'es_VE',
                ),
                'VG' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-284',
                    'default_locale' => 'en_VG',
                ),
                'VI' => array(
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-340',
                    'default_locale' => 'en_VI',
                ),
                'VN' => array(
                    'currency_code' => 'VND',
                    'phone_prefix' => '84',
                    'default_locale' => 'vi',
                ),
                'VU' => array(
                    'currency_code' => 'VUV',
                    'phone_prefix' => '678',
                    'default_locale' => 'fr',
                ),
                'WF' => array(
                    'currency_code' => 'XPF',
                    'phone_prefix' => '681',
                    'default_locale' => 'fr',
                ),
                'WS' => array(
                    'currency_code' => 'WST',
                    'phone_prefix' => '685',
                    'default_locale' => 'en',
                ),
                'YE' => array(
                    'currency_code' => 'YER',
                    'phone_prefix' => '967',
                    'default_locale' => 'ar_YE',
                ),
                'YT' => array(
                    'currency_code' => 'EUR',
                    'phone_prefix' => '262',
                    'default_locale' => 'fr_YT',
                ),
                'ZA' => array(
                    'currency_code' => 'ZAR',
                    'phone_prefix' => '27',
                    'default_locale' => 'zu',
                ),
                'ZM' => array(
                    'currency_code' => 'ZMK',
                    'phone_prefix' => '260',
                    'default_locale' => 'en_ZM',
                ),
                'ZW' => array(
                    'currency_code' => 'ZWL',
                    'phone_prefix' => '263',
                    'default_locale' => 'en_ZW',
                ),
                'CS' => array(
                    'currency_code' => 'RSD',
                    'phone_prefix' => '381',
                    'default_locale' => 'sr',
                ),
                'AN' => array(
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                    'default_locale' => 'nl',
                ),
            ),
            'oro_locale.currency_data' => array(
                'AED' => array(
                    'symbol' => 'د.إ.‏',
                ),
                'AFN' => array(
                    'symbol' => '؋',
                ),
                'ALL' => array(
                    'symbol' => 'Lek',
                ),
                'AMD' => array(
                    'symbol' => 'դր.',
                ),
                'ANG' => array(
                    'symbol' => 'ANG',
                ),
                'AOA' => array(
                    'symbol' => 'Kz',
                ),
                'ARS' => array(
                    'symbol' => '$',
                ),
                'AUD' => array(
                    'symbol' => 'AU$',
                ),
                'AWG' => array(
                    'symbol' => 'Afl.',
                ),
                'AZN' => array(
                    'symbol' => 'man.',
                ),
                'BAM' => array(
                    'symbol' => 'KM',
                ),
                'BBD' => array(
                    'symbol' => '$',
                ),
                'BDT' => array(
                    'symbol' => '৳',
                ),
                'BGN' => array(
                    'symbol' => 'лв.',
                ),
                'BHD' => array(
                    'symbol' => 'د.ب.‏',
                ),
                'BIF' => array(
                    'symbol' => 'FBu',
                ),
                'BMD' => array(
                    'symbol' => '$',
                ),
                'BND' => array(
                    'symbol' => '$',
                ),
                'BOB' => array(
                    'symbol' => 'Bs',
                ),
                'BRL' => array(
                    'symbol' => 'R$',
                ),
                'BSD' => array(
                    'symbol' => 'BSD',
                ),
                'BTN' => array(
                    'symbol' => 'BTN',
                ),
                'BWP' => array(
                    'symbol' => 'P',
                ),
                'BYR' => array(
                    'symbol' => 'BYR',
                ),
                'BZD' => array(
                    'symbol' => '$',
                ),
                'CAD' => array(
                    'symbol' => '$',
                ),
                'CDF' => array(
                    'symbol' => 'FrCD',
                ),
                'CHF' => array(
                    'symbol' => 'CHF',
                ),
                'CLP' => array(
                    'symbol' => '$',
                ),
                'CNY' => array(
                    'symbol' => '￥',
                ),
                'COP' => array(
                    'symbol' => '$',
                ),
                'CRC' => array(
                    'symbol' => '₡',
                ),
                'CUP' => array(
                    'symbol' => 'CUP',
                ),
                'CVE' => array(
                    'symbol' => 'CVE',
                ),
                'CZK' => array(
                    'symbol' => 'Kč',
                ),
                'DJF' => array(
                    'symbol' => 'Fdj',
                ),
                'DKK' => array(
                    'symbol' => 'kr',
                ),
                'DOP' => array(
                    'symbol' => '$',
                ),
                'DZD' => array(
                    'symbol' => 'د.ج.‏',
                ),
                'EGP' => array(
                    'symbol' => 'ج.م.‏',
                ),
                'ERN' => array(
                    'symbol' => 'Nfk',
                ),
                'ETB' => array(
                    'symbol' => 'ብር',
                ),
                'EUR' => array(
                    'symbol' => '€',
                ),
                'FJD' => array(
                    'symbol' => 'FJD',
                ),
                'FKP' => array(
                    'symbol' => 'FKP',
                ),
                'GBP' => array(
                    'symbol' => '£',
                ),
                'GEL' => array(
                    'symbol' => 'GEL',
                ),
                'GHS' => array(
                    'symbol' => 'GHS',
                ),
                'GIP' => array(
                    'symbol' => 'GIP',
                ),
                'GMD' => array(
                    'symbol' => 'GMD',
                ),
                'GNF' => array(
                    'symbol' => 'FG',
                ),
                'GTQ' => array(
                    'symbol' => 'Q',
                ),
                'GYD' => array(
                    'symbol' => 'GYD',
                ),
                'HKD' => array(
                    'symbol' => '$',
                ),
                'HNL' => array(
                    'symbol' => 'L',
                ),
                'HRK' => array(
                    'symbol' => 'kn',
                ),
                'HTG' => array(
                    'symbol' => 'HTG',
                ),
                'HUF' => array(
                    'symbol' => 'Ft',
                ),
                'IDR' => array(
                    'symbol' => 'Rp',
                ),
                'ILS' => array(
                    'symbol' => '₪',
                ),
                'INR' => array(
                    'symbol' => '₹',
                ),
                'IQD' => array(
                    'symbol' => 'د.ع.‏',
                ),
                'IRR' => array(
                    'symbol' => '﷼',
                ),
                'ISK' => array(
                    'symbol' => 'kr',
                ),
                'JMD' => array(
                    'symbol' => '$',
                ),
                'JOD' => array(
                    'symbol' => 'د.أ.‏',
                ),
                'JPY' => array(
                    'symbol' => '￥',
                ),
                'KES' => array(
                    'symbol' => 'KES',
                ),
                'KGS' => array(
                    'symbol' => 'KGS',
                ),
                'KHR' => array(
                    'symbol' => '៛',
                ),
                'KMF' => array(
                    'symbol' => 'ف.ج.ق.‏',
                ),
                'KPW' => array(
                    'symbol' => 'KPW',
                ),
                'KRW' => array(
                    'symbol' => '₩',
                ),
                'KWD' => array(
                    'symbol' => 'د.ك.‏',
                ),
                'KYD' => array(
                    'symbol' => 'KYD',
                ),
                'KZT' => array(
                    'symbol' => 'тңг.',
                ),
                'LAK' => array(
                    'symbol' => 'LAK',
                ),
                'LBP' => array(
                    'symbol' => 'ل.ل.‏',
                ),
                'LKR' => array(
                    'symbol' => 'රු.',
                ),
                'LRD' => array(
                    'symbol' => 'LRD',
                ),
                'LSL' => array(
                    'symbol' => 'LSL',
                ),
                'LTL' => array(
                    'symbol' => 'Lt',
                ),
                'LVL' => array(
                    'symbol' => 'Ls',
                ),
                'LYD' => array(
                    'symbol' => 'د.ل.‏',
                ),
                'MAD' => array(
                    'symbol' => 'د.م.‏',
                ),
                'MDL' => array(
                    'symbol' => 'MDL',
                ),
                'MGA' => array(
                    'symbol' => 'MGA',
                ),
                'MKD' => array(
                    'symbol' => 'MKD',
                ),
                'MMK' => array(
                    'symbol' => 'K',
                ),
                'MNT' => array(
                    'symbol' => 'MNT',
                ),
                'MOP' => array(
                    'symbol' => 'MOP',
                ),
                'MRO' => array(
                    'symbol' => 'أ.م.‏',
                ),
                'MUR' => array(
                    'symbol' => 'MUR',
                ),
                'MVR' => array(
                    'symbol' => 'Rf.',
                ),
                'MWK' => array(
                    'symbol' => 'MWK',
                ),
                'MXN' => array(
                    'symbol' => '$',
                ),
                'MYR' => array(
                    'symbol' => 'RM',
                ),
                'MZN' => array(
                    'symbol' => 'MTn',
                ),
                'NAD' => array(
                    'symbol' => '$',
                ),
                'NGN' => array(
                    'symbol' => 'NGN',
                ),
                'NIO' => array(
                    'symbol' => 'C$',
                ),
                'NOK' => array(
                    'symbol' => 'kr',
                ),
                'NPR' => array(
                    'symbol' => 'नेरू ',
                ),
                'NZD' => array(
                    'symbol' => 'NZ$',
                ),
                'OMR' => array(
                    'symbol' => 'ر.ع.‏',
                ),
                'PAB' => array(
                    'symbol' => 'B/.',
                ),
                'PEN' => array(
                    'symbol' => 'S/.',
                ),
                'PGK' => array(
                    'symbol' => 'PGK',
                ),
                'PHP' => array(
                    'symbol' => '₱',
                ),
                'PKR' => array(
                    'symbol' => 'PKRs',
                ),
                'PLN' => array(
                    'symbol' => 'zł',
                ),
                'PYG' => array(
                    'symbol' => '₲',
                ),
                'QAR' => array(
                    'symbol' => 'ر.ق.‏',
                ),
                'RON' => array(
                    'symbol' => 'RON',
                ),
                'RSD' => array(
                    'symbol' => 'дин.',
                ),
                'RUB' => array(
                    'symbol' => 'руб.',
                ),
                'RWF' => array(
                    'symbol' => 'RF',
                ),
                'SAR' => array(
                    'symbol' => 'ر.س.‏',
                ),
                'SBD' => array(
                    'symbol' => 'SBD',
                ),
                'SCR' => array(
                    'symbol' => 'SCR',
                ),
                'SDG' => array(
                    'symbol' => 'SDG',
                ),
                'SEK' => array(
                    'symbol' => 'kr',
                ),
                'SGD' => array(
                    'symbol' => 'SGD',
                ),
                'SHP' => array(
                    'symbol' => 'SHP',
                ),
                'SLL' => array(
                    'symbol' => 'SLL',
                ),
                'SOS' => array(
                    'symbol' => 'SOS',
                ),
                'SRD' => array(
                    'symbol' => 'SRD',
                ),
                'SSP' => array(
                    'symbol' => 'SSP',
                ),
                'STD' => array(
                    'symbol' => 'Db',
                ),
                'SYP' => array(
                    'symbol' => 'ل.س.‏',
                ),
                'SZL' => array(
                    'symbol' => 'SZL',
                ),
                'THB' => array(
                    'symbol' => '฿',
                ),
                'TJS' => array(
                    'symbol' => 'TJS',
                ),
                'TMT' => array(
                    'symbol' => 'TMT',
                ),
                'TND' => array(
                    'symbol' => 'د.ت.‏',
                ),
                'TOP' => array(
                    'symbol' => 'T$',
                ),
                'TRY' => array(
                    'symbol' => 'TL',
                ),
                'TTD' => array(
                    'symbol' => '$',
                ),
                'TWD' => array(
                    'symbol' => 'NT$',
                ),
                'TZS' => array(
                    'symbol' => 'TSh',
                ),
                'UAH' => array(
                    'symbol' => '₴',
                ),
                'UGX' => array(
                    'symbol' => 'UGX',
                ),
                'USD' => array(
                    'symbol' => '$',
                ),
                'UYU' => array(
                    'symbol' => '$',
                ),
                'UZS' => array(
                    'symbol' => 'UZS',
                ),
                'VEF' => array(
                    'symbol' => 'Bs.F.',
                ),
                'VND' => array(
                    'symbol' => '₫',
                ),
                'VUV' => array(
                    'symbol' => 'VUV',
                ),
                'WST' => array(
                    'symbol' => 'WST',
                ),
                'XAF' => array(
                    'symbol' => 'FCFA',
                ),
                'XCD' => array(
                    'symbol' => 'EC$',
                ),
                'XOF' => array(
                    'symbol' => 'CFA',
                ),
                'XPF' => array(
                    'symbol' => 'FCFP',
                ),
                'YER' => array(
                    'symbol' => 'ر.ي.‏',
                ),
                'ZAR' => array(
                    'symbol' => 'R',
                ),
                'ZMK' => array(
                    'symbol' => 'ZMK',
                ),
                'ZWL' => array(
                    'symbol' => 'ZWL',
                ),
            ),
            'oro_locale.settings.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\LocaleSettings',
            'oro_locale.calendar.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\Calendar',
            'oro_locale.calendar_factory.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\CalendarFactory',
            'oro_locale.form.type.name_format.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\NameFormatType',
            'oro_locale.format_converter.date_time.registry.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\DateTimeFormatConverterRegistry',
            'oro_locale.format_converter.date_time.intl.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\IntlDateTimeFormatConverter',
            'oro_locale.format_converter.date_time.moment.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\MomentDateTimeFormatConverter',
            'oro_locale.formatter.name.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\NameFormatter',
            'oro_locale.formatter.address.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\AddressFormatter',
            'oro_locale.formatter.date_time.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\DateTimeFormatter',
            'oro_locale.formatter.number.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\NumberFormatter',
            'oro_locale.form.type.country.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\CountryType',
            'oro_locale.form.type.currency.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\CurrencyType',
            'oro_locale.form.type.locale.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\LocaleType',
            'oro_locale.form.type.timezone.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\TimezoneType',
            'oro_locale.locale_listener.class' => 'Oro\\Bundle\\LocaleBundle\\EventListener\\LocaleListener',
            'oro_locale.twig.date_format.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\DateFormatExtension',
            'oro_locale.twig.locale.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\LocaleExtension',
            'oro_locale.twig.calendar.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\CalendarExtension',
            'oro_locale.twig.date_time.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\DateTimeExtension',
            'oro_locale.twig.name.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\NameExtension',
            'oro_locale.twig.address.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\AddressExtension',
            'oro_locale.twig.number.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\NumberExtension',
            'oro_menu.factory.acl_extension.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\AclAwareMenuFactoryExtension',
            'oro_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'oro_menu.builder_chain.class' => 'Oro\\Bundle\\NavigationBundle\\Provider\\BuilderChainProvider',
            'oro_menu.configuration_builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\ConfigurationBuilder',
            'oro_menu.twig.extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\MenuExtension',
            'oro_navigation.navigation_item_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationItemBuilder',
            'oro_navigation.navigation_history_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationHistoryBuilder',
            'oro_navigation.navigation_mostviewed_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationMostviewedBuilder',
            'oro_navigation.item.builder.pinbar.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\PinbarTabBuilder',
            'oro_navigation.item.builder.favorite.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\NavigationItemBuilder',
            'oro_navigation.item.builder.history.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\HistoryItemBuilder',
            'oro_navigation.item.factory.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\ItemFactory',
            'oro_navigation.item.pinbar.post_persist_listener.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Listener\\PinbarPostPersist',
            'oro_navigation.event.response_history.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\ResponseHistoryListener',
            'oro_navigation.event.response_hashnav.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\ResponseHashnavListener',
            'oro_navigation.menu.matcher.voter.request' => 'Oro\\Bundle\\NavigationBundle\\Menu\\Matcher\\Voter\\RequestVoter',
            'oro_navigation.menu.matcher.voter.routepattern' => 'Oro\\Bundle\\NavigationBundle\\Menu\\Matcher\\Voter\\RoutePatternVoter',
            'oro_navigation.title_service.class' => 'Pim\\Bundle\\NavigationBundle\\Provider\\TitleService',
            'oro_navigation.title_service.twig.extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\TitleExtension',
            'oro_navigation.title_service.annotations_reader.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TitleReader\\AnnotationsReader',
            'oro_navigation.title_service.config_reader.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TitleReader\\ConfigReader',
            'oro_navigation.title_service.event.request.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\RequestTitleListener',
            'oro_navigation.translation.extractor.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TranslationExtractor',
            'oro_navigation.twig_hash_nav_extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\HashNavExtension',
            'oro_navigation.form.type.pagestate.class' => 'Oro\\Bundle\\NavigationBundle\\Form\\Type\\PageStateType',
            'oro_navigation.form.handler.pagestate.class' => 'Oro\\Bundle\\NavigationBundle\\Form\\Handler\\PageStateHandler',
            'oro_navigation.breadcrumbs_manager.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\BreadcrumbManager',
            'oro_menu_config' => array(
                'templates' => array(
                    'application_menu' => array(
                        'template' => 'OroNavigationBundle:Menu:application_menu.html.twig',
                        'currentClass' => 'active',
                        'ancestorClass' => 'active',
                        'allow_safe_labels' => true,
                        'rootClass' => 'nav nav-multilevel oroplatform-menu',
                    ),
                    'dots_menu' => array(
                        'template' => 'OroNavigationBundle:Menu:dots_menu.html.twig',
                    ),
                    'shortcuts' => array(
                        'template' => 'OroNavigationBundle:Menu:shortcuts.html.twig',
                    ),
                    'navbar' => array(
                        'template' => 'OroNavigationBundle:Menu:navbar.html.twig',
                    ),
                    'dropdown' => array(
                        'template' => 'OroNavigationBundle:Menu:dropdown.html.twig',
                    ),
                    'horizontal_tabs' => array(
                        'template' => 'OroNavigationBundle:Menu:horizontal_tabs.html.twig',
                    ),
                    'pinbar' => array(
                        'template' => 'OroNavigationBundle:Menu:pinbar.html.twig',
                    ),
                    'favorite' => array(
                        'template' => 'OroNavigationBundle:Menu:favorites.html.twig',
                    ),
                    'mostviewed' => array(
                        'template' => 'OroNavigationBundle:Menu:mostviewed.html.twig',
                        'rootClass' => 'extra-list',
                    ),
                    'history' => array(
                        'template' => 'OroNavigationBundle:Menu:history.html.twig',
                        'rootClass' => 'extra-list',
                        'currentAsLink' => false,
                    ),
                ),
                'tree' => array(
                    'application_menu' => array(
                        'type' => 'application_menu',
                        'children' => array(
                            'system_tab' => array(
                                'children' => array(
                                    'system_configuration' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'emails' => array(
                                        'children' => array(
                                            'oro_email_emailtemplate_list' => array(
                                                'children' => array(

                                                ),
                                            ),
                                        ),
                                    ),
                                    'entities_list' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'users_management' => array(
                                        'children' => array(
                                            'oro_business_unit_list' => array(
                                                'children' => array(

                                                ),
                                            ),
                                            'user_list' => array(
                                                'children' => array(

                                                ),
                                            ),
                                            'user_roles' => array(
                                                'children' => array(

                                                ),
                                            ),
                                            'user_groups' => array(
                                                'children' => array(

                                                ),
                                            ),
                                        ),
                                    ),
                                    'audit_list' => array(
                                        'children' => array(

                                        ),
                                    ),
                                ),
                            ),
                            'pim_import_tab' => array(
                                'children' => array(
                                    'pim_ie_import' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_report_import' => array(
                                        'children' => array(

                                        ),
                                    ),
                                ),
                            ),
                            'pim_export_tab' => array(
                                'children' => array(
                                    'pim_ie_export' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_report_export' => array(
                                        'children' => array(

                                        ),
                                    ),
                                ),
                            ),
                            'pim_enrich_tab' => array(
                                'children' => array(
                                    'pim_enrich_product' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_categorytree' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_variant_group' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_group' => array(
                                        'children' => array(

                                        ),
                                    ),
                                ),
                            ),
                            'pim_configuration_tab' => array(
                                'children' => array(
                                    'pim_enrich_attributegroup' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_attribute' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_family' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_association_type' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_group_type' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_currency' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_locale' => array(
                                        'children' => array(

                                        ),
                                    ),
                                    'pim_enrich_channel' => array(
                                        'children' => array(

                                        ),
                                    ),
                                ),
                            ),
                        ),
                        'extras' => array(

                        ),
                    ),
                    'dots_menu' => array(
                        'type' => 'dots_menu',
                        'children' => array(
                            'pinbar' => array(
                                'children' => array(

                                ),
                            ),
                            'history' => array(
                                'children' => array(

                                ),
                            ),
                            'favorite' => array(
                                'children' => array(

                                ),
                            ),
                            'mostviewed' => array(
                                'children' => array(

                                ),
                            ),
                        ),
                        'extras' => array(

                        ),
                    ),
                    'shortcuts' => array(
                        'type' => 'shortcuts',
                        'children' => array(
                            'shortcut_new_user' => array(
                                'children' => array(

                                ),
                            ),
                            'shortcut_list_users' => array(
                                'children' => array(

                                ),
                            ),
                            'shortcut_new_role' => array(
                                'children' => array(

                                ),
                            ),
                            'shortcut_new_group' => array(
                                'children' => array(

                                ),
                            ),
                        ),
                        'extras' => array(

                        ),
                    ),
                    'usermenu' => array(
                        'children' => array(
                            'oro_user_profile_view' => array(
                                'children' => array(

                                ),
                            ),
                        ),
                        'extras' => array(

                        ),
                    ),
                ),
                'items' => array(
                    'system_configuration' => array(
                        'label' => 'Configuration',
                        'extras' => array(
                            'description' => 'System configuration',
                        ),
                        'route' => 'oro_config_configuration_system',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'emails' => array(
                        'label' => 'Emails',
                        'uri' => '#',
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'oro_email_emailtemplate_list' => array(
                        'label' => 'Templates',
                        'route' => 'oro_email_emailtemplate_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_email_emailtemplate_*',
                            ),
                            'description' => 'List of email templates',
                        ),
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'entities_list' => array(
                        'label' => 'Entities',
                        'route' => 'oro_entityconfig_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_entityconfig*',
                                1 => 'oro_entityextend*',
                            ),
                            'description' => 'List of entities',
                        ),
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pinbar' => array(
                        'label' => 'Pinbar',
                        'extras' => array(
                            'icon' => 'icon-folder-close',
                            'maxItems' => 10,
                        ),
                        'uri' => '#',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'history' => array(
                        'label' => 'History',
                        'extras' => array(
                            'icon' => 'icon-time',
                            'activeIfFirstIsEmpty' => true,
                        ),
                        'uri' => '#',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'favorite' => array(
                        'label' => 'Favorites',
                        'extras' => array(
                            'icon' => 'icon-star-empty',
                        ),
                        'uri' => '#',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'mostviewed' => array(
                        'label' => 'Most Viewed',
                        'extras' => array(
                            'icon' => 'icon-flag',
                        ),
                        'uri' => '#',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'oro_business_unit_list' => array(
                        'label' => 'Business Units',
                        'route' => 'oro_business_unit_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_business_unit_*',
                            ),
                            'description' => 'List of business units',
                        ),
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'system_tab' => array(
                        'label' => 'System',
                        'uri' => '#',
                        'extras' => array(
                            'position' => 60,
                            'hideIfEmpty' => true,
                        ),
                        'showNonAuthorized' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'users_management' => array(
                        'label' => 'Users Management',
                        'uri' => '#',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'user_list' => array(
                        'label' => 'Users',
                        'route' => 'oro_user_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^oro_user_(?!role\\w+|group\\w+|security\\w+|reset\\w+)\\w+$/',
                            ),
                            'description' => 'List of system users',
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'user_create' => array(
                        'label' => 'Create User',
                        'route' => 'oro_user_create',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'user_roles' => array(
                        'label' => 'Roles',
                        'route' => 'oro_user_role_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_user_role_*',
                            ),
                            'description' => 'List of system roles',
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'user_groups' => array(
                        'label' => 'Groups',
                        'route' => 'oro_user_group_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_user_group_*',
                            ),
                            'description' => 'List of system groups',
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'shortcut_new_user' => array(
                        'label' => 'Create new user',
                        'route' => 'oro_user_create',
                        'extras' => array(
                            'description' => 'Create new user instance',
                            'isCustomAction' => true,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'shortcut_list_users' => array(
                        'label' => 'Show users list',
                        'route' => 'oro_user_index',
                        'extras' => array(
                            'description' => 'List of all system users',
                            'isCustomAction' => true,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'shortcut_new_role' => array(
                        'label' => 'Create new role',
                        'route' => 'oro_user_role_create',
                        'extras' => array(
                            'description' => 'Create new role instance',
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'shortcut_new_group' => array(
                        'label' => 'Create new group',
                        'route' => 'oro_user_group_create',
                        'extras' => array(
                            'description' => 'Create new group instance',
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'oro_user_profile_view' => array(
                        'label' => 'My User',
                        'route' => 'oro_user_profile_view',
                        'extras' => array(
                            'position' => 10,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'audit_list' => array(
                        'label' => 'Data Audit',
                        'route' => 'oro_dataaudit_index',
                        'extras' => array(
                            'routes' => array(
                                0 => 'oro_dataaudit_*',
                            ),
                            'description' => 'Data Audit',
                        ),
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_import_tab' => array(
                        'label' => 'pim_menu.tab.collect',
                        'uri' => '#',
                        'extras' => array(
                            'position' => 10,
                        ),
                        'showNonAuthorized' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_export_tab' => array(
                        'label' => 'pim_menu.tab.spread',
                        'uri' => '#',
                        'extras' => array(
                            'position' => 30,
                        ),
                        'showNonAuthorized' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_ie_import' => array(
                        'label' => 'pim_menu.item.import_profile',
                        'route' => 'pim_importexport_import_profile_index',
                        'aclResourceId' => 'pim_importexport_import_profile_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_importexport_import_profile_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_ie_export' => array(
                        'label' => 'pim_menu.item.export_profile',
                        'route' => 'pim_importexport_export_profile_index',
                        'aclResourceId' => 'pim_importexport_export_profile_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_importexport_export_profile_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_report_import' => array(
                        'label' => 'pim_menu.item.import_history',
                        'route' => 'pim_importexport_import_execution_index',
                        'aclResourceId' => 'pim_importexport_import_execution_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_importexport_import_execution_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_report_export' => array(
                        'label' => 'pim_menu.item.export_history',
                        'route' => 'pim_importexport_export_execution_index',
                        'aclResourceId' => 'pim_importexport_export_execution_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_importexport_export_execution_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'home' => array(
                        'name' => 'Home',
                        'label' => '',
                        'extras' => array(
                            'icon' => 'icon-home',
                            'position' => 1,
                        ),
                        'route' => 'oro_default',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_tab' => array(
                        'label' => 'pim_menu.tab.enrich',
                        'uri' => '#',
                        'extras' => array(
                            'position' => 20,
                        ),
                        'showNonAuthorized' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_product' => array(
                        'label' => 'pim_menu.item.product',
                        'route' => 'pim_enrich_product_index',
                        'aclResourceId' => 'pim_enrich_product_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_product_\\w+$/',
                                1 => '/^pim_enrich_mass_edit_\\w+$/',
                            ),
                            'position' => 10,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_attribute' => array(
                        'label' => 'pim_menu.item.attribute',
                        'route' => 'pim_enrich_attribute_index',
                        'aclResourceId' => 'pim_enrich_attribute_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_attribute_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_family' => array(
                        'label' => 'pim_menu.item.family',
                        'route' => 'pim_enrich_family_index',
                        'aclResourceId' => 'pim_enrich_family_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_family_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_attributegroup' => array(
                        'label' => 'pim_menu.item.attribute_group',
                        'route' => 'pim_enrich_attributegroup_index',
                        'aclResourceId' => 'pim_enrich_attribute_group_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_attribute_group_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_categorytree' => array(
                        'label' => 'pim_menu.item.category',
                        'route' => 'pim_enrich_categorytree_index',
                        'aclResourceId' => 'pim_enrich_category_list',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_categorytree_\\w+$/',
                            ),
                            'position' => 20,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_configuration_tab' => array(
                        'label' => 'pim_menu.tab.settings',
                        'uri' => '#',
                        'extras' => array(
                            'position' => 50,
                        ),
                        'showNonAuthorized' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_locale' => array(
                        'label' => 'pim_menu.item.locale',
                        'route' => 'pim_enrich_locale_index',
                        'aclResourceId' => 'pim_enrich_locale_index',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'pim_enrich_currency' => array(
                        'label' => 'pim_menu.item.currency',
                        'route' => 'pim_enrich_currency_index',
                        'aclResourceId' => 'pim_enrich_currency_index',
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'pim_enrich_channel' => array(
                        'label' => 'pim_menu.item.channel',
                        'route' => 'pim_enrich_channel_index',
                        'aclResourceId' => 'pim_enrich_channel_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_channel_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_variant_group' => array(
                        'label' => 'pim_menu.item.variant_group',
                        'route' => 'pim_enrich_variant_group_index',
                        'aclResourceId' => 'pim_enrich_variant_group_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_variant_group_\\w+$/',
                            ),
                            'position' => 30,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_group' => array(
                        'label' => 'pim_menu.item.group',
                        'route' => 'pim_enrich_group_index',
                        'aclResourceId' => 'pim_enrich_group_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_group_\\w+$/',
                            ),
                            'position' => 40,
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_association_type' => array(
                        'label' => 'pim_menu.item.association_type',
                        'route' => 'pim_enrich_association_type_index',
                        'aclResourceId' => 'pim_enrich_association_type_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_association_type_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'pim_enrich_group_type' => array(
                        'label' => 'pim_menu.item.group_type',
                        'route' => 'pim_enrich_group_type_index',
                        'aclResourceId' => 'pim_enrich_group_type_index',
                        'extras' => array(
                            'routes' => array(
                                0 => '/^pim_enrich_group_type_\\w+$/',
                            ),
                        ),
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                    ),
                    'oro_tag_list' => array(
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'oro_notification_emailnotification_list' => array(
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'oro_cron_job' => array(
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'system_configuraion' => array(
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                    'oro_calendar_view_default' => array(
                        'display' => false,
                        'translateParameters' => array(

                        ),
                        'routeParameters' => array(

                        ),
                        'extras' => array(

                        ),
                    ),
                ),
                'settings' => array(
                    'maxItems' => array(
                        'value' => 20,
                        'scope' => 'app',
                    ),
                    'title_suffix' => array(
                        'value' => '',
                        'scope' => 'app',
                    ),
                    'title_delimiter' => array(
                        'value' => '-',
                        'scope' => 'app',
                    ),
                    'breadcrumb_menu' => array(
                        'value' => 'application_menu',
                        'scope' => 'app',
                    ),
                ),
            ),
            'oro_titles' => array(
                'oro_default' => 'pim_title.dashboard',
                'oro_ui_index' => 'Dashboard',
                'oro_ui_1column' => 'Dashboard | One Column',
                'oro_ui_grid_without_bar_page' => 'Dashboard | Grid',
                'oro_ui_grid_page' => 'Dashboard | Grid',
                'oro_ui_1column_menu' => 'Dashboard | Menu',
                'oro_ui_1column_toolbar' => 'Dashboard | One Column Toolbar',
                'oro_ui_2columns_left' => 'Dashboard | Two Columns Toolbar Left',
                'oro_ui_2columns_right' => 'Dashboard | Two Columns Toolbar Right',
                'oro_ui_3columns' => 'Dashboard | Three Columns',
                'oro_ui_forgot_password' => 'Forgot Password',
                'oro_ui_login' => 'Login',
                'oro_ui_registration' => 'Registration',
                'oro_ui_404' => '404 Not Found',
                'oro_ui_503' => '503 Error',
                'oro_ui_form_elements' => 'Form Elements',
                'oro_ui_messages' => 'Dashboard | Messages',
                'oro_ui_buttons' => 'Dashboard | Buttons',
                'oro_ui_tables' => 'Dashboard | Tables',
                'oro_ui_general_elements' => 'Dashboard | Elements',
                'oro_ui_dialog_styled' => 'Dashboard | Dialog',
                'oro_ui_record_edit' => 'Dashboard | Edit',
                'oro_config_configuration_system' => 'pim_title.system_configuration.index',
                'oro_email_view' => '%subject% - Email',
                'oro_email_emailtemplate_index' => NULL,
                'oro_email_emailtemplate_update' => 'Template %name% - Edit',
                'oro_email_emailtemplate_create' => 'Create Email Template',
                'oro_email_emailtemplate_clone' => 'Clone Email Template',
                'oro_entity_index' => '%entityName% - Entities - System',
                'oro_entity_view' => '%recordName% - %entityName% - Entities - System',
                'oro_entity_update' => '%entityName% - Entities - System',
                'oro_entityconfig_index' => NULL,
                'oro_entityconfig_view' => '%entityName%',
                'oro_entityconfig_update' => '%entityName%',
                'oro_entityconfig_field_update' => '%fieldName% - %entityName%',
                'oro_entityextend_entity_create' => 'New Entity',
                'oro_entityextend_field_create' => 'New Field - %entityName%',
                'oro_entityextend_field_update' => '%fieldName% - New Field - %entityName%',
                'oro_shortcut_actionslist' => 'Shortcut Actions List',
                'oro_pinbar_help' => 'How To Use Pinbar',
                'oro_business_unit_index' => NULL,
                'oro_business_unit_update' => '%business_unit.name% - Edit',
                'oro_business_unit_create' => 'Create Business Unit',
                'oro_business_unit_view' => '%business_unit.name%',
                'oro_user_view' => '%username%',
                'oro_user_update' => '%username% - Edit',
                'oro_user_create' => 'Create User',
                'oro_user_index' => 'pim_title.user.index',
                'oro_user_profile_view' => '%username%',
                'oro_user_profile_update' => '%username% - Edit',
                'oro_user_role_update' => '%role% - Edit',
                'oro_user_role_create' => 'Create Role',
                'oro_user_role_index' => 'pim_title.user_role.index',
                'oro_user_security_login' => 'Login',
                'oro_user_status_list' => 'User Status',
                'oro_user_status_create' => 'Add Status',
                'oro_user_reset_reset' => 'Password Reset',
                'oro_user_reset_request' => 'Forgot Password',
                'oro_user_reset_check_email' => 'Password Reset - Check Email',
                'oro_user_group_create' => 'Create Group',
                'oro_user_group_update' => '%group% - Edit',
                'oro_user_group_index' => 'pim_title.user_group.index',
                'oro_dataaudit_index' => NULL,
                'pim_importexport_export_profile_index' => 'pim_title.export_profile.index',
                'pim_importexport_export_profile_edit' => 'pim_title.export_profile.edit',
                'pim_importexport_export_profile_show' => 'pim_title.export_profile.show',
                'pim_importexport_export_execution_index' => 'pim_title.export_execution.index',
                'pim_importexport_export_execution_show' => 'pim_title.export_execution.show',
                'pim_importexport_import_profile_index' => 'pim_title.import_profile.index',
                'pim_importexport_import_profile_edit' => 'pim_title.import_profile.edit',
                'pim_importexport_import_profile_show' => 'pim_title.import_profile.show',
                'pim_importexport_import_execution_index' => 'pim_title.import_execution.index',
                'pim_importexport_import_execution_show' => 'pim_title.import_execution.show',
                'pim_enrich_attributegroup_index' => 'pim_title.attribute_group.index',
                'pim_enrich_attributegroup_create' => 'pim_title.attribute_group.create',
                'pim_enrich_attributegroup_edit' => 'pim_title.attribute_group.edit',
                'pim_enrich_categorytree_index' => 'pim_title.category.index',
                'pim_enrich_categorytree_create' => 'pim_title.category.create',
                'pim_enrich_categorytree_edit' => 'pim_title.category.edit',
                'pim_enrich_attribute_index' => 'pim_title.attribute.index',
                'pim_enrich_attribute_create' => 'pim_title.attribute.create',
                'pim_enrich_attribute_edit' => 'pim_title.attribute.edit',
                'pim_enrich_product_index' => 'pim_title.product.index',
                'pim_enrich_product_edit' => 'pim_title.product.edit',
                'pim_enrich_family_index' => 'pim_title.family.index',
                'pim_enrich_family_edit' => 'pim_title.family.edit',
                'pim_enrich_channel_index' => 'pim_title.channel.index',
                'pim_enrich_channel_create' => 'pim_title.channel.create',
                'pim_enrich_channel_edit' => 'pim_title.channel.edit',
                'pim_enrich_currency_index' => 'pim_title.currency.index',
                'pim_enrich_locale_index' => 'pim_title.locale.index',
                'pim_enrich_group_index' => 'pim_title.group.index',
                'pim_enrich_group_edit' => 'pim_title.group.edit',
                'pim_enrich_variant_group_index' => 'pim_title.variant_group.index',
                'pim_enrich_variant_group_edit' => 'pim_title.variant_group.edit',
                'pim_enrich_association_type_index' => 'pim_title.association_type.index',
                'pim_enrich_association_type_edit' => 'pim_title.association_type.edit',
                'pim_enrich_group_type_index' => 'pim_title.group_type.index',
                'pim_enrich_group_type_edit' => 'pim_title.group_type.edit',
                'pim_enrich_mass_edit_action_choose' => 'pim_title.mass_edit_action.choose',
                'pim_enrich_mass_edit_action_configure' => 'pim_title.mass_edit_action.configure',
                'pim_enrich_mass_edit_action_perform' => 'pim_title.mass_edit_action.configure',
            ),
            'oro_organization.type.business_unit.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitType',
            'oro_organization.handler.business_unit.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Handler\\BusinessUnitHandler',
            'oro_organization.business_unit.form.type.business_unit.api.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitApiType',
            'oro_organization.business_unit.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_organization.business_unit.entity.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit',
            'oro_organization.business_unit.manager.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\Manager\\BusinessUnitManager',
            'oro_organization.type.ownership_type.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\OwnershipType',
            'oro_organization.form.type.business_unit_tree_select_type.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitTreeSelectType',
            'oro_organization.form.extension.owner.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Extension\\OwnerFormExtension',
            'oro_organization.form.transformer.business_unit_select.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Transformer\\BusinessUnitTransformer',
            'oro_organization.form.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\FormListener',
            'oro_organization.twig.get_owner.class' => 'Oro\\Bundle\\OrganizationBundle\\Twig\\OwnerTypeExtension',
            'oro_organization.entity_ownership.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\RecordOwnerDataListener',
            'oro_organization.business_unit.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitListener',
            'oro_organization.twig.business_units.class' => 'Oro\\Bundle\\OrganizationBundle\\Twig\\BusinessUnitExtension',
            'oro_organization.provider.business_units.class' => 'Oro\\Bundle\\OrganizationBundle\\Provider\\BusinessUnitGridService',
            'oro_organization.form.type.business_unit_select.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitSelectType',
            'oro_platform.maintenance.class' => 'Oro\\Bundle\\PlatformBundle\\Maintenance\\Mode',
            'oro_requirejs.twig.class' => 'Oro\\Bundle\\RequireJSBundle\\Twig\\OroRequireJSExtension',
            'oro_requirejs.provider.config.class' => 'Oro\\Bundle\\RequireJSBundle\\Provider\\Config',
            'oro_require_js' => array(
                'config' => array(
                    'waitSeconds' => 0,
                ),
                'build_path' => 'js/oro.min.js',
                'building_timeout' => 3600,
                'build' => array(
                    'optimize' => 'uglify2',
                    'preserveLicenseComments' => true,
                    'paths' => array(

                    ),
                ),
                'js_engine' => 'node',
                'web_root' => (dirname(dirname(__DIR__)).'/../web'),
            ),
            'oro_require_js.web_root' => (dirname(dirname(__DIR__)).'/../web'),
            'oro_require_js.build_path' => 'js/oro.min.js',
            'oro_security.entity.owners' => array(
                'organization' => 'OroOrganizationBundle:Organization',
                'business_unit' => 'OroOrganizationBundle:BusinessUnit',
                'user' => 'OroUserBundle:User',
            ),
            'oro_security.owner.entity_owner_accessor.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\EntityOwnerAccessor',
            'oro_security.owner.ownership_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\Metadata\\OwnershipMetadataProvider',
            'oro_security.owner.ownership_metadata_provider.cache.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'oro_security.owner.ownership_config_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnershipConfigSubscriber',
            'oro_security.owner.ownership_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnershipMetadataCacheWarmer',
            'oro_security.owner.ownership_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnershipMetadataCacheClearer',
            'oro_security.security_facade.class' => 'Oro\\Bundle\\SecurityBundle\\SecurityFacade',
            'oro_security.acl.manager.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclManager',
            'oro_security.acl.sid_manager.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclSidManager',
            'oro_security.acl.cache.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Cache\\FilesystemCache',
            'oro_security.acl.ace_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AceManipulationHelper',
            'oro_security.acl.privilege_repository.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclPrivilegeRepository',
            'oro_security.acl.extension_selector.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\AclExtensionSelector',
            'oro_security.acl.extension.entity.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\EntityAclExtension',
            'oro_security.acl.extension.action.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\ActionAclExtension',
            'oro_security.acl.voter.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Voter\\AclVoter',
            'oro_security.acl.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\RootBasedAclProvider',
            'oro_security.acl.dbal.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Dbal\\MutableAclProvider',
            'oro_security.acl.permission_granting_strategy.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\PermissionGrantingStrategy',
            'oro_security.acl.permission_map.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Permission\\PermissionMap',
            'oro_security.acl.object_identity_factory.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdentityFactory',
            'oro_security.acl.object_identity_retrieval_strategy.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdentityRetrievalStrategy',
            'oro_security.acl.object_id_accessor.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdAccessor',
            'oro_security.owner.tree.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\OwnerTree',
            'oro_security.owner.decision_maker.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\EntityOwnershipDecisionMaker',
            'oro_security.type.oro_acl_access_level_selector.class' => 'Oro\\Bundle\\SecurityBundle\\Form\\Type\\AclAccessLevelSelectorType',
            'oro_security.type.oro_acl_label.class' => 'Oro\\Bundle\\SecurityBundle\\Form\\Type\\ObjectLabelType',
            'oro_security.entity_security_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\EntitySecurityMetadataProvider',
            'oro_security.action_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\ActionMetadataProvider',
            'oro_security.acl.annotation_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\AclAnnotationProvider',
            'oro_security.acl.annotation_provider.cache.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'oro_security.acl.annotation_loader.class' => 'Oro\\Bundle\\SecurityBundle\\Annotation\\Loader\\AclAnnotationLoader',
            'oro_security.acl.yaml_config_loader.class' => 'Oro\\Bundle\\SecurityBundle\\Annotation\\Loader\\AclYamlConfigLoader',
            'oro_security.entity_security_config_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\EntitySecurityMetadataConfigSubscriber',
            'oro_security.acl.annotation_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\AclAnnotationCacheWarmer',
            'oro_security.acl.annotation_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\AclAnnotationCacheClearer',
            'oro_security.action_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\ActionMetadataCacheWarmer',
            'oro_security.action_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\ActionMetadataCacheClearer',
            'oro_security.entity_security_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\EntitySecurityMetadataCacheWarmer',
            'oro_security.entity_security_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\EntitySecurityMetadataCacheClearer',
            'oro_security.listener.config_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\ConfigSubscriber',
            'oro_security.listener.controller.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\ControllerListener',
            'oro_security.twig.security_extension' => 'Oro\\Bundle\\SecurityBundle\\Twig\\OroSecurityExtension',
            'oro_security.encoder.mcrypt.class' => 'Oro\\Bundle\\SecurityBundle\\Encoder\\Mcrypt',
            'oro_security.acl.listenerclass' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\AclListener',
            'oro_security.acl_helper.class' => 'Oro\\Bundle\\SecurityBundle\\ORM\\Walker\\AclHelper',
            'oro_security.orm.ownership_sql_walker_builder.class' => 'Oro\\Bundle\\SecurityBundle\\ORM\\Walker\\OwnershipConditionDataBuilder',
            'oro_security.ownership_tree_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\OwnerTreeProvider',
            'oro_security.ownership_tree_provider.cache.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'oro_security.ownership_tree.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnerTreeCacheWarmer',
            'oro_security.ownership_tree.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnerTreeCacheCleaner',
            'oro_security.ownership_tree_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnerTreeListener',
            'oro_translation.form.type.translatable_entity.class' => 'Oro\\Bundle\\TranslationBundle\\Form\\Type\\TranslatableEntityType',
            'oro_translation.controller.class' => 'Oro\\Bundle\\TranslationBundle\\Controller\\Controller',
            'oro_translation.extractor.php_code_extractor.class' => 'Oro\\Bundle\\TranslationBundle\\Extractor\\PhpCodeExtractor',
            'oro_translation.js_translation.domains' => array(
                0 => 'jsmessages',
                1 => 'validators',
                2 => 'measures',
            ),
            'oro_user.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\UserManager',
            'oro_user.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.status.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\StatusManager',
            'oro_user.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\User',
            'oro_user.group.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Group',
            'oro_user.role.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Role',
            'oro_user.security.provider.class' => 'Oro\\Bundle\\UserBundle\\Security\\UserProvider',
            'oro_user.security.login.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\LoginSubscriber',
            'oro_user.acl.twig.class' => 'Oro\\Bundle\\UserBundle\\Twig\\OroUserExtension',
            'oro_user.user_menu.builder.class' => 'Oro\\Bundle\\UserBundle\\Menu\\UserMenuBuilder',
            'oro_user.role.listener.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\RoleListener',
            'oro_user.role.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\RoleManager',
            'oro_user.role.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.group.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\GroupManager',
            'oro_user.group.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.entity_with_image.subscriber.class' => 'Oro\\Bundle\\UserBundle\\Entity\\EventListener\\UploadedImageSubscriber',
            'oro_user.autocomplete.user.search_handler' => 'Oro\\Bundle\\UserBundle\\Autocomplete\\UserSearchHandler',
            'oro_user.email.owner.provider.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Provider\\EmailOwnerProvider',
            'oro_user.gender_provider.class' => 'Oro\\Bundle\\UserBundle\\Provider\\GenderProvider',
            'oro_user.change_password.subscriber.class' => 'Oro\\Bundle\\UserBundle\\Form\\EventListener\\ChangePasswordSubscriber',
            'oro_user.event_listener.user_email_grid_listener.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\UserEmailGridListener',
            'oro_user.form.type.user.class' => 'Pim\\Bundle\\UserBundle\\Form\\Type\\UserType',
            'oro_user.form.type.user.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserApiType',
            'oro_user.form.type.reset.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\ResetType',
            'oro_user.form.type.role.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\RoleApiType',
            'oro_user.form.type.group.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GroupType',
            'oro_user.form.type.group.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GroupApiType',
            'oro_user.form.type.status.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\StatusType',
            'oro_user.form.type.user_select.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserSelectType',
            'oro_user.form.type.user_multiselect.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserMultiSelectType',
            'oro_user.form.type.gender.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GenderType',
            'oro_user.form.type.email.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\EmailType',
            'oro_user.form.type.change_password.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\ChangePasswordType',
            'oro_user.form.handler.user.class' => 'Pim\\Bundle\\UserBundle\\Form\\Handler\\UserHandler',
            'oro_user.form.handler.reset.class' => 'Pim\\Bundle\\UserBundle\\Form\\Handler\\ResetHandler',
            'oro_user.form.handler.role.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\RoleHandler',
            'oro_user.form.handler.group.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\GroupHandler',
            'oro_user.form.handler.status.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\StatusHandler',
            'oro_user.form.handler.acl_role.class' => 'Pim\\Bundle\\UserBundle\\Form\\Handler\\AclRoleHandler',
            'oro_user.importexport.user_normalizer.class' => 'Oro\\Bundle\\UserBundle\\ImportExport\\Serializer\\Normalizer\\UserNormalizer',
            'oro_user.reset.ttl' => 86400,
            'oro_user.email' => array(
                'no-reply@example.com' => 'Akeneo Admin',
            ),
            'oro_user.privileges' => array(
                'action' => array(
                    'label' => 'rights.action',
                    'view_type' => 'groups',
                    'types' => array(
                        0 => 'action',
                        1 => 'entity',
                    ),
                    'field_type' => 'pim_acl_access_level_selector',
                    'fix_values' => false,
                    'default_value' => 5,
                    'show_default' => true,
                ),
            ),
            'oro_windows.twig.extension.class' => 'Oro\\Bundle\\WindowsBundle\\Twig\\WindowsExtension',
            'oro_dataaudit.metadata.metadata_factory.class' => 'Oro\\Bundle\\DataAuditBundle\\Metadata\\ExtendMetadataFactory',
            'oro_dataaudit.metadata.annotation_driver.class' => 'Oro\\Bundle\\DataAuditBundle\\Metadata\\Driver\\AnnotationDriver',
            'oro_dataaudit.listener.entity_subscriber.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\EntitySubscriber',
            'oro_dataaudit.listener.kernel_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\KernelListener',
            'oro_dataaudit.loggable.loggable_manager.class' => 'Oro\\Bundle\\DataAuditBundle\\Loggable\\LoggableManager',
            'oro_dataaudit.loggable.entity.class' => 'Oro\\Bundle\\DataAuditBundle\\Entity\\Audit',
            'oro_dataaudit.event_listener.dataaudit_grid_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridListener',
            'oro_dataaudit.event_listener.dataaudit_history_grid_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener',
            'knp_gaufrette.filesystem_map.class' => 'Knp\\Bundle\\GaufretteBundle\\FilesystemMap',
            'apy_js_form_validation.enabled' => true,
            'apy_js_form_validation.check_modes' => array(
                0 => 'submit',
                1 => 'change',
            ),
            'apy_js_form_validation.script_directory' => 'bundles/jsformvalidation/js/',
            'apy_js_form_validation.validation_bundle' => 'APYJsFormValidationBundle',
            'apy_js_form_validation.javascript_framework' => 'jquery',
            'apy_js_form_validation.warmer_routes' => array(

            ),
            'apy_js_form_validation.identifier_field' => 'jsfv_identifier',
            'apy_js_form_validation.translation_group' => 'validators',
            'jsfv.generator.class' => 'APY\\JsFormValidationBundle\\Generator\\FormValidationScriptGenerator',
            'twig.extension.jsformvalidation.class' => 'Pim\\Bundle\\JsFormValidationBundle\\Twig\\Extension\\JsFormValidationTwigExtension',
            'kernel.cache_warmer.jsformvalidation.class' => 'APY\\JsFormValidationBundle\\CacheWarmer\\JsFormValidationCacheWarmer',
            'form.type_extension.validation_groups.class' => 'APY\\JsFormValidationBundle\\Form\\Extension\\FormTypeExtension',
            'form.type_extension.repeated_field_parameters.class' => 'APY\\JsFormValidationBundle\\Form\\Extension\\RepeatedTypeExtension',
            'jsfv.validation_groups_listener.class' => 'APY\\JsFormValidationBundle\\EventListener\\ValidationGroupsListener',
            'jsfv.repeated_field_listener.class' => 'APY\\JsFormValidationBundle\\EventListener\\RepeatedFieldListener',
            'jsfv.controller.class' => 'APY\\JsFormValidationBundle\\Controller\\Controller',
            'doctrine_migrations.dir_name' => (dirname(dirname(__DIR__)).'/../upgrades/schema'),
            'doctrine_migrations.namespace' => 'Pim\\Upgrade\\Schema',
            'doctrine_migrations.name' => 'PIM Migrations',
            'doctrine_migrations.table_name' => 'migration_versions',
            'akeneo_measure.measures_config' => array(
                'measures_config' => array(
                    'Area' => array(
                        'standard' => 'SQUARE_METER',
                        'units' => array(
                            'SQUARE_MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 9.9999999999999995E-7,
                                    ),
                                ),
                                'symbol' => 'mm²',
                            ),
                            'SQUARE_CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0001,
                                    ),
                                ),
                                'symbol' => 'cm²',
                            ),
                            'SQUARE_DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'dm²',
                            ),
                            'SQUARE_METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm²',
                            ),
                            'CENTIARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'ca',
                            ),
                            'SQUARE_DEKAMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'dam²',
                            ),
                            'ARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'a',
                            ),
                            'SQUARE_HECTOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10000,
                                    ),
                                ),
                                'symbol' => 'hm²',
                            ),
                            'HECTARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10000,
                                    ),
                                ),
                                'symbol' => 'ha',
                            ),
                            'SQUARE_KILOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'km²',
                            ),
                            'SQUARE_MIL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.4515999999999997E-10,
                                    ),
                                ),
                                'symbol' => 'sq mil',
                            ),
                            'SQUARE_INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00064515999999999998,
                                    ),
                                ),
                                'symbol' => 'in²',
                            ),
                            'SQUARE_FOOT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.092903040000000006,
                                    ),
                                ),
                                'symbol' => 'ft²',
                            ),
                            'SQUARE_YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.83612735999999999,
                                    ),
                                ),
                                'symbol' => 'yd²',
                            ),
                            'ARPENT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3418.8899999999999,
                                    ),
                                ),
                                'symbol' => 'arpent',
                            ),
                            'ACRE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 4046.8564219999998,
                                    ),
                                ),
                                'symbol' => 'A',
                            ),
                            'SQUARE_FURLONG' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 40468.726000000002,
                                    ),
                                ),
                                'symbol' => 'fur²',
                            ),
                            'SQUARE_MILE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 2589988.1103360001,
                                    ),
                                ),
                                'symbol' => 'mi²',
                            ),
                        ),
                    ),
                    'Binary' => array(
                        'standard' => 'BYTE',
                        'units' => array(
                            'BIT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.125,
                                    ),
                                ),
                                'symbol' => 'b',
                            ),
                            'BYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'B',
                            ),
                            'KILOBYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1024,
                                    ),
                                ),
                                'symbol' => 'kB',
                            ),
                            'MEGABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1048576,
                                    ),
                                ),
                                'symbol' => 'MB',
                            ),
                            'GIGABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1073741824,
                                    ),
                                ),
                                'symbol' => 'GB',
                            ),
                            'TERABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1099511627776,
                                    ),
                                ),
                                'symbol' => 'TB',
                            ),
                        ),
                    ),
                    'Decibel' => array(
                        'standard' => 'DECIBEL',
                        'units' => array(
                            'DECIBEL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'd',
                            ),
                        ),
                    ),
                    'Frequency' => array(
                        'standard' => 'HERTZ',
                        'units' => array(
                            'HERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'Hz',
                            ),
                            'KILOHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kHz',
                            ),
                            'MEGAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'MHz',
                            ),
                            'GIGAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000,
                                    ),
                                ),
                                'symbol' => 'GHz',
                            ),
                            'TERAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000000,
                                    ),
                                ),
                                'symbol' => 'THz',
                            ),
                        ),
                    ),
                    'Length' => array(
                        'standard' => 'METER',
                        'units' => array(
                            'MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mm',
                            ),
                            'CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'cm',
                            ),
                            'DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.10000000000000001,
                                    ),
                                ),
                                'symbol' => 'dm',
                            ),
                            'METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm',
                            ),
                            'DEKAMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10,
                                    ),
                                ),
                                'symbol' => 'dam',
                            ),
                            'HECTOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'hm',
                            ),
                            'KILOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'km',
                            ),
                            'MIL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 2.5400000000000001E-5,
                                    ),
                                ),
                                'symbol' => 'mil',
                            ),
                            'INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.025399999999999999,
                                    ),
                                ),
                                'symbol' => 'in',
                            ),
                            'FEET' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.30480000000000002,
                                    ),
                                ),
                                'symbol' => 'ft',
                            ),
                            'YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.91439999999999999,
                                    ),
                                ),
                                'symbol' => 'yd',
                            ),
                            'CHAIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 20.116800000000001,
                                    ),
                                ),
                                'symbol' => 'ch',
                            ),
                            'FURLONG' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 201.16800000000001,
                                    ),
                                ),
                                'symbol' => 'fur',
                            ),
                            'MILE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1609.3440000000001,
                                    ),
                                ),
                                'symbol' => 'mi',
                            ),
                        ),
                    ),
                    'Power' => array(
                        'standard' => 'WATT',
                        'units' => array(
                            'WATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'W',
                            ),
                            'KILOWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kW',
                            ),
                            'MEGAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'MW',
                            ),
                            'GIGAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000,
                                    ),
                                ),
                                'symbol' => 'GW',
                            ),
                            'TERAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000000,
                                    ),
                                ),
                                'symbol' => 'TW',
                            ),
                        ),
                    ),
                    'Voltage' => array(
                        'standard' => 'VOLT',
                        'units' => array(
                            'MILLIVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mV',
                            ),
                            'CENTIVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'cV',
                            ),
                            'DECIVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.10000000000000001,
                                    ),
                                ),
                                'symbol' => 'dV',
                            ),
                            'VOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'V',
                            ),
                            'DEKAVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10,
                                    ),
                                ),
                                'symbol' => 'daV',
                            ),
                            'HECTOVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'hV',
                            ),
                            'KILOVOLT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kV',
                            ),
                        ),
                    ),
                    'Intensity' => array(
                        'standard' => 'AMPERE',
                        'units' => array(
                            'MILLIAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mA',
                            ),
                            'CENTIAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'cA',
                            ),
                            'DECIAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.10000000000000001,
                                    ),
                                ),
                                'symbol' => 'dA',
                            ),
                            'AMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'A',
                            ),
                            'DEKAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10,
                                    ),
                                ),
                                'symbol' => 'daA',
                            ),
                            'HECTOAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'hA',
                            ),
                            'KILOAMPERE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kA',
                            ),
                        ),
                    ),
                    'Resistance' => array(
                        'standard' => 'OHM',
                        'units' => array(
                            'MILLIOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mΩ',
                            ),
                            'CENTIOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'cΩ',
                            ),
                            'DECIOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.10000000000000001,
                                    ),
                                ),
                                'symbol' => 'dΩ',
                            ),
                            'OHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'Ω',
                            ),
                            'DEKAOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10,
                                    ),
                                ),
                                'symbol' => 'daΩ',
                            ),
                            'HECTOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'hΩ',
                            ),
                            'KILOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kΩ',
                            ),
                            'MEGOHM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'MΩ',
                            ),
                        ),
                    ),
                    'Speed' => array(
                        'standard' => 'METER_PER_SECOND',
                        'units' => array(
                            'METER_PER_SECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'mdivs',
                            ),
                            'METER_PER_MINUTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'div' => 60,
                                    ),
                                ),
                                'symbol' => 'mdivm',
                            ),
                            'METER_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'mdivh',
                            ),
                            'KILOMETER_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'kmdivh',
                            ),
                            'FOOT_PER_SECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.30480000000000002,
                                    ),
                                ),
                                'symbol' => 'ftdivs',
                            ),
                            'FOOT_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.30480000000000002,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'ftdivh',
                            ),
                            'YARD_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => '0.9144\'',
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'yddivh',
                            ),
                            'MILE_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1609.3440000000001,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'midivh',
                            ),
                        ),
                    ),
                    'ElectricCharge' => array(
                        'standard' => 'AMPEREHOUR',
                        'units' => array(
                            'MILLIAMPEREHOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mAh',
                            ),
                            'AMPEREHOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'Ah',
                            ),
                            'MILLICOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3600000,
                                    ),
                                ),
                                'symbol' => 'mC',
                            ),
                            'CENTIOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 360000,
                                    ),
                                ),
                                'symbol' => 'cC',
                            ),
                            'DECICOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 36000,
                                    ),
                                ),
                                'symbol' => 'dC',
                            ),
                            'COULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3600,
                                    ),
                                ),
                                'symbol' => 'C',
                            ),
                            'DEKACOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 360,
                                    ),
                                ),
                                'symbol' => 'daC',
                            ),
                            'HECTOCOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 36,
                                    ),
                                ),
                                'symbol' => 'hC',
                            ),
                            'KILOCOULOMB' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3.6000000000000001,
                                    ),
                                ),
                                'symbol' => 'kC',
                            ),
                        ),
                    ),
                    'Duration' => array(
                        'standard' => 'SECOND',
                        'units' => array(
                            'MILLISECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'ms',
                            ),
                            'SECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 's',
                            ),
                            'MINUTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 60,
                                    ),
                                ),
                                'symbol' => 'm',
                            ),
                            'HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3600,
                                    ),
                                ),
                                'symbol' => 'h',
                            ),
                            'DAY' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 86400,
                                    ),
                                ),
                                'symbol' => 'd',
                            ),
                        ),
                    ),
                    'Temperature' => array(
                        'standard' => 'KELVIN',
                        'units' => array(
                            'CELSIUS' => array(
                                'convert' => array(
                                    0 => array(
                                        'add' => 273.14999999999998,
                                    ),
                                ),
                                'symbol' => '°C',
                            ),
                            'FAHRENHEIT' => array(
                                'convert' => array(
                                    0 => array(
                                        'sub' => 32,
                                    ),
                                    1 => array(
                                        'div' => 1.8,
                                    ),
                                    2 => array(
                                        'add' => 273.14999999999998,
                                    ),
                                ),
                                'symbol' => '°F',
                            ),
                            'KELVIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => '°K',
                            ),
                            'RANKINE' => array(
                                'convert' => array(
                                    0 => array(
                                        'div' => 1.8,
                                    ),
                                ),
                                'symbol' => '°R',
                            ),
                            'REAUMUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.25,
                                    ),
                                    1 => array(
                                        'add' => 273.14999999999998,
                                    ),
                                ),
                                'symbol' => '°r',
                            ),
                        ),
                    ),
                    'Volume' => array(
                        'standard' => 'CUBIC_METER',
                        'units' => array(
                            'CUBIC_MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0000000000000001E-9,
                                    ),
                                ),
                                'symbol' => 'mm³',
                            ),
                            'CUBIC_CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 9.9999999999999995E-7,
                                    ),
                                ),
                                'symbol' => 'cm³',
                            ),
                            'MILLILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 9.9999999999999995E-7,
                                    ),
                                ),
                                'symbol' => 'ml',
                            ),
                            'CENTILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0000000000000001E-5,
                                    ),
                                ),
                                'symbol' => 'cl',
                            ),
                            'DECILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0001,
                                    ),
                                ),
                                'symbol' => 'dl',
                            ),
                            'CUBIC_DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'dm³',
                            ),
                            'LITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'l',
                            ),
                            'CUBIC_METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm³',
                            ),
                            'OUNCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                    1 => array(
                                        'div' => 160,
                                    ),
                                ),
                                'symbol' => 'oz',
                            ),
                            'PINT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                    1 => array(
                                        'div' => 8,
                                    ),
                                ),
                                'symbol' => 'pt',
                            ),
                            'BARREL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.16365924000000001,
                                    ),
                                ),
                                'symbol' => 'bbl',
                            ),
                            'GALLON' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                ),
                                'symbol' => 'gal',
                            ),
                            'CUBIC_FOOT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.5411915900000004,
                                    ),
                                    1 => array(
                                        'div' => 231,
                                    ),
                                ),
                                'symbol' => 'ft³',
                            ),
                            'CUBIC_INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0037854118000000001,
                                    ),
                                    1 => array(
                                        'div' => 231,
                                    ),
                                ),
                                'symbol' => 'in³',
                            ),
                            'CUBIC_YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.76455486100000003,
                                    ),
                                ),
                                'symbol' => 'yd³',
                            ),
                        ),
                    ),
                    'Weight' => array(
                        'standard' => 'KILOGRAM',
                        'units' => array(
                            'MILLIGRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 9.9999999999999995E-7,
                                    ),
                                ),
                                'symbol' => 'mg',
                            ),
                            'GRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'g',
                            ),
                            'KILOGRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'kg',
                            ),
                            'TON' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 't',
                            ),
                            'GRAIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.4798909999999995E-5,
                                    ),
                                ),
                                'symbol' => 'gr',
                            ),
                            'DENIER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0012750000000000001,
                                    ),
                                ),
                                'symbol' => 'denier',
                            ),
                            'ONCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.030589999999999999,
                                    ),
                                ),
                                'symbol' => 'once',
                            ),
                            'MARC' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.24475,
                                    ),
                                ),
                                'symbol' => 'marc',
                            ),
                            'LIVRE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.48949999999999999,
                                    ),
                                ),
                                'symbol' => 'livre',
                            ),
                            'OUNCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.45359237000000002,
                                    ),
                                    1 => array(
                                        'div' => 16,
                                    ),
                                ),
                                'symbol' => 'oz',
                            ),
                            'POUND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.45359237000000002,
                                    ),
                                ),
                                'symbol' => 'lb',
                            ),
                        ),
                    ),
                ),
            ),
            'akeneo_batch.connectors.class' => 'Akeneo\\Bundle\\BatchBundle\\Connector\\ConnectorRegistry',
            'akeneo_batch.job_repository.class' => 'Akeneo\\Bundle\\BatchBundle\\Job\\DoctrineJobRepository',
            'akeneo_batch.job_factory.class' => 'Akeneo\\Bundle\\BatchBundle\\Job\\JobFactory',
            'akeneo_batch.step_factory.class' => 'Akeneo\\Bundle\\BatchBundle\\Step\\StepFactory',
            'akeneo_batch.logger_subscriber.class' => 'Akeneo\\Bundle\\BatchBundle\\EventListener\\LoggerSubscriber',
            'akeneo_batch.notification_subscriber.class' => 'Akeneo\\Bundle\\BatchBundle\\EventListener\\NotificationSubscriber',
            'akeneo_batch.logger.batch_log_handler.class' => 'Akeneo\\Bundle\\BatchBundle\\Monolog\\Handler\\BatchLogHandler',
            'akeneo_batch.mail_notifier.class' => 'Akeneo\\Bundle\\BatchBundle\\Notification\\MailNotifier',
            'akeneo_batch.set_job_execution_log_file_subscriber.class' => 'Akeneo\\Bundle\\BatchBundle\\EventListener\\SetJobExecutionLogFileSubscriber',
            'akeneo_batch.manager.job_execution.class' => 'Akeneo\\Bundle\\BatchBundle\\Manager\\JobExecutionManager',
            'akeneo_batch.connectors_config' => NULL,
            'akeneo_batch.jobs_config' => NULL,
            'akeneo_batch.mail_notifier.sender_email' => 'mailer@akeneo.com',
            'akeneo_storage_utils.storage_driver' => 'doctrine/orm',
            'akeneo_storage_utils.storage_driver.doctrine/orm' => true,
            'doctrine.entity_repository.class' => 'Doctrine\\ORM\\EntityRepository',
            'doctrine.document_repository.class' => 'Doctrine\\ODM\\MongoDB\\DocumentRepository',
            'akeneo_storage_utils.doctrine.smart_manager_registry.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\SmartManagerRegistry',
            'akeneo_storage_utils.doctrine.table_name_builder.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\TableNameBuilder',
            'akeneo_storage_utils.doctrine.object_detacher.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\Common\\Detacher\\ObjectDetacher',
            'akeneo_storage_utils.event_subscriber.resolve_target_repository.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\EventSubscriber\\ResolveTargetRepositorySubscriber',
            'akeneo_storage_utils.factory.referenced_collection.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\MongoDBODM\\Collections\\ReferencedCollectionFactory',
            'akeneo_storage_utils.doctrine.orm.cursor.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\ORM\\Cursor\\Cursor',
            'akeneo_storage_utils.doctrine.orm.cursor_factory.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\ORM\\Cursor\\CursorFactory',
            'pim_filter.form.type.filter.scope_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\ScopeFilterType',
            'pim_filter.form.type.filter.category_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\CategoryFilterType',
            'pim_filter.form.type.filter.metric_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\MetricFilterType',
            'pim_filter.form.type.filter.price_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\PriceFilterType',
            'pim_filter.form.type.filter.ajax_choice_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\AjaxChoiceFilterType',
            'pim_filter.form.type.filter.boolean_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\Filter\\BooleanFilterType',
            'pim_filter.form.type.category_class' => 'Pim\\Bundle\\FilterBundle\\Form\\Type\\CategoryType',
            'pim_filter.product_utility.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductFilterUtility',
            'pim_filter.datasource.orm_adapter.class' => 'Pim\\Bundle\\FilterBundle\\Datasource\\Orm\\OrmFilterDatasourceAdapter',
            'pim_filter.datasource.product_orm_adapter.class' => 'Pim\\Bundle\\FilterBundle\\Datasource\\Orm\\OrmFilterProductDatasourceAdapter',
            'pim_filter.ajax_choice_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\AjaxChoiceFilter',
            'pim_filter.product_scope_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\ScopeFilter',
            'pim_filter.product_groups_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\GroupsFilter',
            'pim_filter.product_family_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\FamilyFilter',
            'pim_filter.product_completeness_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CompletenessFilter',
            'pim_filter.product_category_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\CategoryFilter',
            'pim_filter.product_date_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\DateRangeFilter',
            'pim_filter.product_enabled_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\EnabledFilter',
            'pim_filter.product_in_group_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\InGroupFilter',
            'pim_filter.product_is_associated_filter.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\Product\\IsAssociatedFilter',
            'pim_filter.product_value_string.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\StringFilter',
            'pim_filter.product_value_choice.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\ChoiceFilter',
            'pim_filter.product_value_number.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\NumberFilter',
            'pim_filter.product_value_date.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\DateRangeFilter',
            'pim_filter.product_value_datetime.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\DateTimeRangeFilter',
            'pim_filter.product_value_boolean.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\BooleanFilter',
            'pim_filter.product_value_metric.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\MetricFilter',
            'pim_filter.product_value_price.class' => 'Pim\\Bundle\\FilterBundle\\Filter\\ProductValue\\PriceFilter',
            'pim_user.context.user.class' => 'Pim\\Bundle\\UserBundle\\Context\\UserContext',
            'pim_user.event_subscriber.user_preferences.class' => 'Pim\\Bundle\\UserBundle\\EventSubscriber\\UserPreferencesSubscriber',
            'pim_user.event_subscriber.group.class' => 'Pim\\Bundle\\UserBundle\\EventSubscriber\\GroupSubscriber',
            'pim_user.form.type.acl_collection.class' => 'Pim\\Bundle\\UserBundle\\Form\\Type\\PrivilegeCollectionType',
            'pim_user.form.subscriber.user_preferences.class' => 'Pim\\Bundle\\UserBundle\\Form\\Subscriber\\UserPreferencesSubscriber',
            'pim_user.form.type.acl_access_level_selector.class' => 'Pim\\Bundle\\UserBundle\\Form\\Type\\AclAccessLevelSelectorType',
            'pim_user.repository.role.class' => 'Pim\\Bundle\\UserBundle\\Entity\\Repository\\RoleRepository',
            'pim_user.repository.group.class' => 'Pim\\Bundle\\UserBundle\\Entity\\Repository\\GroupRepository',
            'pim_user.entity.role.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Role',
            'pim_user.entity.group.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Group',
            'pim_user.entity.user.class' => 'Oro\\Bundle\\UserBundle\\Entity\\User,',
            'pim_user.entity.user_api.class' => 'Oro\\Bundle\\UserBundle\\Entity\\UserApi',
            'pim_user.entity.business_entity.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit',
            'pim_user.twig.acl_groups_extension.class' => 'Pim\\Bundle\\UserBundle\\Twig\\AclGroupsExtension',
            'pim_user.view_element.visibility_checker.groups_and_roles.class' => 'Pim\\Bundle\\UserBundle\\ViewElement\\Checker\\GroupsAndRolesVisibilityChecker',
            'pim_user.view_element.user.tab.general.template' => 'PimUserBundle:User:Tab/general.html.twig',
            'pim_user.view_element.user.tab.additional.template' => 'PimUserBundle:User:Tab/additional.html.twig',
            'pim_user.view_element.user.tab.group_and_role.template' => 'PimUserBundle:User:Tab/group_and_role.html.twig',
            'pim_user.view_element.user.tab.password.template' => 'PimUserBundle:User:Tab/password.html.twig',
            'pim_user.view_element.user.tab.business_unit.template' => 'PimUserBundle:User:Tab/business_unit.html.twig',
            'pim_jsfv.generator.class' => 'Pim\\Bundle\\JsFormValidationBundle\\Generator\\FormValidationScriptGenerator',
            'pim_dashboard.controller.widget.class' => 'Pim\\Bundle\\DashboardBundle\\Controller\\WidgetController',
            'pim_dashboard.widget.registry.class' => 'Pim\\Bundle\\DashboardBundle\\Widget\\Registry',
            'pim_dashboard.widget.completeness.class' => 'Pim\\Bundle\\DashboardBundle\\Widget\\CompletenessWidget',
            'pim_dashboard.widget.links.class' => 'Pim\\Bundle\\DashboardBundle\\Widget\\LinksWidget',
            'pim_dashboard.widget.last_operations.class' => 'Pim\\Bundle\\DashboardBundle\\Widget\\LastOperationsWidget',
            'pim_installer.fixture_loader.configuration_registry.class' => 'Pim\\Bundle\\InstallerBundle\\FixtureLoader\\ConfigurationRegistry',
            'pim_installer.fixture_loader.loader_factory.class' => 'Pim\\Bundle\\InstallerBundle\\FixtureLoader\\LoaderFactory',
            'pim_installer.fixture_loader.multiple_loader.class' => 'Pim\\Bundle\\InstallerBundle\\FixtureLoader\\MultipleLoader',
            'pim_installer.fixture_loader.job_loader.class' => 'Pim\\Bundle\\InstallerBundle\\FixtureLoader\\FixtureJobLoader',
            'pim_installer.reader.file.yaml.class' => 'Pim\\Bundle\\InstallerBundle\\FixtureLoader\\YamlReader',
            'pim_installer.fixture_loader.job_loader.config_file' => 'PimInstallerBundle/Resources/config/fixtures_jobs.yml',
            'pim_installer.files' => array(
                'channels' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/channels.yml'),
                'locales' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/locales.yml'),
                'currencies' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/currencies.yml'),
                'families' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/families.yml'),
                'attribute_groups' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/attribute_groups.yml'),
                'attributes' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/attributes.yml'),
                'categories' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/categories.csv'),
                'group_types' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/group_types.yml'),
                'user_groups' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/user_groups.yml'),
                'user_roles' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/user_roles.yml'),
                'users' => (dirname(dirname(dirname(__DIR__))).'/src/Foody/InstallerBundle/Resources/fixtures/main/users.yml'),
            ),
            'pim_ui.controller.ajax_option.class' => 'Pim\\Bundle\\UIBundle\\Controller\\AjaxOptionController',
            'pim_ui.form.type.ajax_entity.class' => 'Pim\\Bundle\\UIBundle\\Form\\Type\\AjaxEntityType',
            'pim_ui.form.type.number.class' => 'Pim\\Bundle\\UIBundle\\Form\\Type\\NumberType',
            'pim_ui.form.type.switch.class' => 'Pim\\Bundle\\UIBundle\\Form\\Type\\SwitchType',
            'pim_ui.form.transformer.ajax_entity.factory.class' => 'Pim\\Bundle\\UIBundle\\Form\\Transformer\\AjaxEntityTransformerFactory',
            'pim_ui.form.transformer.ajax_entity.class' => 'Pim\\Bundle\\UIBundle\\Form\\Transformer\\AjaxEntityTransformer',
            'pim_notification.controller.notification.class' => 'Pim\\Bundle\\NotificationBundle\\Controller\\NotificationController',
            'pim_notification.entity.notification.class' => 'Pim\\Bundle\\NotificationBundle\\Entity\\Notification',
            'pim_notification.entity.user_notification.class' => 'Pim\\Bundle\\NotificationBundle\\Entity\\UserNotification',
            'pim_notification.repository.user_notification.class' => 'Pim\\Bundle\\NotificationBundle\\Entity\\Repository\\UserNotificationRepository',
            'pim_notification.manager.notification.class' => 'Pim\\Bundle\\NotificationBundle\\Manager\\NotificationManager',
            'pim_notification.factory.notification.class' => 'Pim\\Bundle\\NotificationBundle\\Factory\\NotificationFactory',
            'pim_notification.factory.user_notification.class' => 'Pim\\Bundle\\NotificationBundle\\Factory\\UserNotificationFactory',
            'pim_notification.event_subscriber.job_execution_notifier.class' => 'Pim\\Bundle\\NotificationBundle\\EventSubscriber\\JobExecutionNotifier',
            'pim_notification.twig.notification_extension.class' => 'Pim\\Bundle\\NotificationBundle\\Twig\\NotificationExtension',
            'pim_catalog.registry.attribute_type.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\AttributeTypeRegistry',
            'pim_catalog.attribute_type.identifier.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\IdentifierType',
            'pim_catalog.attribute_type.text.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\TextType',
            'pim_catalog.attribute_type.textarea.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\TextAreaType',
            'pim_catalog.attribute_type.multiselect.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\OptionMultiSelectType',
            'pim_catalog.attribute_type.simpleselect.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\OptionSimpleSelectType',
            'pim_catalog.attribute_type.price_collection.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\PriceCollectionType',
            'pim_catalog.attribute_type.number.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\NumberType',
            'pim_catalog.attribute_type.boolean.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\BooleanType',
            'pim_catalog.attribute_type.date.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\DateType',
            'pim_catalog.attribute_type.file.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\FileType',
            'pim_catalog.attribute_type.image.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\ImageType',
            'pim_catalog.attribute_type.metric.class' => 'Pim\\Bundle\\CatalogBundle\\AttributeType\\MetricType',
            'pim_catalog.builder.product.class' => 'Pim\\Bundle\\CatalogBundle\\Builder\\ProductBuilder',
            'pim_catalog.builder.product_template.class' => 'Pim\\Bundle\\CatalogBundle\\Builder\\ProductTemplateBuilder',
            'pim_catalog.context.catalog.class' => 'Pim\\Bundle\\CatalogBundle\\Context\\CatalogContext',
            'pim_catalog.entity.product.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Product',
            'pim_catalog.entity.product_value.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValue',
            'pim_catalog.entity.association.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Association',
            'pim_catalog.entity.completeness.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Completeness',
            'pim_catalog.entity.association_type.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AssociationType',
            'pim_catalog.entity.category.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Category',
            'pim_catalog.entity.category_translation.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\CategoryTranslation',
            'pim_catalog.entity.group.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Group',
            'pim_catalog.entity.group_type.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\GroupType',
            'pim_catalog.entity.attribute.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Attribute',
            'pim_catalog.entity.attribute_translation.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeTranslation',
            'pim_catalog.entity.attribute_group.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroup',
            'pim_catalog.entity.attribute_group_translation.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeGroupTranslation',
            'pim_catalog.entity.attribute_option.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOption',
            'pim_catalog.entity.attribute_option_value.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeOptionValue',
            'pim_catalog.entity.attribute_requirement.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\AttributeRequirement',
            'pim_catalog.entity.family.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Family',
            'pim_catalog.entity.family_translation.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\FamilyTranslation',
            'pim_catalog.entity.channel.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Channel',
            'pim_catalog.entity.currency.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Currency',
            'pim_catalog.entity.locale.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Locale',
            'pim_catalog.entity.metric.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\Metric',
            'pim_catalog.entity.product_media.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductMedia',
            'pim_catalog.entity.product_price.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductPrice',
            'pim_catalog.entity.product_template.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\ProductTemplate',
            'pim_catalog.entity.available_attributes.class' => 'Pim\\Bundle\\CatalogBundle\\Model\\AvailableAttributes',
            'pim_catalog.event_subscriber.create_attribute_requirement.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\CreateAttributeRequirementSubscriber',
            'pim_catalog.event_subscriber.localizable.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\LocalizableSubscriber',
            'pim_catalog.event_subscriber.scopable.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\ScopableSubscriber',
            'pim_catalog.event_subscriber.timestampable.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\TimestampableSubscriber',
            'pim_catalog.event_subscriber.initialize_values.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\InitializeValuesSubscriber',
            'pim_catalog.event_subscriber.outdate_indexed_values.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\OutdateIndexedValuesSubscriber',
            'pim_catalog.event_subscriber.category.check_channels.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\Category\\CheckChannelsOnDeletionSubscriber',
            'pim_catalog.factory.family.class' => 'Pim\\Bundle\\CatalogBundle\\Factory\\FamilyFactory',
            'pim_catalog.factory.attribute_requirement.class' => 'Pim\\Bundle\\CatalogBundle\\Factory\\AttributeRequirementFactory',
            'pim_catalog.factory.media.class' => 'Pim\\Bundle\\CatalogBundle\\Factory\\MediaFactory',
            'pim_catalog.factory.metric.class' => 'Pim\\Bundle\\CatalogBundle\\Factory\\MetricFactory',
            'pim_catalog.factory.group.class' => 'Pim\\Bundle\\CatalogBundle\\Factory\\GroupFactory',
            'pim_catalog.helper.locale.class' => 'Pim\\Bundle\\CatalogBundle\\Helper\\LocaleHelper',
            'pim_catalog.manager.association.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\AssociationManager',
            'pim_catalog.manager.association_type.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\AssociationTypeManager',
            'pim_catalog.manager.attribute.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\AttributeManager',
            'pim_catalog.manager.attribute_option.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\AttributeOptionManager',
            'pim_catalog.manager.attribute_group.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\AttributeGroupManager',
            'pim_catalog.manager.category.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\CategoryManager',
            'pim_catalog.manager.channel.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ChannelManager',
            'pim_catalog.manager.completeness.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\CompletenessManager',
            'pim_catalog.manager.currency.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\CurrencyManager',
            'pim_catalog.manager.family.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\FamilyManager',
            'pim_catalog.manager.group.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\GroupManager',
            'pim_catalog.manager.locale.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\LocaleManager',
            'pim_catalog.manager.media.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\MediaManager',
            'pim_catalog.manager.product.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ProductManager',
            'pim_catalog.manager.product_mass_action.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ProductMassActionManager',
            'pim_catalog.manager.product_category.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ProductCategoryManager',
            'pim_catalog.manager.product_template_media.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ProductTemplateMediaManager',
            'pim_catalog.applier.product_template.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\ProductTemplateApplier',
            'pim_catalog.resolver.variant_group_attributes.class' => 'Pim\\Bundle\\CatalogBundle\\Manager\\VariantGroupAttributesResolver',
            'pim_catalog.model.product.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductInterface',
            'pim_catalog.model.product_value.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductValueInterface',
            'pim_catalog.model.association.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AssociationInterface',
            'pim_catalog.model.completeness.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\CompletenessInterface',
            'pim_catalog.model.association_type.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AssociationTypeInterface',
            'pim_catalog.model.category.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\CategoryInterface',
            'pim_catalog.model.group.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\GroupInterface',
            'pim_catalog.model.group_type.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\GroupTypeInterface',
            'pim_catalog.model.attribute.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeInterface',
            'pim_catalog.model.attribute_group.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeGroupInterface',
            'pim_catalog.model.attribute_option.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeOptionInterface',
            'pim_catalog.model.attribute_option_value.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeOptionValueInterface',
            'pim_catalog.model.attribute_requirement.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\AttributeRequirementInterface',
            'pim_catalog.model.family.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\FamilyInterface',
            'pim_catalog.model.channel.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ChannelInterface',
            'pim_catalog.model.currency.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\CurrencyInterface',
            'pim_catalog.model.locale.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\LocaleInterface',
            'pim_catalog.model.metric.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\MetricInterface',
            'pim_catalog.model.product_media.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductMediaInterface',
            'pim_catalog.model.product_price.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductPriceInterface',
            'pim_catalog.model.product_template.interface' => 'Pim\\Bundle\\CatalogBundle\\Model\\ProductTemplateInterface',
            'pim_catalog.query.product_query_builder_factory.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\ProductQueryBuilderFactory',
            'pim_catalog.query.product_query_builder.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\ProductQueryBuilder',
            'pim_catalog.query.filter.registry.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\Filter\\FilterRegistry',
            'pim_catalog.query.sorter.registry.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\Sorter\\SorterRegistry',
            'pim_catalog.query.filter.field_dumper.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\Filter\\FieldFilterDumper',
            'pim_catalog.query.filter.attribute_dumper.class' => 'Pim\\Bundle\\CatalogBundle\\Query\\Filter\\AttributeFilterDumper',
            'pim_catalog.doctrine.query.filter.category.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Filter\\CategoryFilter',
            'pim_catalog.doctrine.query.filter.object_id_resolver.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Filter\\ObjectIdResolver',
            'pim_catalog.remover.base.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\Common\\Remover\\BaseRemover',
            'pim_catalog.remover.category.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\CategoryRemover',
            'pim_catalog.remover.association_type.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\AssociationTypeRemover',
            'pim_catalog.remover.group.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\GroupRemover',
            'pim_catalog.remover.attribute.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\AttributeRemover',
            'pim_catalog.remover.attribute_option.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\AttributeOptionRemover',
            'pim_catalog.remover.family.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\FamilyRemover',
            'pim_catalog.remover.product.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Remover\\ProductRemover',
            'pim_catalog.remover.base_options_resolver.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\Common\\Remover\\BaseRemovingOptionsResolver',
            'pim_catalog.repository.association_type.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AssociationTypeRepository',
            'pim_catalog.repository.attribute_group.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeGroupRepository',
            'pim_catalog.repository.attribute_option.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeOptionRepository',
            'pim_catalog.repository.attribute.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\AttributeRepository',
            'pim_catalog.repository.category.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\CategoryRepository',
            'pim_catalog.repository.channel.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\ChannelRepository',
            'pim_catalog.repository.currency.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\CurrencyRepository',
            'pim_catalog.repository.family.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\FamilyRepository',
            'pim_catalog.repository.group.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\GroupRepository',
            'pim_catalog.repository.group_type.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\GroupTypeRepository',
            'pim_catalog.repository.locale.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\LocaleRepository',
            'pim_catalog.repository.product_template.class' => 'Pim\\Bundle\\CatalogBundle\\Entity\\Repository\\ProductTemplateRepository',
            'pim_catalog.repository.product_value.class' => 'Doctrine\\ORM\\EntityRepository',
            'pim_catalog.saver.base.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\Common\\Saver\\BaseSaver',
            'pim_catalog.saver.base_options_resolver.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\Common\\Saver\\BaseSavingOptionsResolver',
            'pim_catalog.saver.product.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\ProductSaver',
            'pim_catalog.saver.product_options_resolver.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\ProductSavingOptionsResolver',
            'pim_catalog.saver.completeness_options_resolver.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\CompletenessSavingOptionsResolver',
            'pim_catalog.saver.group_options_resolver.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\GroupSavingOptionsResolver',
            'pim_catalog.saver.group.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\GroupSaver',
            'pim_catalog.saver.family.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\FamilySaver',
            'pim_catalog.saver.channel.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\Common\\Saver\\ChannelSaver',
            'pim_catalog.updater.product.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\ProductUpdater',
            'pim_catalog.updater.product_template.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\ProductTemplateUpdater',
            'pim_catalog.updater.setter.registry.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\SetterRegistry',
            'pim_catalog.updater.setter.abstract.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\AbstractValueSetter',
            'pim_catalog.updater.setter.text_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\TextValueSetter',
            'pim_catalog.updater.setter.metric_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\MetricValueSetter',
            'pim_catalog.updater.setter.boolean_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\BooleanValueSetter',
            'pim_catalog.updater.setter.date_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\DateValueSetter',
            'pim_catalog.updater.setter.number_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\NumberValueSetter',
            'pim_catalog.updater.setter.simpleselect_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\SimpleSelectValueSetter',
            'pim_catalog.updater.setter.multiselect_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\MultiSelectValueSetter',
            'pim_catalog.updater.setter.price_collection_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\PriceCollectionValueSetter',
            'pim_catalog.updater.setter.media_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Setter\\MediaValueSetter',
            'pim_catalog.updater.copier.abstract.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\AbstractValueCopier',
            'pim_catalog.updater.copier.registry.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\CopierRegistry',
            'pim_catalog.updater.copier.text_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.textarea_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.boolean_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.number_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.date_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.image_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\MediaValueCopier',
            'pim_catalog.updater.copier.file_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\MediaValueCopier',
            'pim_catalog.updater.copier.metric_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\MetricValueCopier',
            'pim_catalog.updater.copier.simpleselect_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\BaseValueCopier',
            'pim_catalog.updater.copier.multiselect_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\MultiSelectValueCopier',
            'pim_catalog.updater.copier.price_collection_value.class' => 'Pim\\Bundle\\CatalogBundle\\Updater\\Copier\\PriceCollectionValueCopier',
            'pim_catalog.validator.helper.attribute.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\AttributeValidatorHelper',
            'pim_catalog.validator.constraint.valid_metric.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\ValidMetricValidator',
            'pim_catalog.validator.constraint.single_identifier.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\SingleIdentifierAttributeValidator',
            'pim_catalog.validator.constraint.unique_variant_axis.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\UniqueVariantAxisValidator',
            'pim_catalog.validator.constraint.unique_variant_group.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\UniqueVariantGroupValidator',
            'pim_catalog.validator.constraint.unique_value.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\UniqueValueValidator',
            'pim_catalog.validator.constraint.immutable.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\ImmutableValidator',
            'pim_catalog.validator.constraint.variant_group_values.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\VariantGroupValuesValidator',
            'pim_catalog.validator.constraint.variant_group_axis.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\VariantGroupAxisValidator',
            'pim_catalog.validator.constraint.has_variant_axes.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Constraints\\HasVariantAxesValidator',
            'pim_catalog.validator.constraint_guesser.chained.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ChainedAttributeConstraintGuesser',
            'pim_catalog.validator.constraint_guesser.email.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\EmailGuesser',
            'pim_catalog.validator.constraint_guesser.file.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\FileGuesser',
            'pim_catalog.validator.constraint_guesser.length.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\LengthGuesser',
            'pim_catalog.validator.constraint_guesser.not_blank.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\NotBlankGuesser',
            'pim_catalog.validator.constraint_guesser.date.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\DateGuesser',
            'pim_catalog.validator.constraint_guesser.numeric.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\NumericGuesser',
            'pim_catalog.validator.constraint_guesser.range.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\RangeGuesser',
            'pim_catalog.validator.constraint_guesser.regex.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\RegexGuesser',
            'pim_catalog.validator.constraint_guesser.not_decimal.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\NotDecimalGuesser',
            'pim_catalog.validator.constraint_guesser.url.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\UrlGuesser',
            'pim_catalog.validator.constraint_guesser.unique_value.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\UniqueValueGuesser',
            'pim_catalog.validator.constraint_guesser.price_collection.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\PriceCollectionGuesser',
            'pim_catalog.validator.constraint_guesser.metric.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\MetricGuesser',
            'pim_catalog.validator.constraint_guesser.identifier.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\ConstraintGuesser\\IdentifierGuesser',
            'pim_catalog.validator.mapping.delegating_class_metadata_factory.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Mapping\\DelegatingClassMetadataFactory',
            'pim_catalog.validator.mapping.product_value_metadata_factory.class' => 'Pim\\Bundle\\CatalogBundle\\Validator\\Mapping\\ProductValueMetadataFactory',
            'pim_catalog.repository.association.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\AssociationRepository',
            'pim_catalog.repository.product.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\ProductRepository',
            'pim_catalog.repository.completeness.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\CompletenessRepository',
            'pim_catalog.repository.product_mass_action.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\ProductMassActionRepository',
            'pim_catalog.repository.product_category.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\ProductCategoryRepository',
            'pim_catalog.doctrine.completeness_generator.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\CompletenessGenerator',
            'pim_catalog.event_subscriber.orm.inject_product_reference.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\ORM\\InjectProductReferenceSubscriber',
            'pim_catalog.event_subscriber.metric_base_values.class' => 'Pim\\Bundle\\CatalogBundle\\EventSubscriber\\ORM\\MetricBaseValuesSubscriber',
            'pim_catalog.doctrine.query.filter.product_id.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\ProductIdFilter',
            'pim_catalog.doctrine.query.filter.number.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\NumberFilter',
            'pim_catalog.doctrine.query.filter.string.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\StringFilter',
            'pim_catalog.doctrine.query.filter.boolean.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\BooleanFilter',
            'pim_catalog.doctrine.query.filter.family.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\FamilyFilter',
            'pim_catalog.doctrine.query.filter.groups.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\GroupsFilter',
            'pim_catalog.doctrine.query.filter.date.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\DateFilter',
            'pim_catalog.doctrine.query.filter.completeness.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\CompletenessFilter',
            'pim_catalog.doctrine.query.filter.price.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\PriceFilter',
            'pim_catalog.doctrine.query.filter.metric.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\MetricFilter',
            'pim_catalog.doctrine.query.filter.option.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\OptionFilter',
            'pim_catalog.doctrine.query.filter.options.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\OptionsFilter',
            'pim_catalog.doctrine.query.filter.media.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Filter\\MediaFilter',
            'pim_catalog.doctrine.query.cursor.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\ORM\\Cursor\\Cursor',
            'pim_catalog.doctrine.cursor_factory.product.class' => 'Akeneo\\Bundle\\StorageUtilsBundle\\Doctrine\\ORM\\Cursor\\CursorFactory',
            'pim_catalog.factory.product_cursor.page_size' => 1000,
            'pim_catalog.doctrine.query.sorter.base.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\BaseSorter',
            'pim_catalog.doctrine.query.sorter.entity.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\EntitySorter',
            'pim_catalog.doctrine.query.sorter.family.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\FamilySorter',
            'pim_catalog.doctrine.query.sorter.completeness.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\CompletenessSorter',
            'pim_catalog.doctrine.query.sorter.in_group.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\InGroupSorter',
            'pim_catalog.doctrine.query.sorter.is_associated.class' => 'Pim\\Bundle\\CatalogBundle\\Doctrine\\ORM\\Sorter\\IsAssociatedSorter',
            'pim_datagrid.controller.datagrid.class' => 'Pim\\Bundle\\DataGridBundle\\Controller\\DatagridController',
            'pim_datagrid.controller.export.class' => 'Pim\\Bundle\\DataGridBundle\\Controller\\ExportController',
            'pim_datagrid.controller.product_export.class' => 'Pim\\Bundle\\DataGridBundle\\Controller\\ProductExportController',
            'pim_datagrid.controller.datagrid_view.class' => 'Pim\\Bundle\\DataGridBundle\\Controller\\DatagridViewController',
            'pim_datagrid.controller.mass_action.class' => 'Pim\\Bundle\\DataGridBundle\\Controller\\MassActionController',
            'pim_datagrid.datasource.default.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\Datasource',
            'pim_datagrid.datasource.product.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ProductDatasource',
            'pim_datagrid.datasource.support_resolver.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\DatasourceSupportResolver',
            'pim_datagrid.datasource.adapter_resolver.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\DatasourceAdapterResolver',
            'pim_datagrid.datagrid.product.configuration_registry.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\ConfigurationRegistry',
            'pim_datagrid.extension.formatter.property.product_value.field_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\FieldProperty',
            'pim_datagrid.extension.formatter.property.product_value.attribute_options_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\AttributeOptionsProperty',
            'pim_datagrid.extension.formatter.property.product_value.attribute_option_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\AttributeOptionProperty',
            'pim_datagrid.extension.formatter.property.product_value.price_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\PriceProperty',
            'pim_datagrid.extension.formatter.property.product_value.image_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\ImageProperty',
            'pim_datagrid.extension.formatter.property.product_value.file_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\FileProperty',
            'pim_datagrid.extension.formatter.property.product_value.metric_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\MetricProperty',
            'pim_datagrid.extension.formatter.property.product_value.boolean_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\BooleanProperty',
            'pim_datagrid.extension.formatter.property.product_value.date_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\DateProperty',
            'pim_datagrid.extension.formatter.property.product_value.twig_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\ProductValue\\TwigProperty',
            'pim_datagrid.extension.formatter.property.product.groups_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\Product\\GroupsProperty',
            'pim_datagrid.extension.formatter.property.job.name_property.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\Job\\NameProperty',
            'pim_datagrid.extension.selector.orm.product_value.base_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\BaseSelector',
            'pim_datagrid.extension.selector.orm.product_value.option_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\OptionSelector',
            'pim_datagrid.extension.selector.orm.product_value.options_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\OptionsSelector',
            'pim_datagrid.extension.selector.orm.product_value.prices_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\PricesSelector',
            'pim_datagrid.extension.selector.orm.product_value.metric_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\MetricSelector',
            'pim_datagrid.extension.selector.orm.product_value.media_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\ProductValue\\MediaSelector',
            'pim_datagrid.extension.selector.orm.product.label_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\Product\\LabelSelector',
            'pim_datagrid.extension.selector.orm.product.groups_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\Product\\GroupsSelector',
            'pim_datagrid.extension.selector.orm.product.completeness_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\Product\\CompletenessSelector',
            'pim_datagrid.extension.selector.orm.product.family_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\Product\\FamilySelector',
            'pim_datagrid.extension.selector.orm.product.in_group_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\Orm\\Product\\InGroupSelector',
            'pim_datagrid.extension.sorter.orm.field_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Orm\\FieldSorter',
            'pim_datagrid.extension.sorter.product.field_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\FieldSorter',
            'pim_datagrid.extension.sorter.product.value_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\ValueSorter',
            'pim_datagrid.extension.sorter.product.completeness_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\CompletenessSorter',
            'pim_datagrid.extension.sorter.product.family_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\FamilySorter',
            'pim_datagrid.extension.sorter.product.in_group_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\InGroupSorter',
            'pim_datagrid.extension.sorter.product.is_associated_sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\Product\\IsAssociatedSorter',
            'pim_datagrid.extension.pager.orm.pager.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Pager\\Orm\\Pager',
            'pim_datagrid.extension.pager.pager_resolver.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Pager\\PagerResolver',
            'pim_datagrid.extension.filter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Filter\\FilterExtension',
            'pim_datagrid.extension.sorter.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Sorter\\SorterExtension',
            'pim_datagrid.extension.pager.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Pager\\PagerExtension',
            'pim_datagrid.extension.selector.orm_selector.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Selector\\OrmSelectorExtension',
            'pim_datagrid.extension.action.type.tab_redirect.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\TabRedirectAction',
            'pim_datagrid.datasource.result_record.hydrator.default.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ResultRecordHydrator',
            'pim_datagrid.datasource.result_record.hydrator.orm.object.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ObjectHydrator',
            'pim_datagrid.extension.mass_action.type.export.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Export\\ExportMassAction',
            'pim_datagrid.extension.mass_action.type.delete.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Ajax\\DeleteMassAction',
            'pim_datagrid.extension.mass_action.handler.edit.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Handler\\EditMassActionHandler',
            'pim_datagrid.extension.mass_action.handler.export.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Handler\\ExportMassActionHandler',
            'pim_datagrid.extension.mass_action.handler.sequential_edit.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Handler\\SequentialEditActionHandler',
            'pim_datagrid.extension.mass_action.handler.delete.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Handler\\DeleteMassActionHandler',
            'pim_datagrid.extension.mass_action.handler.product_delete.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Handler\\DeleteProductsMassActionHandler',
            'pim_datagrid.extension.mass_action.dispatcher.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionDispatcher',
            'pim_datagrid.extension.mass_action.handler.registry.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionHandlerRegistry',
            'pim_datagrid.extension.mass_action.util.product_fields_builder.class' => 'Pim\\Bundle\\DataGridBundle\\Extension\\MassAction\\Util\\ProductFieldsBuilder',
            'pim_datagrid.event_listener.add_locale_code_to_grid.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\AddLocaleCodeToGridListener',
            'pim_datagrid.event_listener.add_parameters_to_grid.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\AddParametersToGridListener',
            'pim_datagrid.event_listener.add_parameters_to_product_grid.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\AddParametersToProductGridListener',
            'pim_datagrid.event_listener.add_parameters_to_variant_product_grid.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\AddParametersToVariantProductGridListener',
            'pim_datagrid.event_listener.configure_product_grid_listener.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\ConfigureProductGridListener',
            'pim_datagrid.event_listener.configure_sorters_listener.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\ConfigureSortersListener',
            'pim_datagrid.event_listener.configure_history_grid_listener.class' => 'Pim\\Bundle\\DataGridBundle\\EventListener\\ConfigureHistoryGridListener',
            'pim_datagrid.product.attribute_type.pim_catalog_identifier' => array(
                'column' => array(
                    'type' => 'product_value_field',
                    'selector' => 'product_value_base',
                ),
                'filter' => array(
                    'type' => 'product_value_string',
                    'ftype' => 'string',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'choice_list' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_text' => array(
                'column' => array(
                    'type' => 'product_value_field',
                    'selector' => 'product_value_base',
                ),
                'filter' => array(
                    'type' => 'product_value_string',
                    'ftype' => 'string',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_textarea' => array(
                'column' => array(
                    'type' => 'product_value_field',
                    'selector' => 'product_value_base',
                ),
                'filter' => array(
                    'type' => 'product_value_string',
                    'ftype' => 'string',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_simpleselect' => array(
                'column' => array(
                    'type' => 'product_value_option',
                    'selector' => 'product_value_option',
                ),
                'filter' => array(
                    'type' => 'product_value_choice',
                    'ftype' => 'ajax_choice',
                    'options' => array(
                        'field_options' => array(
                            'multiple' => true,
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_multiselect' => array(
                'column' => array(
                    'type' => 'product_value_options',
                    'selector' => 'product_value_options',
                ),
                'filter' => array(
                    'type' => 'product_value_choice',
                    'ftype' => 'ajax_choice',
                    'options' => array(
                        'field_options' => array(
                            'multiple' => true,
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => NULL,
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_number' => array(
                'column' => array(
                    'type' => 'product_value_field',
                    'selector' => 'product_value_base',
                ),
                'filter' => array(
                    'type' => 'product_value_number',
                    'ftype' => 'number',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_boolean' => array(
                'column' => array(
                    'type' => 'product_value_boolean',
                    'selector' => 'product_value_base',
                    'frontend_type' => 'html',
                    'template' => 'PimDataGridBundle:Property:boolean.html.twig',
                ),
                'filter' => array(
                    'type' => 'product_value_boolean',
                    'ftype' => 'boolean',
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_date' => array(
                'column' => array(
                    'type' => 'product_value_date',
                    'selector' => 'product_value_base',
                    'frontend_type' => 'date',
                ),
                'filter' => array(
                    'type' => 'product_value_date',
                    'ftype' => 'date',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => 'product_value',
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_file' => array(
                'column' => array(
                    'type' => 'product_value_file',
                    'selector' => 'product_value_media',
                    'frontend_type' => 'string',
                ),
                'filter' => array(
                    'type' => 'product_value_string',
                    'ftype' => 'string',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => NULL,
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_image' => array(
                'column' => array(
                    'type' => 'product_value_image',
                    'selector' => 'product_value_media',
                    'frontend_type' => 'html',
                    'template' => 'PimDataGridBundle:Property:image.html.twig',
                ),
                'filter' => array(
                    'type' => 'product_value_string',
                    'ftype' => 'string',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => NULL,
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_price_collection' => array(
                'column' => array(
                    'type' => 'product_value_price',
                    'selector' => 'product_value_price',
                ),
                'filter' => array(
                    'type' => 'product_value_price',
                    'ftype' => 'price',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => NULL,
            ),
            'pim_datagrid.product.attribute_type.pim_catalog_metric' => array(
                'column' => array(
                    'type' => 'product_value_metric',
                    'selector' => 'product_value_metric',
                    'frontend_type' => 'html',
                    'template' => 'PimDataGridBundle:Property:metric.html.twig',
                ),
                'filter' => array(
                    'type' => 'product_value_metric',
                    'ftype' => 'metric',
                    'options' => array(
                        'field_options' => array(
                            'attr' => array(
                                'empty_choice' => true,
                            ),
                        ),
                    ),
                ),
                'sorter' => NULL,
            ),
            'pim_datagrid.form.type.datagrid_view.class' => 'Pim\\Bundle\\DataGridBundle\\Form\\Type\\DatagridViewType',
            'pim_datagrid.manager.datagrid_view.class' => 'Pim\\Bundle\\DataGridBundle\\Manager\\DatagridViewManager',
            'pim_datagrid.entity.datagrid_view.class' => 'Pim\\Bundle\\DataGridBundle\\Entity\\DatagridView',
            'pim_datagrid.datagrid.product.context_configurator.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\ContextConfigurator',
            'pim_datagrid.datagrid.product.columns_configurator.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\ColumnsConfigurator',
            'pim_datagrid.datagrid.product.filters_configurator.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\FiltersConfigurator',
            'pim_datagrid.datagrid.product.sorters_configurator.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\SortersConfigurator',
            'pim_datagrid.datagrid.product.group_columns_configurator.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\Product\\GroupColumnsConfigurator',
            'pim_datagrid.datagrid.request_parameters_extractor.class' => 'Pim\\Bundle\\DataGridBundle\\Datagrid\\RequestParametersExtractor',
            'pim_datagrid.datasource.result_record.hydrator.product.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ProductHydrator',
            'pim_datagrid.datasource.result_record.hydrator.associated_product.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ProductHydrator',
            'pim_datagrid.datasource.result_record.hydrator.object_id.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ObjectIdHydrator',
            'pim_datagrid.datasource.result_record.hydrator.object.class' => 'Pim\\Bundle\\DataGridBundle\\Datasource\\ResultRecord\\Orm\\ObjectHydrator',
            'pim_translation.form.type.translatable_field.class' => 'Pim\\Bundle\\TranslationBundle\\Form\\Type\\TranslatableFieldType',
            'pim_translation.listener.add_locale.class' => 'Pim\\Bundle\\TranslationBundle\\EventListener\\AddLocaleListener',
            'pim_import_export.datagrid.provider.job.class' => 'Pim\\Bundle\\ImportExportBundle\\Datagrid\\JobDatagridProvider',
            'pim_import_export.form.type.job_instance.class' => 'Pim\\Bundle\\ImportExportBundle\\Form\\Type\\JobInstanceType',
            'pim_import_export.form.type.job_configuration.class' => 'Pim\\Bundle\\ImportExportBundle\\Form\\Type\\JobConfigurationType',
            'pim_import_export.form.type.step_configuration.class' => 'Pim\\Bundle\\ImportExportBundle\\Form\\Type\\StepConfigurationType',
            'pim_import_export.form.type.step_element_configuration.class' => 'Pim\\Bundle\\ImportExportBundle\\Form\\Type\\StepElementConfigurationType',
            'pim_import_export.controller.import_profile.class' => 'Pim\\Bundle\\ImportExportBundle\\Controller\\ImportProfileController',
            'pim_import_export.controller.export_profile.class' => 'Pim\\Bundle\\ImportExportBundle\\Controller\\ExportProfileController',
            'pim_import_export.controller.import_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Controller\\ImportExecutionController',
            'pim_import_export.controller.export_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Controller\\ExportExecutionController',
            'akeneo_batch.entity.job_instance.class' => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance',
            'akeneo_batch.entity.job_execution.class' => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution',
            'akeneo_batch.entity.step_execution.class' => 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution',
            'akeneo_batch.job.batch_status.class' => 'Akeneo\\Bundle\\BatchBundle\\Job\\BatchStatus',
            'pim_import_export.normalizer.job_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Normalizer\\JobExecutionNormalizer',
            'pim_import_export.normalizer.step_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Normalizer\\StepExecutionNormalizer',
            'pim_import_export.repository.job_instance.class' => 'Pim\\Bundle\\ImportExportBundle\\Entity\\Repository\\JobInstanceRepository',
            'pim_import_export.repository.job_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Entity\\Repository\\JobExecutionRepository',
            'pim_import_export.manager.job_execution.class' => 'Pim\\Bundle\\ImportExportBundle\\Manager\\JobExecutionManager',
            'pim_import_export.manager.job.class' => 'Pim\\Bundle\\ImportExportBundle\\Manager\\JobManager',
            'pim_import_export.factory.job_instance.class' => 'Pim\\Bundle\\ImportExportBundle\\Factory\\JobInstanceFactory',
            'pim_import_export.validator.job_instance.class' => 'Pim\\Bundle\\ImportExportBundle\\Validator\\Constraints\\JobInstanceValidator',
            'pim_import_export.twig.normalize_configuration_extension.class' => 'Pim\\Bundle\\ImportExportBundle\\Twig\\NormalizeConfigurationExtension',
            'pim_versioning.entity.version.class' => 'Pim\\Bundle\\VersioningBundle\\Model\\Version',
            'pim_versioning.versionable_entities' => array(
                0 => 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobInstance',
            ),
            'pim_versioning.update_guesser.attribute_group.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\AttributeGroupUpdateGuesser',
            'pim_versioning.update_guesser.attribute_option.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\AttributeOptionUpdateGuesser',
            'pim_versioning.update_guesser.chained.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\ChainedUpdateGuesser',
            'pim_versioning.update_guesser.contains_products.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\ContainsProductsUpdateGuesser',
            'pim_versioning.update_guesser.product_value.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\ProductValueUpdateGuesser',
            'pim_versioning.update_guesser.translations.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\TranslationsUpdateGuesser',
            'pim_versioning.update_guesser.versionable.class' => 'Pim\\Bundle\\VersioningBundle\\UpdateGuesser\\VersionableUpdateGuesser',
            'pim_versioning.manager.version.class' => 'Pim\\Bundle\\VersioningBundle\\Manager\\VersionManager',
            'pim_versioning.context.version.class' => 'Pim\\Bundle\\VersioningBundle\\Manager\\VersionContext',
            'pim_versioning.builder.version.class' => 'Pim\\Bundle\\VersioningBundle\\Builder\\VersionBuilder',
            'pim_versioning.event_subscriber.addversion.class' => 'Pim\\Bundle\\VersioningBundle\\EventSubscriber\\AddVersionSubscriber',
            'pim_versioning.event_subscriber.adduser.class' => 'Pim\\Bundle\\VersioningBundle\\EventSubscriber\\AddUserSubscriber',
            'pim_versioning.event_subscriber.addcontext.class' => 'Pim\\Bundle\\VersioningBundle\\EventSubscriber\\AddContextSubscriber',
            'pim_versioning.event_subscriber.timestampable.class' => 'Pim\\Bundle\\VersioningBundle\\EventSubscriber\\TimestampableSubscriber',
            'pim_versioning.repository.version.class' => 'Pim\\Bundle\\VersioningBundle\\Doctrine\\ORM\\VersionRepository',
            'pim_versioning.doctrine.orm.pending_mass_persister.class' => 'Pim\\Bundle\\VersioningBundle\\Doctrine\\ORM\\PendingMassPersister',
            'pim_webservice.handler.rest.product.class' => 'Pim\\Bundle\\WebServiceBundle\\Handler\\Rest\\ProductHandler',
            'pim_webservice.serializer.class' => 'Symfony\\Component\\Serializer\\Serializer',
            'pim_enrich.attribute_icons' => array(
                'pim_catalog_identifier' => 'asterisk',
                'pim_catalog_text' => 'font',
                'pim_catalog_textarea' => 'file-text-alt',
                'pim_catalog_number' => 'sort-by-order',
                'pim_catalog_price_collection' => 'money',
                'pim_catalog_multiselect' => 'tags',
                'pim_catalog_simpleselect' => 'tag',
                'pim_catalog_file' => 'file',
                'pim_catalog_image' => 'camera-retro',
                'pim_catalog_boolean' => 'check',
                'pim_catalog_date' => 'calendar',
                'pim_catalog_metric' => 'beaker',
            ),
            'pim_enrich.colors' => array(
                'gray' => '238,232,213,1',
                'white' => '253,246,227,1',
                'yellow' => '181,137,0,1',
                'orange' => '203,75,22,1',
                'magenta' => '211,54,130,1',
                'violet' => '108,113,196,1',
                'blue' => '38,139,210,1',
                'cyan' => '42,161,152,1',
            ),
            'pim_enrich.controller.attribute_group.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\AttributeGroupController',
            'pim_enrich.controller.category_tree.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\CategoryTreeController',
            'pim_enrich.controller.channel.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\ChannelController',
            'pim_enrich.controller.currency.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\CurrencyController',
            'pim_enrich.controller.family.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\FamilyController',
            'pim_enrich.controller.locale.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\LocaleController',
            'pim_enrich.controller.mass_edit_action.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\MassEditActionController',
            'pim_enrich.controller.attribute.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\AttributeController',
            'pim_enrich.controller.attribute_option.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\AttributeOptionController',
            'pim_enrich.controller.product.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\ProductController',
            'pim_enrich.controller.association.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\AssociationController',
            'pim_enrich.controller.group.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\GroupController',
            'pim_enrich.controller.association_type.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\AssociationTypeController',
            'pim_enrich.controller.media.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\MediaController',
            'pim_enrich.controller.variant_group.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\VariantGroupController',
            'pim_enrich.controller.group_type.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\GroupTypeController',
            'pim_enrich.controller.completeness.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\CompletenessController',
            'pim_enrich.controller.sequential_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\SequentialEditController',
            'pim_enrich.controller.product_comment.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\ProductCommentController',
            'pim_enrich.controller.product_attribute.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\ProductAttributeController',
            'pim_enrich.controller.variant_group_attribute.class' => 'Pim\\Bundle\\EnrichBundle\\Controller\\VariantGroupAttributeController',
            'pim_enrich.entity.sequential_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Entity\\SequentialEdit',
            'pim_enrich.event_listener.user_context.class' => 'Pim\\Bundle\\EnrichBundle\\EventListener\\UserContextListener',
            'pim_enrich.event_listener.request.class' => 'Pim\\Bundle\\EnrichBundle\\EventListener\\RequestListener',
            'pim_enrich.event_subscriber.translate_flash_messages.class' => 'Pim\\Bundle\\EnrichBundle\\EventListener\\TranslateFlashMessagesSubscriber',
            'pim_enrich.factory.sequential_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Factory\\SequentialEditFactory',
            'pim_enrich.form.subscriber.add_attribute_type.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\AddAttributeTypeRelatedFieldsSubscriber',
            'pim_enrich.form.subscriber.add_attribute_requirements.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\AddAttributeRequirementsSubscriber',
            'pim_enrich.form.subscriber.add_value_field_subscriber.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\AddProductValueFieldSubscriber',
            'pim_enrich.form.subscriber.family_disable_fields_subscriber.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\DisableFamilyFieldsSubscriber',
            'pim_enrich.form.subscriber.family_attribute_label_subscriber.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\AddAttributeAsLabelSubscriber',
            'pim_enrich.form.subscriber.set_attribute_group_sort_order.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\SetAttributeGroupSortOrderSubscriber',
            'pim_enrich.form.subscriber.transform_product_template_values.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\TransformProductTemplateValuesSubscriber',
            'pim_enrich.form.subscriber.add_variant_group_template.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Subscriber\\AddVariantGroupTemplateSubscriber',
            'pim_enrich.form.type.product.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ProductType',
            'pim_enrich.form.type.product_template.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ProductTemplateType',
            'pim_enrich.form.type.product_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ProductEditType',
            'pim_enrich.form.type.product_create.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ProductCreateType',
            'pim_enrich.form.type.product.view.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\View\\ProductFormView',
            'pim_enrich.form.type.product_value.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ProductValueType',
            'pim_enrich.form.type.product_value_wysiwyg.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\WysiwygType',
            'pim_enrich.form.type.product_value_price.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\PriceType',
            'pim_enrich.form.type.product_value_price_collection.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\PriceCollectionType',
            'pim_enrich.form.type.product_value_metric.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MetricType',
            'pim_enrich.form.type.product_value_media.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MediaType',
            'pim_enrich.form.type.attribute.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeType',
            'pim_enrich.form.type.currency.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\CurrencyType',
            'pim_enrich.form.type.channel.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ChannelType',
            'pim_enrich.form.type.group.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\GroupType',
            'pim_enrich.form.type.variant_group.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\VariantGroupType',
            'pim_enrich.form.type.family.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\FamilyType',
            'pim_enrich.form.type.category.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\CategoryType',
            'pim_enrich.form.type.group_type.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\GroupTypeType',
            'pim_enrich.form.type.attribute_group.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeGroupType',
            'pim_enrich.form.type.association.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AssociationType',
            'pim_enrich.form.type.association_type.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AssociationTypeType',
            'pim_enrich.form.type.image.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ImageType',
            'pim_enrich.form.type.conversion_units.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ConversionUnitsType',
            'pim_enrich.form.type.attribute_option.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeOptionType',
            'pim_enrich.form.type.attribute_option_create.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeOptionCreateType',
            'pim_enrich.form.type.attribute_option_value.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeOptionValueType',
            'pim_enrich.form.type.available_attributes.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AvailableAttributesType',
            'pim_enrich.form.type.attribute_property_scopable.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeProperty\\ScopableType',
            'pim_enrich.form.type.attribute_property_available_locale.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeProperty\\AvailableLocalesType',
            'pim_enrich.form.type.attribute_property_options.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeProperty\\OptionsType',
            'pim_enrich.form.type.attribute_requirement.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\AttributeRequirementType',
            'pim_enrich.form.type.localized_collection.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\LocalizedCollectionType',
            'pim_enrich.form.type.light_entity.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\LightEntityType',
            'pim_enrich.form.type.object_identifier.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\ObjectIdentifierType',
            'pim_enrich.form.type.edit_common_attributes.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\EditCommonAttributesType',
            'pim_enrich.form.type.add_to_groups.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\AddToGroupsType',
            'pim_enrich.form.type.add_to_variant_group.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\AddToVariantGroupType',
            'pim_enrich.form.type.change_family.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\ChangeFamilyType',
            'pim_enrich.form.type.change_status.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\ChangeStatusType',
            'pim_enrich.form.type.classify.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\ClassifyType',
            'pim_enrich.form.type.set_attribute_requirements.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Type\\MassEditAction\\SetAttributeRequirementsType',
            'pim_enrich.form.factory.product_value.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Factory\\ProductValueFormFactory',
            'pim_enrich.form.handler.base.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Handler\\BaseHandler',
            'pim_enrich.form.handler.group.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\Handler\\GroupHandler',
            'pim_enrich.manager.sequential_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Manager\\SequentialEditManager',
            'pim_enrich.mass_edit_action.operator.registry.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\OperatorRegistry',
            'pim_enrich.mass_edit_action.operator.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operator\\AbstractMassEditOperator',
            'pim_enrich.mass_edit_action.operator.product.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operator\\ProductMassEditOperator',
            'pim_enrich.mass_edit_action.operator.family.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operator\\FamilyMassEditOperator',
            'pim_enrich.mass_edit_action.change_status.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\ChangeStatus',
            'pim_enrich.mass_edit_action.edit_common_attributes.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\EditCommonAttributes',
            'pim_enrich.mass_edit_action.classify.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\Classify',
            'pim_enrich.mass_edit_action.change_family.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\ChangeFamily',
            'pim_enrich.mass_edit_action.add_to_groups.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\AddToGroups',
            'pim_enrich.mass_edit_action.add_to_variant_group.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\AddToVariantGroup',
            'pim_entich.mass_edit_action.set_attribute_requirements.class' => 'Pim\\Bundle\\EnrichBundle\\MassEditAction\\Operation\\SetAttributeRequirements',
            'pim_enrich.normalizer.attribute_option_value_collection.class' => 'Pim\\Bundle\\EnrichBundle\\Normalizer\\AttributeOptionValueCollectionNormalizer',
            'pim_enrich.normalizer.attribute_option.class' => 'Pim\\Bundle\\EnrichBundle\\Normalizer\\AttributeOptionNormalizer',
            'pim_enrich.normalizer.attribute_option_value.class' => 'Pim\\Bundle\\EnrichBundle\\Normalizer\\AttributeOptionValueNormalizer',
            'pim_enrich.provider.colors.class' => 'Pim\\Bundle\\EnrichBundle\\Provider\\ColorsProvider',
            'pim_enrich.repository.sequential_edit.class' => 'Pim\\Bundle\\EnrichBundle\\Entity\\Repository\\SequentialEditRepository',
            'pim_enrich.imagine.local_dir_resolver.class' => 'Pim\\Bundle\\EnrichBundle\\Imagine\\Cache\\Resolver\\LocalDirResolver',
            'pim_internal_api_serializer.class' => 'Symfony\\Component\\Serializer\\Serializer',
            'pim_enrich.encoder.json.class' => 'Symfony\\Component\\Serializer\\Encoder\\JsonEncoder',
            'pim_enrich.twig.locale_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\LocaleExtension',
            'pim_enrich.twig.category_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\CategoryExtension',
            'pim_enrich.twig.channel_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\ChannelExtension',
            'pim_enrich.twig.view_element_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\ViewElementExtension',
            'pim_enrich.twig.attribute_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\AttributeExtension',
            'pim_enrich.twig.object_class_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\ObjectClassExtension',
            'pim_enrich.twig.version_extension.class' => 'Pim\\Bundle\\EnrichBundle\\Twig\\VersionExtension',
            'pim_enrich.view_element.registry.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\ViewElementRegistry',
            'pim_enrich.view_element.base.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\BaseViewElement',
            'pim_enrich.view_element.visibility_checker.acl.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\Checker\\AclVisibilityChecker',
            'pim_enrich.view_element.visibility_checker.voter.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\Checker\\VoterVisibilityChecker',
            'pim_enrich.view_element.visibility_checker.edit_form.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\Checker\\EditFormVisibilityChecker',
            'pim_enrich.view_element.visibility_checker.non_empty_property.class' => 'Pim\\Bundle\\EnrichBundle\\ViewElement\\Checker\\NonEmptyPropertyVisibilityChecker',
            'pim_enrich.view_element.association_type.tab.property.template' => 'PimEnrichBundle:AssociationType:Tab/property.html.twig',
            'pim_enrich.view_element.association_type.tab.history.template' => 'PimEnrichBundle:Form:Tab/history.html.twig',
            'pim_enrich.view_element.attribute.tab.parameter.template' => 'PimEnrichBundle:Attribute:Tab/parameter.html.twig',
            'pim_enrich.view_element.attribute.tab.value.template' => 'PimEnrichBundle:Attribute:Tab/value.html.twig',
            'pim_enrich.view_element.attribute.tab.history.template' => 'PimEnrichBundle:Form:Tab/history.html.twig',
            'pim_enrich.view_element.attribute_group.tab.property.template' => 'PimEnrichBundle:AttributeGroup:Tab/property.html.twig',
            'pim_enrich.view_element.attribute_group.tab.attribute.template' => 'PimEnrichBundle:AttributeGroup:Tab/attribute.html.twig',
            'pim_enrich.view_element.attribute_group.tab.history.template' => 'PimEnrichBundle:Form:Tab/history.html.twig',
            'pim_enrich.view_element.category.tab.property.template' => 'PimEnrichBundle:CategoryTree:Tab/property.html.twig',
            'pim_enrich.view_element.category.tab.history.template' => 'PimEnrichBundle:Form:Tab/history.html.twig',
            'pim_enrich.view_element.channel.tab.property.template' => 'PimEnrichBundle:Channel:Tab/property.html.twig',
            'pim_enrich.view_element.channel.tab.history.template' => 'PimEnrichBundle:Form:Tab/history.html.twig',
            'pim_enrich.view_element.family.tab.property.template' => 'PimEnrichBundle:Family:Tab/property.html.twig',
            'pim_enrich.view_element.family.tab.attribute.template' => 'PimEnrichBundle:Family:Tab/attribute.html.twig',
            'pim_enrich.view_element.family.tab.history.template' => 'PimEnrichBundle:Family:Tab/history.html.twig',
            'pim_enrich.view_element.group.tab.product.template' => 'PimEnrichBundle:Group:Tab/product.html.twig',
            'pim_enrich.view_element.group.tab.property.template' => 'PimEnrichBundle:Group:Tab/property.html.twig',
            'pim_enrich.view_element.group.tab.history.template' => 'PimEnrichBundle:Group:Tab/history.html.twig',
            'pim_enrich.view_element.variant_group.tab.product.template' => 'PimEnrichBundle:Group:Tab/product.html.twig',
            'pim_enrich.view_element.variant_group.tab.property.template' => 'PimEnrichBundle:Group:Tab/property.html.twig',
            'pim_enrich.view_element.variant_group.tab.history.template' => 'PimEnrichBundle:Group:Tab/history.html.twig',
            'pim_enrich.view_element.variant_group.tab.attribute.template' => 'PimEnrichBundle:VariantGroup:Tab/attribute.html.twig',
            'pim_enrich.view_element.group_type.tab.property.template' => 'PimEnrichBundle:GroupType:Tab/property.html.twig',
            'pim_enrich.view_element.mass_edit.warning.template' => 'PimEnrichBundle:MassEditAction:warning.html.twig',
            'pim_enrich.view_element.product.tab.attribute.template' => 'PimEnrichBundle:Product:Tab/attribute.html.twig',
            'pim_enrich.view_element.product.tab.category.template' => 'PimEnrichBundle:Product:Tab/category.html.twig',
            'pim_enrich.view_element.product.tab.association.template' => 'PimEnrichBundle:Product:Tab/association.html.twig',
            'pim_enrich.view_element.product.tab.completeness.template' => 'PimEnrichBundle:Product:Tab/completeness.html.twig',
            'pim_enrich.view_element.product.tab.history.template' => 'PimEnrichBundle:Product:Tab/history.html.twig',
            'pim_enrich.form.view.view_updater.registry.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\View\\ViewUpdater\\ViewUpdaterRegistry',
            'pim_enrich.form.view.view_updater.variant.class' => 'Pim\\Bundle\\EnrichBundle\\Form\\View\\ViewUpdater\\VariantViewUpdater',
            'pim_base_connector.reader.doctrine.bulk_product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\Doctrine\\BulkProductReader',
            'pim_base_connector.reader.orm.entity.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\ORM\\EntityReader',
            'pim_base_connector.reader.orm.category.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\ORM\\CategoryReader',
            'pim_base_connector.reader.orm.attribute_option.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\ORM\\AttributeOptionReader',
            'pim_base_connector.reader.repository.group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\Repository\\GroupReader',
            'pim_base_connector.reader.repository.variant_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\Repository\\VariantGroupReader',
            'pim_base_connector.reader.file.csv.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\File\\CsvReader',
            'pim_base_connector.reader.file.csv_product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\File\\CsvProductReader',
            'pim_base_connector.reader.file.csv_category.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\File\\CsvCategoryReader',
            'pim_base_connector.reader.file.yaml.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\File\\YamlReader',
            'pim_base_connector.reader.dummy.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\DummyReader',
            'pim_base_connector.reader.cached.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\CachedReader',
            'pim_base_connector.processor.csv_serializer.homogeneous.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\CsvSerializer\\HomogeneousProcessor',
            'pim_base_connector.processor.csv_serializer.heterogeneous.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\CsvSerializer\\HeterogeneousProcessor',
            'pim_base_connector.processor.csv_serializer.product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\CsvSerializer\\ProductProcessor',
            'pim_base_connector.processor.transformer.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\TransformerProcessor',
            'pim_base_connector.processor.product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\ProductProcessor',
            'pim_base_connector.processor.category.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\CategoryProcessor',
            'pim_base_connector.processor.denormalization.csv_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\Denormalization\\GroupProcessor',
            'pim_base_connector.processor.denormalization.csv_variant_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\Denormalization\\VariantGroupProcessor',
            'pim_base_connector.processor.product_to_flat_array.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\ProductToFlatArrayProcessor',
            'pim_base_connector.processor.normalization.csv_variant_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\Normalization\\VariantGroupProcessor',
            'pim_base_connector.processor.dummy.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Processor\\DummyProcessor',
            'pim_base_connector.writer.doctrine.product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\Doctrine\\ProductWriter',
            'pim_base_connector.writer.doctrine.product_association.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\Doctrine\\ProductAssociationWriter',
            'pim_base_connector.writer.doctrine.variant_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\Doctrine\\VariantGroupWriter',
            'pim_base_connector.writer.doctrine.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\Doctrine\\Writer',
            'pim_base_connector.writer.file.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\File\\FileWriter',
            'pim_base_connector.writer.file.product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\File\\ProductWriter',
            'pim_base_connector.writer.dummy.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\DummyWriter',
            'pim_base_connector.writer.file.csv.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\File\\CsvWriter',
            'pim_base_connector.writer.file.csv_product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\File\\CsvProductWriter',
            'pim_base_connector.writer.file.csv_variant_group.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Writer\\File\\CsvVariantGroupWriter',
            'pim_base_connector.event_listener.archivist.class' => 'Pim\\Bundle\\BaseConnectorBundle\\EventListener\\JobExecutionArchivist',
            'pim_base_connector.event_listener.invalid_items_collector.class' => 'Pim\\Bundle\\BaseConnectorBundle\\EventListener\\InvalidItemsCollector',
            'pim_base_connector.factory.zip_filesystem.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Filesystem\\ZipFilesystemFactory',
            'pim_base_connector.archiver.invalid_item_csv_archiver.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Archiver\\InvalidItemsCsvArchiver',
            'pim_base_connector.archiver.file_reader_archiver.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Archiver\\FileReaderArchiver',
            'pim_base_connector.archiver.file_writer_archiver.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Archiver\\FileWriterArchiver',
            'pim_base_connector.archiver.archivable_file_writer_archiver.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Archiver\\ArchivableFileWriterArchiver',
            'pim_base_connector.validator.constraints.channel_validator.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Validator\\Constraints\\ChannelValidator',
            'pim_base_connector.validator.import.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Validator\\Import\\ImportValidator',
            'pim_base_connector.validator.product_import.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Validator\\Import\\ProductImportValidator',
            'pim_base_connector.validator.skip_import.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Validator\\Import\\SkipImportValidator',
            'pim_base_connector.validator.step.charset_validator.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Validator\\Step\\CharsetValidator',
            'pim_base_connector.step.validator.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Step\\ValidatorStep',
            'pim_base_connector.reader.doctrine.product.class' => 'Pim\\Bundle\\BaseConnectorBundle\\Reader\\Doctrine\\ORMProductReader',
            'pim_transform.transformer.registry.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\EntityTransformerRegistry',
            'pim_transform.transformer.entity.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\EntityTransformer',
            'pim_transform.transformer.product.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\ProductTransformer',
            'pim_transform.transformer.association.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\AssociationTransformer',
            'pim_transform.transformer.family.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\FamilyTransformer',
            'pim_transform.transformer.attribute.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\AttributeTransformer',
            'pim_transform.transformer.attribute_option.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\AttributeOptionTransformer',
            'pim_transform.transformer.job_instance.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\JobInstanceTransformer',
            'pim_transform.transformer.property.translation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\TranslationTransformer',
            'pim_transform.transformer.property.nested_translation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\NestedTranslationTransformer',
            'pim_transform.transformer.property.default.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\DefaultTransformer',
            'pim_transform.transformer.property.relation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\RelationTransformer',
            'pim_transform.transformer.property.media.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\MediaTransformer',
            'pim_transform.transformer.property.date.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\DateTransformer',
            'pim_transform.transformer.property.array.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\ArrayTransformer',
            'pim_transform.transformer.property.boolean.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\BooleanTransformer',
            'pim_transform.transformer.property.metric.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\MetricTransformer',
            'pim_transform.transformer.property.prices.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\PricesTransformer',
            'pim_transform.transformer.property.skip.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Property\\SkipTransformer',
            'pim_transform.transformer.column_info_transformer.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\ColumnInfo\\ColumnInfoTransformer',
            'pim_transform.transformer.column_info.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\ColumnInfo\\ColumnInfo',
            'pim_transform.transformer.guesser.chained.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\ChainedGuesser',
            'pim_transform.transformer.guesser.type.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\TypeGuesser',
            'pim_transform.transformer.guesser.array.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\ArrayGuesser',
            'pim_transform.transformer.guesser.relation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\RelationGuesser',
            'pim_transform.transformer.guesser.translation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\TranslationGuesser',
            'pim_transform.transformer.guesser.nested_translation.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\NestedTranslationGuesser',
            'pim_transform.transformer.guesser.default.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\DefaultGuesser',
            'pim_transform.transformer.guesser.regexp.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\RegexpGuesser',
            'pim_transform.transformer.guesser.attribute.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\AttributeGuesser',
            'pim_transform.transformer.guesser.attribute_option.class' => 'Pim\\Bundle\\TransformBundle\\Transformer\\Guesser\\AttributeOptionGuesser',
            'pim_transform.converter.metric.class' => 'Pim\\Bundle\\TransformBundle\\Converter\\MetricConverter',
            'pim_transform.cache.doctrine_cache.class' => 'Pim\\Bundle\\TransformBundle\\Cache\\DoctrineCache',
            'pim_transform.cache.attribute_cache.class' => 'Pim\\Bundle\\TransformBundle\\Cache\\AttributeCache',
            'pim_transform.cache.cache_clearer.class' => 'Pim\\Bundle\\TransformBundle\\Cache\\CacheClearer',
            'pim_transform.builder.field_name.class' => 'Pim\\Bundle\\TransformBundle\\Builder\\FieldNameBuilder',
            'pim_serializer.class' => 'Symfony\\Component\\Serializer\\Serializer',
            'pim_serializer.encoder.xml.class' => 'Symfony\\Component\\Serializer\\Encoder\\XmlEncoder',
            'pim_serializer.encoder.json.class' => 'Symfony\\Component\\Serializer\\Encoder\\JsonEncoder',
            'pim_serializer.encoder.csv.class' => 'Pim\\Bundle\\TransformBundle\\Encoder\\CsvEncoder',
            'pim_serializer.normalizer.association_type.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\AssociationTypeNormalizer',
            'pim_serializer.normalizer.attribute.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\AttributeNormalizer',
            'pim_serializer.normalizer.attribute_group.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\AttributeGroupNormalizer',
            'pim_serializer.normalizer.attribute_option.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\AttributeOptionNormalizer',
            'pim_serializer.normalizer.category.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\CategoryNormalizer',
            'pim_serializer.normalizer.channel.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\ChannelNormalizer',
            'pim_serializer.normalizer.datetime.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\DateTimeNormalizer',
            'pim_serializer.normalizer.family.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\FamilyNormalizer',
            'pim_serializer.normalizer.group.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\GroupNormalizer',
            'pim_serializer.normalizer.job_instance.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\JobInstanceNormalizer',
            'pim_serializer.normalizer.label_translation.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\TranslationNormalizer',
            'pim_serializer.normalizer.media.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\MediaNormalizer',
            'pim_serializer.normalizer.metric.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\MetricNormalizer',
            'pim_serializer.normalizer.product.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\ProductNormalizer',
            'pim_serializer.normalizer.product_price.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\ProductPriceNormalizer',
            'pim_serializer.normalizer.product_values.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\ProductValuesNormalizer',
            'pim_serializer.normalizer.product_value.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Structured\\ProductValueNormalizer',
            'pim_serializer.filter.product_value.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Filter\\ProductValueNormalizerFilter',
            'pim_serializer.denormalizer.product_values.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValuesDenormalizer',
            'pim_serializer.denormalizer.product_value.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValueDenormalizer',
            'pim_serializer.denormalizer.base_value.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\BaseValueDenormalizer',
            'pim_serializer.denormalizer.attribute_option.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\AttributeOptionDenormalizer',
            'pim_serializer.denormalizer.attribute_options.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\AttributeOptionsDenormalizer',
            'pim_serializer.denormalizer.prices.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\PricesDenormalizer',
            'pim_serializer.denormalizer.metric.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\MetricDenormalizer',
            'pim_serializer.denormalizer.datetime.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\DateTimeDenormalizer',
            'pim_serializer.denormalizer.media.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\MediaDenormalizer',
            'pim_serializer.denormalizer.boolean.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Structured\\ProductValue\\BooleanDenormalizer',
            'pim_serializer.normalizer.flat.association_type.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\AssociationTypeNormalizer',
            'pim_serializer.normalizer.flat.attribute.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\AttributeNormalizer',
            'pim_serializer.normalizer.flat.attribute_group.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\AttributeGroupNormalizer',
            'pim_serializer.normalizer.flat.category.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\CategoryNormalizer',
            'pim_serializer.normalizer.flat.channel.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\ChannelNormalizer',
            'pim_serializer.normalizer.flat.family.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\FamilyNormalizer',
            'pim_serializer.normalizer.flat.group.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\GroupNormalizer',
            'pim_serializer.normalizer.flat.job_instance.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\JobInstanceNormalizer',
            'pim_serializer.normalizer.flat.label_translation.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\TranslationNormalizer',
            'pim_serializer.normalizer.flat.product.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\ProductNormalizer',
            'pim_serializer.normalizer.flat.product_value.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\ProductValueNormalizer',
            'pim_serializer.normalizer.flat.collection.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\CollectionNormalizer',
            'pim_serializer.normalizer.flat.datetime.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\DateTimeNormalizer',
            'pim_serializer.normalizer.flat.media.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\MediaNormalizer',
            'pim_serializer.normalizer.flat.metric.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\MetricNormalizer',
            'pim_serializer.normalizer.flat.option.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\AttributeOptionNormalizer',
            'pim_serializer.normalizer.flat.price.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Flat\\PriceNormalizer',
            'pim_serializer.filter.flat_product_value.class' => 'Pim\\Bundle\\TransformBundle\\Normalizer\\Filter\\FlatProductValueNormalizerFilter',
            'pim_serializer.denormalizer.flat.product.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductDenormalizer',
            'pim_serializer.denormalizer.flat.family.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\FamilyDenormalizer',
            'pim_serializer.denormalizer.flat.category.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\CategoryDenormalizer',
            'pim_serializer.denormalizer.flat.group.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\GroupDenormalizer',
            'pim_serializer.denormalizer.flat.association.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\AssociationDenormalizer',
            'pim_serializer.denormalizer.flat.product_value.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValueDenormalizer',
            'pim_serializer.denormalizer.flat.product_values.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValuesDenormalizer',
            'pim_serializer.denormalizer.flat.base_value.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\BaseValueDenormalizer',
            'pim_serializer.denormalizer.flat.attribute_option.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\AttributeOptionDenormalizer',
            'pim_serializer.denormalizer.flat.attribute_options.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\AttributeOptionsDenormalizer',
            'pim_serializer.denormalizer.flat.prices.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\PricesDenormalizer',
            'pim_serializer.denormalizer.flat.metric.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\MetricDenormalizer',
            'pim_serializer.denormalizer.flat.datetime.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\DateTimeDenormalizer',
            'pim_serializer.denormalizer.flat.media.class' => 'Pim\\Bundle\\TransformBundle\\Denormalizer\\Flat\\ProductValue\\MediaDenormalizer',
            'pim_comment.entity.comment.class' => 'Pim\\Bundle\\CommentBundle\\Entity\\Comment',
            'pim_comment.form.type.comment.class' => 'Pim\\Bundle\\CommentBundle\\Form\\Type\\CommentType',
            'pim_comment.builder.comment.class' => 'Pim\\Bundle\\CommentBundle\\Builder\\CommentBuilder',
            'pim_comment.manager.comment.class' => 'Pim\\Bundle\\CommentBundle\\Manager\\CommentManager',
            'pim_comment.repository.comment.class' => 'Pim\\Bundle\\CommentBundle\\Repository\\CommentRepository',
            'pim_comment.controller.comment.class' => 'Pim\\Bundle\\CommentBundle\\Controller\\CommentController',
            'pim_comment.view_element.product.tab.comment.template' => 'PimCommentBundle:Product:Tab/comment.html.twig',
            'pim_pdf_generator.controller.product.class' => 'Pim\\Bundle\\PdfGeneratorBundle\\Controller\\ProductController',
            'pim_pdf_generator.renderer.product_pdf.class' => 'Pim\\Bundle\\PdfGeneratorBundle\\Renderer\\ProductPdfRenderer',
            'pim_pdf_generator.renderer.registry.class' => 'Pim\\Bundle\\PdfGeneratorBundle\\Renderer\\RendererRegistry',
            'pim_pdf_generator.builder.dompdf.class' => 'Pim\\Bundle\\PdfGeneratorBundle\\Builder\\DompdfBuilder',
            'pim_pdf_generator_font' => NULL,
            'foody_import.reader.bdd_product.class' => 'Foody\\ImportProductBundle\\Reader\\ProductReader',
            'foody_import.processor.product.class' => 'Foody\\ImportProductBundle\\Processor\\ProductProcessor',
            'foody_import.writer.orm_product.class' => 'Foody\\ImportProductBundle\\Writer\\ORM\\ProductWriter',
            'web_profiler.controller.profiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController',
            'web_profiler.controller.router.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\RouterController',
            'web_profiler.controller.exception.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ExceptionController',
            'web_profiler.debug_toolbar.class' => 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'web_profiler.debug_toolbar.position' => 'bottom',
            'sensio_distribution.webconfigurator.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Configurator',
            'jdare_clank.web_socket_server.class' => 'JDare\\ClankBundle\\Server\\Type\\WebSocketServerType',
            'jdare_clank.web_socket_server.port' => 8080,
            'jdare_clank.web_socket_server.host' => '127.0.0.1',
            'jdare_clank.periodic_services' => array(
                0 => array(
                    'service' => 'oro_wamp.db_ping',
                    'time' => 60000,
                ),
            ),
            'jdare_clank.rpc_services' => array(

            ),
            'jdare_clank.topic_services' => array(

            ),
            'jdare_clank.session_handler' => 'session.handler.pdo',
            'jdare_clank.servers' => array(
                0 => 'jdare_clank.web_socket_server',
            ),
            'data_collector.templates' => array(
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => 'SecurityBundle:Collector:security',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => 'DoctrineBundle:Collector:db',
                ),
            ),
            'nelmio_api_doc.parser.form_type_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\FormTypeParser',
            'nelmio_api_doc.parser.validation_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\ValidationParser',
            'nelmio_api_doc.parser.jms_metadata_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\JmsMetadataParser',
        );
    }
}
